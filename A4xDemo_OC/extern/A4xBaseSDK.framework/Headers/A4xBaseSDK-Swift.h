#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef A4XBASESDK_SWIFT_H
#define A4XBASESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import MJRefresh;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="A4xBaseSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xAddCameraEventModel")
@interface A4xAddCameraEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xAlbumsEventModel")
@interface A4xAlbumsEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSURLRequest;

SWIFT_CLASS("_TtC10A4xBaseSDK25A4xAlexaRedirectRequester")
@interface A4xAlexaRedirectRequester : NSObject <NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol A4xAppRouterDelegate;

SWIFT_CLASS("_TtC10A4xBaseSDK12A4xAppRouter")
@interface A4xAppRouter : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xAppRouter * _Nonnull router;)
+ (A4xAppRouter * _Nonnull)router SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <A4xAppRouterDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class A4xRouterBaseType;
@class NSString;

SWIFT_PROTOCOL("_TtP10A4xBaseSDK20A4xAppRouterDelegate_")
@protocol A4xAppRouterDelegate
/// VC跳转回调完成的代理
/// @param routerType    : 基本路由类型,包含push类型,模块类型和原因
/// @param fromClassName : 从哪个控制器过来的
/// @param params        : 回调的参数,包括deviceId等其他参数
- (void)a4xAppRouterCompletedWithRouterType:(A4xRouterBaseType * _Nonnull)routerType fromClassName:(NSString * _Nonnull)fromClassName :(NSDictionary<NSString *, id> * _Nullable)params;
@end


SWIFT_PROTOCOL("_TtP10A4xBaseSDK28A4xAppSettingManagerProtocol_")
@protocol A4xAppSettingManagerProtocol
- (void)changeOrientationWithOrientation:(UIInterfaceOrientationMask)orientation;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xBaseAccountCenterInterface")
@interface A4xBaseAccountCenterInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseAccountCenterInterface * _Nonnull shared;)
+ (A4xBaseAccountCenterInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC10A4xBaseSDK22A4xBaseActionsheetView")
@interface A4xBaseActionsheetView : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (void)viewWillLayoutSubviews;
- (void)loadView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class UITableView;
@class NSNumber;
@class NSIndexPath;
@class UITableViewCell;

@interface A4xBaseActionsheetView (SWIFT_EXTENSION(A4xBaseSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class UIPickerView;
@class UIView;

@interface A4xBaseActionsheetView (SWIFT_EXTENSION(A4xBaseSDK)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView rowHeightForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView widthForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end

@class CLLocationManager;
@class CLLocation;

SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseAddressViewModel")
@interface A4xBaseAddressViewModel : NSObject <CLLocationManagerDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseAlertView")
@interface A4xBaseAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC10A4xBaseSDK26A4xBaseAlertViewController")
@interface A4xBaseAlertViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)loadView;
@end


@class A4xObjcLinkedResultModel;

SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseAlexaInterface")
@interface A4xBaseAlexaInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseAlexaInterface * _Nonnull shared;)
+ (A4xBaseAlexaInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 从Alexa App授权完成后,跳转到自己的App需要调用的授权方法
/// <hr/>
/// @param alexaUrlStr : 通过AppDelegate如下方法拿到的 url.absoluteString
/// <hr/>
/// func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool
/// <hr/>
/// @return isCompleted : 是否完成授权 false:授权失败 true:授权完成,返回url字符串
/// @return urlString   : 授权完成的字符串,实现以下方法跳转到Alexa来确认是否授权
/// <hr/>
/// DispatchQueue.main.async {
/// if UIApplication.shared.canOpenURL(url) {
/// UIApplication.shared.open(url, options: [:], completionHandler: nil)
/// }
/// }
/// <hr/>
- (void)alexaAuthWithAlexaUrlStr:(NSString * _Nonnull)alexaUrlStr comple:(void (^ _Nonnull)(BOOL, NSString * _Nonnull))comple;
/// 主动从自己App跳转到AlexaApp授权的方法
/// completionHandler: 结果回调 true:授权成功 false:失败
- (void)toAlexaGrantAuthorizationWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nonnull, BOOL))completionHandler;
/// 发送Alexa App 授权结果的方法,通知后端
/// 从自己的 App 跳转到Alexa App并且授权之后,返回自己App需要调用通知后端授权完成的方法
/// <hr/>
/// @param alexaUrlStr : 通过AppDelegate如下方法拿到的 url.absoluteString
/// <hr/>
/// func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool
/// <hr/>
/// @return isCompleted : 是否完成授权 false:授权失败 true:授权完成,返回url字符串
/// @return urlString   : 授权完成的字符串,实现以下方法跳转到Alexa来确认是否授权
- (void)sendAlexaAuthResultWithAlexaUrlStr:(NSString * _Nonnull)alexaUrlStr comple:(void (^ _Nonnull)(BOOL, A4xObjcLinkedResultModel * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK27A4xBaseAuthorztionAlertView")
@interface A4xBaseAuthorztionAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xBaseBatteryView")
@interface A4xBaseBatteryView : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xBaseBindInterface")
@interface A4xBaseBindInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseBindInterface * _Nonnull shared;)
+ (A4xBaseBindInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)getBindCodeWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseBluetoothManager")
@interface A4xBaseBluetoothManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

@interface A4xBaseBluetoothManager (SWIFT_EXTENSION(A4xBaseSDK)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 从感兴趣的服务中，确认 我们所发现感兴趣的特征
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@class CBCentralManager;

@interface A4xBaseBluetoothManager (SWIFT_EXTENSION(A4xBaseSDK)) <CBCentralManagerDelegate>
- (void)centralManager:(CBCentralManager * _Nonnull)central willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (void)centralManager:(CBCentralManager * _Nonnull)central connectionEventDidOccur:(CBConnectionEvent)event forPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
/// 连接设备失败
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/// 断开连接
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheralDidUpdateName:(CBPeripheral * _Nonnull)peripheral;
- (void)peripheralDidUpdateRSSI:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK15A4xBaseCardView")
@interface A4xBaseCardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

@class UIEvent;

SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseCheckBoxButton")
@interface A4xBaseCheckBoxButton : UIButton
@property (nonatomic, getter=isSelected) BOOL selected;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIColor;

SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseCircleView")
@interface A4xBaseCircleView : UIView
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

enum A4xNodeType : NSInteger;
enum A4xProjectType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK13A4xBaseConfig")
@interface A4xBaseConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseConfig * _Nonnull shared;)
+ (A4xBaseConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Application’s App Key found on A4xBaseSDK Server’s “Management > Applications” section.
/// @discussion Using API Key or App ID will not work.
/// @discussion App key needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull appKey;
/// SDK环境(A4xNodeType)
@property (nonatomic) enum A4xNodeType nodeType;
/// 是否开启A4xSDK日志打印功能
/// 默认 0: 不开启日志打印功能
/// 1: 开启日志打印功能
@property (nonatomic) NSInteger enableDebug;
/// 租户Id,必传
@property (nonatomic, copy) NSString * _Nonnull tenantId;
/// A4xBaseSDK Server’s appToken without the slash at the end.
/// @discussion e.g. @c https://example.com
/// @discussion Host needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull appToken;
/// For enabling SDK language.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull language;
/// For enabling SDK userId.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// For enabling SDK endPoint.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull endPoint;
/// For enabling SDK phone.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull phone;
/// ISO country code can be specified in ISO 3166-1 alpha-2 format to be used for geo-location based push notifications and advanced segmentation.
/// @discussion By default, A4xBaseSDK Server uses a geo-ip database for acquiring user’s location. If the app has information about user’s country, it can be provided using this property.
/// @discussion It will be sent with @c begin_session requests only.
@property (nonatomic, copy) NSString * _Nonnull countryNo;
/// For specifying which features A4xBaseSDK will start with.
/// @discussion Available features for each platform:
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull features;
/// 初始化SDK参数
/// vicoHome调用时需设置为AppResource
/// -Parater SDK : 从Sdk Bundle里面读取图片和本地化语言文案,同时是Sdk类型接入
/// -Parater APP : 从App Assets里面读取图片,从App内部读取本地化语言文案,同时是App类型接入
/// note:
/// 主项目设置为.APP即可,客户调用时走默认参数即可,默认从SDK Bundle中读取资源
@property (nonatomic) enum A4xProjectType projectType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseCustomSwitch")
@interface A4xBaseCustomSwitch : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseDatePickerView")
@interface A4xBaseDatePickerView : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (void)viewWillLayoutSubviews;
- (void)loadView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface A4xBaseDatePickerView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)cancleButtonAction;
- (void)doneButtonAction;
- (void)outSiteAction;
@end


@class NSAttributedString;

@interface A4xBaseDatePickerView (SWIFT_EXTENSION(A4xBaseSDK)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView attributedTitleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView rowHeightForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xBaseDeviceSettingInterface")
@interface A4xBaseDeviceSettingInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseDeviceSettingInterface * _Nonnull shared;)
+ (A4xBaseDeviceSettingInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK26A4xBaseDeviceUpdateManager")
@interface A4xBaseDeviceUpdateManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC10A4xBaseSDK28A4xBaseDeviceUpdateViewModel")
@interface A4xBaseDeviceUpdateViewModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK30A4xBaseDeviceUpgradeSimpleView")
@interface A4xBaseDeviceUpgradeSimpleView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseEventModel")
@interface A4xBaseEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseFormatTool")
@interface A4xBaseFormatTool : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseFormatTool * _Nonnull shared;)
+ (A4xBaseFormatTool * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







@class UIImageView;

SWIFT_PROTOCOL("_TtP10A4xBaseSDK22A4xBaseGifToolDelegate_")
@protocol A4xBaseGifToolDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK15A4xBaseGridView")
@interface A4xBaseGridView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK28A4xBaseGuestRequestAlertView")
@interface A4xBaseGuestRequestAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseImageCard")
@interface A4xBaseImageCard : A4xBaseCardView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xBaseImageTextButton")
@interface A4xBaseImageTextButton : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class A4xObjcDeviceBindQRCodeImageModel;
@class A4xObjcDeviceModel;
@class A4xObjcLibraryNormalVideoModel;
@class A4xObjcLibraryEventVideoModel;
@class A4xObjcLibraryDeleteModel;
@class UIImage;
@class A4xObjcDeviceShareModel;

SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseInterface")
@interface A4xBaseInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseInterface * _Nonnull shared;)
+ (A4xBaseInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nullable themeColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
- (void)getBindCodeWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSString * _Nonnull))comple;
- (void)getQrCodeValueWithBindCode:(NSString * _Nonnull)bindCode wifiName:(NSString * _Nonnull)wifiName wifiPwd:(NSString * _Nonnull)wifiPwd isOldStyle:(BOOL)isOldStyle comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceBindQRCodeImageModel * _Nullable))comple;
- (void)getDeviceBindResultWithOperationIdArr:(NSArray<NSString *> * _Nonnull)operationIdArr comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceBindQRCodeImageModel * _Nullable))comple;
- (void)getDeviceListWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcDeviceModel *> * _Nullable))comple;
- (void)getDeviceInfoBy:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
- (void)getDeviceConfigBy:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
- (void)removeDeviceBy:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新推送接口
/// @param token     : 推送token
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)updatePushTokenWithToken:(NSString * _Nonnull)token comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 退出登录接口
- (void)loginOutRemoteWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 获取普通视频列表
/// 查询某些deviceIds对应的视频,也可以是单个
/// @param start     : 开始时间时间戳 例如:1630598400.0
/// @param end       : 结束时间时间戳 例如:1630684800.0
/// @param miss      : 是否已读 0:获取全部(包括已读未读) 1:获取未读
/// @param mark      : 是否标记 0:获取全部 1:未标记
/// @param deviceIds : 所有需要查询的设备id数组
/// @param page      : 页码
/// @param pageSize  : 对应的每页获取的个数
/// @param tags      : [“person”,“vehicle”,“pet”,“package_drop_off”,“package_pick_up”,“package_exist”,“vehicle_enter”,“vehicle_out”,“vehicle_held_up”]
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 返回结果[A4xObjcLibraryVideoModel]数组
/// @return message  : 返回结果描述
- (void)getLibraryVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryNormalVideoModel *> * _Nonnull, NSString * _Nullable))comple;
/// 获取视频事件列表
/// 查询某些deviceIds对应的视频,也可以是单个
/// @param start     : 开始时间时间戳 例如:1630598400.0
/// @param end       : 结束时间时间戳 例如:1630684800.0
/// @param miss      : 是否已读 0:获取全部(包括已读未读) 1:获取未读
/// @param mark      : 是否标记 0:获取全部 1:未标记
/// @param deviceIds : 所有需要查询的设备id数组
/// @param page      : 页码
/// @param pageSize  : 对应的每页获取的个数
/// @param tags      : [“person”,“vehicle”,“pet”,“package_drop_off”,“package_pick_up”,“package_exist”,“vehicle_enter”,“vehicle_out”,“vehicle_held_up”]
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 返回结果[A4xObjcLibraryEventVideoModel]数组
/// @return message  : 返回结果描述
- (void)getLibraryEventVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryEventVideoModel *> * _Nonnull, NSString * _Nullable))comple;
/// 根据录像ids数组删除某些相册视频,可以是单个
/// @param videoIds  : 视频id数组
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 没有删除掉的数据结果
/// @return message  : 错误信息描述
- (void)deleteLibraryVideoWithVideoIds:(NSArray<NSNumber *> * _Nonnull)videoIds comple:(void (^ _Nonnull)(NSInteger, A4xObjcLibraryDeleteModel * _Nonnull, NSString * _Nonnull))comple;
/// 根据录像id标记某个相册视频是否已读
/// @param videoId : 视频id
/// @param enable  : 是否已读 1:未读 0:已读
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)missLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 根据录像id标记某个相册视频是否收藏
/// @param videoId : 视频id
/// @param enable  : 是否收藏 1:收藏 0:未收藏
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)markLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 获取vip信息
- (void)getVipInfo;
/// 获取首页播放图片
- (UIImage * _Nullable)getThumbImageWithDeviceId:(NSString * _Nullable)deviceId SWIFT_WARN_UNUSED_RESULT;
/// 收到添加设备请求后,获取所有分享绑定请求的接口
/// code                      : 错误码 0-成功 其他-失败
/// [A4xObjcDeviceShareModel] : 返回获取到的设备详细信息数组
/// msg                       : 错误信息描述
- (void)getAllRequestBindsWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcDeviceShareModel *> * _Nullable))comple;
/// 接受/拒绝/取消 分享绑定的接口
/// @param shareModel : Objc分享模型
/// @param status : -1拒绝 0接受 -2关闭
- (void)shareHandleWithShareModel:(A4xObjcDeviceShareModel * _Nonnull)shareModel status:(NSInteger)status comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseLibraryInterface")
@interface A4xBaseLibraryInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseLibraryInterface * _Nonnull shared;)
+ (A4xBaseLibraryInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xBaseLiveInterface")
@interface A4xBaseLiveInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseLiveInterface * _Nonnull shared;)
+ (A4xBaseLiveInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xBaseLoadingButton")
@interface A4xBaseLoadingButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol A4xBaseManagerDelegate;
enum A4xSDKInitErrorType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK14A4xBaseManager")
@interface A4xBaseManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseManager * _Nonnull shared;)
+ (A4xBaseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <A4xBaseManagerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSString * _Nonnull a4xVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull a4xDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
/// 初始化SDK
- (void)initA4xSdkWithConfig:(A4xBaseConfig * _Nonnull)config comple:(void (^ _Nonnull)(enum A4xSDKInitErrorType, NSString * _Nonnull))comple SWIFT_METHOD_FAMILY(none);
- (BOOL)checkIsLogin SWIFT_WARN_UNUSED_RESULT;
- (void)loginOut;
- (void)objc_setLanguageWithLanguage:(NSString * _Nonnull)language comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
- (NSString * _Nonnull)getLocalStringWithKey:(NSString * _Nonnull)key param:(NSArray<NSString *> * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSValue *> * _Nonnull)matchStrRange:(NSString * _Nonnull)matchStr SWIFT_WARN_UNUSED_RESULT;
/// 判断是不是Debug环境
/// @return Bool - false:debug true:生产环境
- (BOOL)checkIsDebug SWIFT_WARN_UNUSED_RESULT;
/// 接收到了分享的请求,弹出弹框,内部逻辑已经处理
- (void)showReceivedBindSharedDeviceAlert;
@end


SWIFT_PROTOCOL("_TtP10A4xBaseSDK22A4xBaseManagerDelegate_")
@protocol A4xBaseManagerDelegate
/// 分享页面相关回调
/// guestType   : 点击按钮的类型 -2:关闭 , -1:拒绝 , 0:接受
/// errorCode   : 错误码 0:success other:失败
/// errorMessage: 错误原因
- (void)a4xBaseSDKGuestAlertButtonDidClickedWithGuestType:(NSInteger)guestType errorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseNavBarButton")
@interface A4xBaseNavBarButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK14A4xBaseNavView")
@interface A4xBaseNavView : UIView
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIGestureRecognizer;
@class UITouch;

SWIFT_CLASS("_TtC10A4xBaseSDK26A4xBaseNavgationController")
@interface A4xBaseNavgationController : UINavigationController <UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseNoDataView")
@interface A4xBaseNoDataView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseOTAInterface")
@interface A4xBaseOTAInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseOTAInterface * _Nonnull shared;)
+ (A4xBaseOTAInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum A4xDeviceLanguageType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK33A4xBaseObjcDeviceSettingInterface")
@interface A4xBaseObjcDeviceSettingInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseObjcDeviceSettingInterface * _Nonnull shared;)
+ (A4xBaseObjcDeviceSettingInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 获取所有已经绑定设备的方法
/// note:
/// 使用该方法必须先要初始化A4xBaseSDK成功,才能正常调用,否则会失败
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return models  : 返回获取到的设备详细信息数组
/// @return message : 返回信息描述
- (void)objc_getDeviceListWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcDeviceModel *> * _Nonnull))comple;
/// 获取某个设备详细信息的方法
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return model   : 返回获取到的设备详细信息
/// @return message : 信息描述
- (void)objc_getDeviceSettingInfoWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
/// 获取某个设备详细配置的方法
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return model   : 返回获取到的设备详细配置
/// @return message : 信息描述
- (void)objc_getDeviceSettingConfigWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
/// 通过deviceId更新某个设备的设备名称
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param deviceName : 需要修改的新设备名称(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_updateDeviceNameWithDeviceId:(NSString * _Nonnull)deviceId deviceName:(NSString * _Nonnull)deviceName comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 通过deviceId删除某个设备
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_removeDeviceWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 设备是否休眠
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param enable     : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_sleepToWakeUPWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 休眠计划开关
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param enable     : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)enableSleepPlanWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 创建休眠计划
/// <hr/>
/// @param deviceId     : 设备Id,唯一标识(必传)
/// @param planStartDay : 计划开始天数组[Int]
/// @param startHour    : 开始小时
/// @param startMinute  : 开始分钟
/// @param endHour      : 结束小时
/// @param endMinute    : 结束分钟
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)createSleepPlanWithDeviceId:(NSString * _Nonnull)deviceId planStartDay:(NSArray<NSNumber *> * _Nonnull)planStartDay startHour:(NSInteger)startHour startMinute:(NSInteger)startMinute endHour:(NSInteger)endHour endMinute:(NSInteger)endMinute comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 编辑休眠计划
/// <hr/>
/// @param period       : period
/// @param deviceId     : 设备Id,唯一标识(必传)
/// @param planStartDay : 计划开始天数组[Int]
/// @param startHour    : 开始小时
/// @param startMinute  : 开始分钟
/// @param endHour      : 结束小时
/// @param endMinute    : 结束分钟
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)editSleepPlanWithPeriod:(NSInteger)period deviceId:(NSString * _Nonnull)deviceId planStartDay:(NSArray<NSNumber *> * _Nonnull)planStartDay startHour:(NSInteger)startHour startMinute:(NSInteger)startMinute endHour:(NSInteger)endHour endMinute:(NSInteger)endMinute comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 删除休眠计划
/// <hr/>
/// @param period       : period
/// @param deviceId     : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)deleteSleepPlanWithPeriod:(NSInteger)period deviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新设备语言
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param language   : 语言类型
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)objc_updateDeviceLanguageWithDeviceId:(NSString * _Nonnull)deviceId language:(enum A4xDeviceLanguageType)language comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 警铃
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
/// @return result   : 返回警铃是否发出
- (void)objc_openAlarmWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, BOOL))comple;
/// 更新动态侦测灵敏度
/// note:
/// 更新灵敏度需要enable传true
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否开启 true/false(必传)
/// @param value    : 值 1:high 2:middle 3:low(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_setDetectionMotionWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 开启/关闭/频闪开关 更新频闪灵敏度
/// note:
/// 更新频闪灵敏度需要enable传true
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否开启 true/false(必传)
/// @param value    : 值 50:rate_50hz 60:rate_60hz
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_setFlickerMotionWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 是否打开录像指示灯
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_enableRecLampWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 是否打开扬声器
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param enable     : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_enableVoiceVolumeSwitchWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新扬声器音量:0到100
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param value      : 音量大小 0-100
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_updateVoiceVolumeWithDeviceId:(NSString * _Nonnull)deviceId value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新报警音量:10到100
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param value      : 音量大小 10-100
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_updateAlarmVolumeWithDeviceId:(NSString * _Nonnull)deviceId value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 视频翻转
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否翻转
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_setMirrorFlipWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcLibaryDateState;

SWIFT_CLASS("_TtC10A4xBaseSDK27A4xBaseObjcLibraryInterface")
@interface A4xBaseObjcLibraryInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseObjcLibraryInterface * _Nonnull shared;)
+ (A4xBaseObjcLibraryInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)getLibraryNormalVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryNormalVideoModel *> * _Nonnull, NSString * _Nullable))comple;
- (void)getLibraryEventVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryEventVideoModel *> * _Nonnull, NSString * _Nullable))comple;
- (void)getSingleLibraryInfoWithMsgId:(NSInteger)msgId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcLibraryNormalVideoModel * _Nullable))comple;
/// 根据录像id标记某个相册视频是否已读
/// @param videoId : 视频id
/// @param enable  : 是否已读 1:未读 0:已读
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)onReadLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 根据录像id标记某个相册视频是否收藏
/// @param videoId : 视频id
/// @param enable  : 是否收藏 1:收藏 0:未收藏
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)markLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 根据录像ids数组删除某些相册视频,可以是单个
/// @param videoIds  : 视频id数组
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 没有删除掉的数据结果
/// @return message  : 错误信息描述
- (void)deleteLibraryVideoWithVideoIds:(NSArray<NSNumber *> * _Nonnull)videoIds comple:(void (^ _Nonnull)(NSInteger, A4xObjcLibraryDeleteModel * _Nonnull, NSString * _Nonnull))comple;
- (void)getHasResourcesTimesWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss tags:(NSArray<NSString *> * _Nonnull)tags deviceIDs:(NSArray<NSString *> * _Nonnull)deviceIDs result:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcLibaryDateState *> * _Nonnull))result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum A4xDeviceUpdateStatus : NSInteger;
@class A4xObjcDeviceUpdateProgressInfoModel;

SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseObjcOtaInterface")
@interface A4xBaseObjcOtaInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseObjcOtaInterface * _Nonnull shared;)
+ (A4xBaseObjcOtaInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 根据devicemodel判断设备是否处于更新状态
/// yes:更新中 no:没有正在更新
- (BOOL)isFirmwareUpdatingWithObjcDeviceModel:(A4xObjcDeviceModel * _Nonnull)objcDeviceModel SWIFT_WARN_UNUSED_RESULT;
/// 根据devicemodel判断设备是否需要更新
/// yes:需要更新 no:不需要更新
- (BOOL)isFirmwareNeedUpdateWithObjcDeviceModel:(A4xObjcDeviceModel * _Nonnull)objcDeviceModel SWIFT_WARN_UNUSED_RESULT;
/// 根据devicemodel获取设备更新状态
/// A4xDeviceUpdateStatus:更新状态
- (enum A4xDeviceUpdateStatus)getDeviceUpdateStatusWithObjcDeviceModel:(A4xObjcDeviceModel * _Nonnull)objcDeviceModel SWIFT_WARN_UNUSED_RESULT;
- (void)startOTAUpdateWithDeviceID:(NSString * _Nonnull)deviceID resultBlock:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceUpdateProgressInfoModel * _Nullable))resultBlock;
- (void)fetchOTAUpdateProgressWithDeviceID:(NSString * _Nonnull)deviceID resultBlock:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceUpdateProgressInfoModel * _Nullable))resultBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xDeviceUpdateStatus, closed) {
  A4xDeviceUpdateStatusNoUpdate = 0,
/// 不需要升级,默认状态
  A4xDeviceUpdateStatusNeedUpdate = 1,
/// 需要升级
  A4xDeviceUpdateStatusUpdating = 2,
/// 正在升级中
  A4xDeviceUpdateStatusForceUpdate = 3,
};


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xBasePageControlView")
@interface A4xBasePageControlView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

@interface A4xBasePageControlView (SWIFT_EXTENSION(A4xBaseSDK)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end

@class PHChange;

SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBasePhotoManager")
@interface A4xBasePhotoManager : NSObject <PHPhotoLibraryChangeObserver>
/// This callback is invoked on an arbitrary serial queue. If you need this to be handled on a specific queue, you should redispatch appropriately
/// \param changeInstance 
///
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInstance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xBasePopMenuView")
@interface A4xBasePopMenuView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface A4xBasePopMenuView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


@interface A4xBasePopMenuView (SWIFT_EXTENSION(A4xBaseSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseScrollView")
@interface A4xBaseScrollView : UIScrollView
@property (nonatomic) CGRect frame;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK28A4xBaseSystemUpdateAlertView")
@interface A4xBaseSystemUpdateAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseTextField")
@interface A4xBaseTextField : UITextField
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable placeholder;
@end

@class NSCachedURLResponse;
@class NSDate;
@class NSURL;

SWIFT_CLASS("_TtC10A4xBaseSDK15A4xBaseURLCache")
@interface A4xBaseURLCache : NSURLCache
- (NSCachedURLResponse * _Nullable)cachedResponseForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// @method storeCachedResponse:forRequest:
/// @abstract Stores the given NSCachedURLResponse in the cache using
/// the given request.
/// @param cachedResponse The cached response to store.
/// @param request the NSURLRequest to use as a key for the storage.
- (void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forRequest:(NSURLRequest * _Nonnull)request;
/// @method removeCachedResponseForRequest:
/// @abstract Removes the NSCachedURLResponse from the cache that is
/// stored using the given request.
/// @discussion No action is taken if there is no NSCachedURLResponse
/// stored with the given request.
/// @param request the NSURLRequest to use as a key for the lookup.
- (void)removeCachedResponseForRequest:(NSURLRequest * _Nonnull)request;
/// @method removeAllCachedResponses
/// @abstract Clears the given cache, removing all NSCachedURLResponse
/// objects that it stores.
- (void)removeAllCachedResponses;
/// @method removeCachedResponsesSince:
/// @abstract Clears the given cache of any cached responses since the provided date.
- (void)removeCachedResponsesSinceDate:(NSDate * _Nonnull)date SWIFT_AVAILABILITY(ios,introduced=8.0);
- (nonnull instancetype)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString * _Nullable)path OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=2.0,deprecated=100000);
- (nonnull instancetype)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity directoryURL:(NSURL * _Nullable)directoryURL OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=13.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextRange;
@class NSTextContainer;
@class NSTextAttachment;

SWIFT_CLASS("_TtC10A4xBaseSDK18A4xBaseURLTextView")
@interface A4xBaseURLTextView : UITextView <UITextViewDelegate>
@property (nonatomic, strong) UIColor * _Nullable textColor;
@property (nonatomic, strong) UITextRange * _Nullable selectedTextRange;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (BOOL)canPerformAction:(SEL _Nonnull)action withSender:(id _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseUserVipInterface")
@interface A4xBaseUserVipInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseUserVipInterface * _Nonnull shared;)
+ (A4xBaseUserVipInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseViewController")
@interface A4xBaseViewController : UIViewController <UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (void)didReceiveMemoryWarning;
@end



SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseWifiIotManager")
@interface A4xBaseWifiIotManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseWifiIotModel")
@interface A4xBaseWifiIotModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBindDeviceResult")
@interface A4xBindDeviceResult : NSObject
@property (nonatomic, copy) NSString * _Nonnull opretionId;
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
@property (nonatomic) NSInteger deviceBindStep;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBluetoothModel")
@interface A4xBluetoothModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 设备语言类型枚举
/// <hr/>
/// chinese    汉语
/// english    英语
/// japanese   日语
/// german     德语
/// french     法语
/// russian    俄语
/// italian    意大利语
/// spanish    西班牙语
/// finnish    芬兰语
typedef SWIFT_ENUM(NSInteger, A4xDeviceLanguageType, closed) {
  A4xDeviceLanguageTypeChinese = 0,
  A4xDeviceLanguageTypeEnglish = 1,
  A4xDeviceLanguageTypeJapanese = 2,
  A4xDeviceLanguageTypeGerman = 3,
  A4xDeviceLanguageTypeFrench = 4,
  A4xDeviceLanguageTypeRussian = 5,
  A4xDeviceLanguageTypeItalian = 6,
  A4xDeviceLanguageTypeSpanish = 7,
  A4xDeviceLanguageTypeFinnish = 8,
};


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xDeviceSleepModel")
@interface A4xDeviceSleepModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xGradientLayer")
@interface A4xGradientLayer : CAGradientLayer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Base class for providing object-based access to SQLite tables. Simply define the properties and their default values (a value has to be there in order to determine value type) and SQLTable will handle the basic CRUD (creating, reading, updating, deleting) actions for you without any additional code.
SWIFT_CLASS("_TtC10A4xBaseSDK8SQLTable")
@interface SQLTable : NSObject
/// Every SQLTable sub-class will contain an <code>isDeleted</code> flag. Instead of deleting records, you should set the flag to <code>true</code> for deletions and filter your data accordingly when fetching data from <code>SQLTable</code>. This flag will be used to synchronize deletions via CloudKit
@property (nonatomic) BOOL isDeleted;
/// Every SQLTable sub-class will contain a <code>created</code> property indicating the creation date of the record.
@property (nonatomic, copy) NSDate * _Nonnull created;
/// Every SQLTable sub-class will contain a <code>modified</code> property indicating the last modification date of the record.
@property (nonatomic, copy) NSDate * _Nonnull modified;
/// Base initialization which sets up the table name and then verifies that the table exists in the DB, and if it does not, creates it.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xLocationSQLModel")
@interface A4xLocationSQLModel : SQLTable
@property (nonatomic) NSInteger id;
@property (nonatomic) NSInteger pid;
@property (nonatomic) NSInteger hot;
@property (nonatomic, copy) NSString * _Nullable path;
@property (nonatomic) NSInteger level;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable name_pinyin;
@property (nonatomic, copy) NSString * _Nullable name_en;
@property (nonatomic, copy) NSString * _Nullable code;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)dbName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)imageName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xMJRefreshHeader")
@interface A4xMJRefreshHeader : MJRefreshHeader
@property (nonatomic) CGFloat pullingPercent;
- (void)placeSubviews;
- (void)prepare;
@property (nonatomic) MJRefreshState state;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// SDK环境
typedef SWIFT_ENUM(NSInteger, A4xNodeType, closed) {
/// prod us
  A4xNodeTypePROD_NODE_US = 0,
/// prod eu
  A4xNodeTypePROD_NODE_EU = 1,
/// prod cn
  A4xNodeTypePROD_NODE_CN = 2,
/// staging us
  A4xNodeTypeSTAGE_NODE_US = 3,
/// staging eu
  A4xNodeTypeSTAGE_NODE_EU = 4,
/// staging cn
  A4xNodeTypeSTAGE_NODE_CN = 5,
/// default
  A4xNodeTypeNODE_DEFAULT = 6,
};


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xOTAEventModel")
@interface A4xOTAEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcAccountlinkedplatModel")
@interface A4xObjcAccountlinkedplatModel : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable list;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK27A4xObjcAlexaDeviceListModel")
@interface A4xObjcAlexaDeviceListModel : NSObject
/// Alexa设备列表
@property (nonatomic, copy) NSArray<A4xObjcDeviceModel *> * _Nullable alexaDeviceList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcPlatformDisplayControlModel;

SWIFT_CLASS("_TtC10A4xBaseSDK23A4xObjcAmazonAlexaModel")
@interface A4xObjcAmazonAlexaModel : NSObject
/// 平台的所有支持的设备
@property (nonatomic, strong) A4xObjcAlexaDeviceListModel * _Nullable platformLinkedDevicesMap;
/// 不支持的设备
@property (nonatomic, strong) A4xObjcAlexaDeviceListModel * _Nullable firmwareNotSupportDeviceInfoMap;
@property (nonatomic, copy) NSArray<A4xObjcPlatformDisplayControlModel *> * _Nullable platformDisplayControl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xObjcCoolDownModel")
@interface A4xObjcCoolDownModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK33A4xObjcDeviceBindQRCodeImageModel")
@interface A4xObjcDeviceBindQRCodeImageModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull operationId;
@property (nonatomic, copy) NSString * _Nonnull image;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK25A4xObjcDeviceControlModel")
@interface A4xObjcDeviceControlModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull modelName;
@property (nonatomic) BOOL canRotate;
@property (nonatomic) BOOL canStandby;
@property (nonatomic, copy) NSString * _Nonnull streamProtocol;
@property (nonatomic, copy) NSString * _Nonnull audioCodecType;
@property (nonatomic) BOOL whiteLight;
@property (nonatomic) BOOL devicePersonDetect;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xObjcDeviceListFilter, closed) {
  A4xObjcDeviceListFilterAll = 0,
  A4xObjcDeviceListFilterShare = 1,
  A4xObjcDeviceListFilterLocation = 2,
};

@class A4xObjcPresetModel;
@class A4xObjcSDCardModel;
@class A4xObjcDeviceSupport;

SWIFT_CLASS("_TtC10A4xBaseSDK18A4xObjcDeviceModel")
@interface A4xObjcDeviceModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull deviceId;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull liveUrl;
@property (nonatomic, copy) NSString * _Nonnull modelNo;
@property (nonatomic, copy) NSString * _Nonnull displayModelNo;
@property (nonatomic, copy) NSString * _Nonnull serialNo;
@property (nonatomic, copy) NSString * _Nonnull macAddress;
@property (nonatomic) NSInteger userCount;
@property (nonatomic) NSInteger batter;
@property (nonatomic) NSInteger admin;
@property (nonatomic) NSInteger awake;
@property (nonatomic) NSInteger wifiLevel;
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nonnull locationName;
@property (nonatomic) int64_t adminId;
@property (nonatomic) int64_t userId;
@property (nonatomic) NSInteger online;
@property (nonatomic) NSInteger deviceStatus;
@property (nonatomic) NSInteger dormancyPlanSwitch;
@property (nonatomic, copy) NSString * _Nonnull deviceDormancyMessage;
@property (nonatomic) NSInteger sleepPlan;
@property (nonatomic, copy) NSString * _Nonnull networkName;
@property (nonatomic) NSInteger devicePersonDetect;
@property (nonatomic) NSInteger mirrorFlip;
@property (nonatomic) NSInteger needVideo;
@property (nonatomic) NSInteger videoSeconds;
@property (nonatomic) NSInteger needAlarm;
@property (nonatomic) NSInteger alarmSeconds;
@property (nonatomic) NSInteger needNightVision;
@property (nonatomic) NSInteger nightVisionSensitivity;
@property (nonatomic) NSInteger nightThresholdLevel;
@property (nonatomic) NSInteger whiteLightScintillation;
@property (nonatomic) NSInteger nightVisionMode;
@property (nonatomic, copy) NSString * _Nonnull mcu;
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic, copy) NSString * _Nonnull adminName;
@property (nonatomic, copy) NSString * _Nonnull adminEmail;
@property (nonatomic, copy) NSString * _Nonnull adminPhone;
@property (nonatomic) double activatedTime;
@property (nonatomic) NSInteger activated;
@property (nonatomic) NSInteger role;
@property (nonatomic) NSInteger statusCode;
@property (nonatomic) NSInteger upgradeStatus;
@property (nonatomic) BOOL needForceUpdate;
@property (nonatomic) float upgradeProgress;
@property (nonatomic, copy) NSString * _Nonnull userSn;
@property (nonatomic) NSInteger charging;
@property (nonatomic, copy) NSString * _Nonnull newFirmwareId;
@property (nonatomic, copy) NSString * _Nonnull deviceLanguage;
@property (nonatomic, copy) NSString * _Nonnull timeZone;
@property (nonatomic, copy) NSString * _Nonnull video_sharp;
@property (nonatomic, copy) NSArray<A4xObjcPresetModel *> * _Nonnull presetLocations;
@property (nonatomic) NSInteger wifiChannel;
@property (nonatomic, copy) NSString * _Nonnull ip;
@property (nonatomic, copy) NSString * _Nonnull resolution;
@property (nonatomic) BOOL pushIgnored;
@property (nonatomic, strong) A4xObjcSDCardModel * _Nullable sdCard;
@property (nonatomic, strong) A4xObjcDeviceControlModel * _Nullable deviceContrl;
@property (nonatomic) NSInteger packagePush;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull deviceSupportLanguage;
@property (nonatomic) BOOL antiflickerSupport;
@property (nonatomic) NSInteger antiflickerSwitch;
@property (nonatomic) NSInteger antiflicker;
@property (nonatomic) NSInteger recLamp;
@property (nonatomic) NSInteger voiceVolumeSwitch;
@property (nonatomic) NSInteger voiceVolume;
@property (nonatomic) NSInteger alarmVolume;
@property (nonatomic) NSInteger needMotion;
@property (nonatomic) NSInteger motionSensitivity;
@property (nonatomic) NSInteger personDetect;
@property (nonatomic) NSInteger motionTrack;
@property (nonatomic) NSInteger motionTrackMode;
@property (nonatomic) NSInteger cryDetect;
@property (nonatomic) NSInteger cryDetectLevel;
@property (nonatomic, strong) A4xObjcDeviceSupport * _Nullable deviceSupport;
@property (nonatomic, copy) NSString * _Nonnull deviceIconUrl;
@property (nonatomic, copy) NSString * _Nonnull deviceSmailUrl;
@property (nonatomic, copy) NSString * _Nonnull displayGitSha;
@property (nonatomic) BOOL quantityCharge;
@property (nonatomic) BOOL showCodecChange;
@property (nonatomic) BOOL codecSupported;
@property (nonatomic, copy) NSString * _Nonnull defaultCodec;
@property (nonatomic, copy) NSString * _Nonnull codec;
@property (nonatomic) BOOL firmwareSupported;
/// 当前设备是否是Vip 0:不是 1:是
@property (nonatomic) NSInteger deviceVipLevel;
@property (nonatomic, strong) A4xObjcCoolDownModel * _Nullable cooldown;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xObjcDeviceShareModel")
@interface A4xObjcDeviceShareModel : NSObject
/// 分享操作主要的ID
@property (nonatomic) int64_t mainId;
/// 管理员ID
@property (nonatomic) int64_t adminId;
/// 分享目标ID
@property (nonatomic) int64_t targetId;
/// 分享目标名称
@property (nonatomic, copy) NSString * _Nonnull targetName;
/// 分享目标邮箱
@property (nonatomic, copy) NSString * _Nonnull targetEmail;
/// 分享目标手机号
@property (nonatomic, copy) NSString * _Nonnull targetPhone;
/// 设备ID
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
/// 设备名称
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// 分享角色ID （固定2，代表普通用户）
@property (nonatomic) int64_t roleId;
/// 分享角色 （暂时固定0）
@property (nonatomic) int64_t role;
/// 角色权限文本（暂时固定 “Live feed,playback video cli”）
@property (nonatomic, copy) NSString * _Nonnull roleText;
/// 分享ID
@property (nonatomic, copy) NSString * _Nonnull shareId;
/// 管理员名称
@property (nonatomic, copy) NSString * _Nonnull adminName;
/// 管理员名称
@property (nonatomic, copy) NSString * _Nonnull adminEmail;
/// 分享过期时间戳
@property (nonatomic) NSInteger expireTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xObjcDeviceSupport")
@interface A4xObjcDeviceSupport : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull deviceSupportResolution;
@property (nonatomic) BOOL deviceSupportAlarm;
@property (nonatomic) BOOL deviceSupportMirrorFlip;
@property (nonatomic) NSInteger supportRecLamp;
@property (nonatomic) NSInteger supportVoiceVolume;
@property (nonatomic) NSInteger supportAlarmVolume;
@property (nonatomic) NSInteger supportWebrtc;
@property (nonatomic) NSInteger supportCryDetect;
@property (nonatomic) BOOL killKeepAlive;
@property (nonatomic) NSInteger deviceDormancySupport;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK36A4xObjcDeviceUpdateProgressInfoModel")
@interface A4xObjcDeviceUpdateProgressInfoModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
@property (nonatomic, copy) NSString * _Nonnull targetFirmware;
@property (nonatomic) NSInteger inProgress;
@property (nonatomic) NSInteger transferredSize;
@property (nonatomic) int64_t totalSize;
/// 0 无状态 > 0 更新完成 < 0 负值更新失败
@property (nonatomic) NSInteger status;
@property (nonatomic) NSInteger timeout;
@property (nonatomic) NSInteger otaStatus;
@property (nonatomic) int64_t otaStartTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xObjcLibaryDateState")
@interface A4xObjcLibaryDateState : NSObject
@property (nonatomic) NSInteger dateTimestamp;
@property (nonatomic) NSInteger count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK25A4xObjcLibraryDeleteModel")
@interface A4xObjcLibraryDeleteModel : NSObject
@property (nonatomic) NSInteger removed;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull failed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcLibraryVideoTagsModel;

SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcLibraryEventVideoModel")
@interface A4xObjcLibraryEventVideoModel : NSObject
@property (nonatomic) NSInteger videoEvent;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic) NSTimeInterval endTime;
@property (nonatomic) float period;
@property (nonatomic, copy) NSString * _Nonnull deviceName;
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
@property (nonatomic, copy) NSString * _Nonnull videoUrls;
@property (nonatomic, strong) A4xObjcLibraryVideoTagsModel * _Nullable tags;
@property (nonatomic) NSInteger libraryCount;
@property (nonatomic) NSInteger type;
@property (nonatomic) NSInteger missing;
@property (nonatomic) NSInteger marked;
@property (nonatomic, copy) NSString * _Nonnull libraryIds;
@property (nonatomic) BOOL manager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK30A4xObjcLibraryNormalVideoModel")
@interface A4xObjcLibraryNormalVideoModel : NSObject
@property (nonatomic) NSInteger resourceId;
@property (nonatomic) NSInteger missing;
@property (nonatomic) NSInteger mark;
@property (nonatomic) NSInteger type;
@property (nonatomic) NSInteger from;
@property (nonatomic) NSTimeInterval time;
@property (nonatomic, copy) NSString * _Nonnull cName;
@property (nonatomic, copy) NSString * _Nonnull cID;
@property (nonatomic, copy) NSString * _Nonnull date;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, copy) NSString * _Nonnull tags;
@property (nonatomic) BOOL manager;
@property (nonatomic, copy) NSString * _Nonnull managerName;
@property (nonatomic) float period;
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nonnull locationName;
@property (nonatomic, copy) NSURL * _Nonnull videoURL;
@property (nonatomic) int64_t adminId;
@property (nonatomic, copy) NSString * _Nonnull pushInfo;
@property (nonatomic, copy) NSString * _Nonnull traceId;
@property (nonatomic) NSInteger fileSize;
@property (nonatomic, copy) NSString * _Nonnull eventInfo;
@property (nonatomic, copy) NSString * _Nonnull packageEventInfo;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull eventInfoList;
@property (nonatomic) BOOL adminIsVip;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK28A4xObjcLibraryVideoTagsModel")
@interface A4xObjcLibraryVideoTagsModel : NSObject
@property (nonatomic) NSInteger person;
@property (nonatomic) NSInteger pet;
@property (nonatomic) NSInteger vehicle;
@property (nonatomic) NSInteger package;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 调用sendAlexaAuthResult接口之后,返回的A4xObjcLinkedResultModel下面的user模型信息
SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcLinkedAccountLinkModel")
@interface A4xObjcLinkedAccountLinkModel : NSObject
/// 账号link状态
@property (nonatomic, copy) NSString * _Nullable status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcLinkedSkillModel;
@class A4xObjcLinkedUserModel;

/// 调用sendAlexaAuthResult接口之后,返回的数据模型
SWIFT_CLASS("_TtC10A4xBaseSDK24A4xObjcLinkedResultModel")
@interface A4xObjcLinkedResultModel : NSObject
/// 技能组字典信息
@property (nonatomic, strong) A4xObjcLinkedSkillModel * _Nullable skill;
/// 用户信息
@property (nonatomic, strong) A4xObjcLinkedUserModel * _Nullable user;
/// 账号link状态
@property (nonatomic, strong) A4xObjcLinkedAccountLinkModel * _Nullable accountlink;
/// 状态
@property (nonatomic, copy) NSString * _Nullable status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 调用sendAlexaAuthResult接口之后,返回的A4xObjcLinkedResultModel下面的skill模型信息
SWIFT_CLASS("_TtC10A4xBaseSDK23A4xObjcLinkedSkillModel")
@interface A4xObjcLinkedSkillModel : NSObject
/// 环境 :developer
@property (nonatomic, copy) NSString * _Nullable stage;
/// 技能组id
@property (nonatomic, copy) NSString * _Nullable skillId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 调用sendAlexaAuthResult接口之后,返回的A4xObjcLinkedResultModel下面的user模型信息
SWIFT_CLASS("_TtC10A4xBaseSDK22A4xObjcLinkedUserModel")
@interface A4xObjcLinkedUserModel : NSObject
/// 用户id
@property (nonatomic, copy) NSString * _Nullable userId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xObjcLocationModel")
@interface A4xObjcLocationModel : NSObject
@property (nonatomic) enum A4xObjcDeviceListFilter filterType;
@property (nonatomic, copy) NSString * _Nonnull identerType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK15A4xObjcOtaModel")
@interface A4xObjcOtaModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK34A4xObjcPlatformDisplayControlModel")
@interface A4xObjcPlatformDisplayControlModel : NSObject
@property (nonatomic, copy) NSString * _Nullable platformKey;
@property (nonatomic) BOOL platformValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xObjcPresetModel")
@interface A4xObjcPresetModel : NSObject
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nonnull coordinate;
@property (nonatomic, copy) NSString * _Nonnull thumbnailUrl;
@property (nonatomic, copy) NSString * _Nonnull rotationPointName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xObjcSDCardModel")
@interface A4xObjcSDCardModel : NSObject
@property (nonatomic) NSInteger formatStatus;
@property (nonatomic) float total;
@property (nonatomic) float used;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK21A4xObjcVideoTimeModel")
@interface A4xObjcVideoTimeModel : NSObject
@property (nonatomic) int64_t start;
@property (nonatomic) int64_t end;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcVideoTimeModelResponse")
@interface A4xObjcVideoTimeModelResponse : NSObject
@property (nonatomic, copy) NSArray<A4xObjcVideoTimeModel *> * _Nullable videoSlices;
@property (nonatomic, strong) A4xObjcVideoTimeModel * _Nullable earliestVideoSlice;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xPayEventModel")
@interface A4xPayEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xPlayVideoEventModel")
@interface A4xPlayVideoEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 区分App还是SDK
typedef SWIFT_ENUM(NSInteger, A4xProjectType, closed) {
  A4xProjectTypeAPP = 0,
  A4xProjectTypeSDK = 1,
};

enum A4xRouterPushType : NSInteger;
enum A4xRouterMoudleType : NSInteger;
enum A4xRouterReasonType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK17A4xRouterBaseType")
@interface A4xRouterBaseType : NSObject
@property (nonatomic) enum A4xRouterPushType pushType;
@property (nonatomic) enum A4xRouterMoudleType moudleType;
@property (nonatomic) enum A4xRouterReasonType funcType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 模块类型
typedef SWIFT_ENUM(NSInteger, A4xRouterMoudleType, closed) {
  A4xRouterMoudleTypeLive = 100,
  A4xRouterMoudleTypeBind = 200,
  A4xRouterMoudleTypeDeviceSetting = 300,
  A4xRouterMoudleTypeOta = 400,
  A4xRouterMoudleTypeLibtary = 500,
  A4xRouterMoudleTypeAlexa = 600,
  A4xRouterMoudleTypeUserAccount = 700,
  A4xRouterMoudleTypeCommon = 800,
  A4xRouterMoudleTypeDefault = 0,
};

typedef SWIFT_ENUM(NSInteger, A4xRouterPushType, closed) {
  A4xRouterPushTypeRouter = 0,
/// 默认走路由机制
  A4xRouterPushTypePush = 1,
/// push
  A4xRouterPushTypePop = 2,
/// pop
  A4xRouterPushTypeDismiss = 3,
};

/// 功能类型
typedef SWIFT_ENUM(NSInteger, A4xRouterReasonType, closed) {
/// 特殊的case
/// 直播页面模块需要,以<code>1**</code>开头
/// 直播页面->设备设置页面
  A4xRouterReasonTypeLivePageToDeviceSetting = 101,
/// 直播页面->相册页面
  A4xRouterReasonTypeLivePageToLibrary = 102,
/// 直播页面->声音设置页面
  A4xRouterReasonTypeLivePageToSoundSetting = 103,
/// 直播页面->固件升级页面
  A4xRouterReasonTypeLivePageToFirmwareUpdatePage = 104,
/// 直播页面->分享页面(这里分情况设备属于自己还是属于被分享者)
  A4xRouterReasonTypeLivePageToSharePage = 105,
/// 直播页面录制已经完成
  A4xRouterReasonTypeLivePageRecordCompleted = 106,
/// 直播页面->运动轨迹页面
  A4xRouterReasonTypeLivePageToMotionTrackingPage = 107,
/// 直播页面->运动检测页面
  A4xRouterReasonTypeLivePageToMotionDetection = 108,
/// 绑定页面模块需要,以<code>2**</code>开头
/// 绑定页面绑定成功
  A4xRouterReasonTypeBindPageBindSuccess = 204,
/// 绑定页面换绑成功
  A4xRouterReasonTypeBindPageChangeWifiSuccess = 205,
/// 绑定页面结束OTA
  A4xRouterReasonTypeBindPageOTAFinish = 206,
/// 绑定页面跳过OTA
  A4xRouterReasonTypeBindPageOTASkip = 207,
/// 绑定页面用户反馈
  A4xRouterReasonTypeBindPageUserFeedback = 208,
/// 绑定页面扫码完成
  A4xRouterReasonTypeBindPageScanQrcodeResultEnd = 209,
/// 绑定页面取消绑定,点击了返回按钮
  A4xRouterReasonTypeBindPageBindCancle = 210,
/// 设备设置页面模块需要,以<code>3**</code>开头
/// 点击了删除设备按钮回调
  A4xRouterReasonTypeDeletingDevice = 301,
/// 从设备设置页面进入ActivityZone页面
  A4xRouterReasonTypeDevicePageToActivityZone = 302,
/// 从设备设置页面进入更多页面
  A4xRouterReasonTypeDevicePageToMorePage = 303,
/// 从设备设置页面进入SD卡回看页面
  A4xRouterReasonTypeDevicePageToSDHistory = 304,
/// 从设备设置页面进入SD卡回看页面
  A4xRouterReasonTypeDevicePageToSharedSDHistory = 305,
/// 设备页面换绑wifi成功
  A4xRouterReasonTypeDevicePageReplaceBindWiFi = 306,
/// 设备页面高级设置按钮点击
  A4xRouterReasonTypeDevicePageInstallButtonClick = 307,
/// 点击分享按钮的回调，用户可以自己给提示框(例如弹出请长按二维码弹窗)
  A4xRouterReasonTypeDevicePageShareButtonClick = 308,
/// 长按二维码回调image对象
  A4xRouterReasonTypeDevicePageQRCodeLongPress = 309,
/// 设备已经被管理员删除
  A4xRouterReasonTypeDeviceHasBeenDeleted = 310,
/// 从设备设置页面返回到主页
  A4xRouterReasonTypeDevicePageReturnToHomePage = 311,
/// 设备页面进入去购买页面
  A4xRouterReasonTypeDevicePageToGoBuy = 312,
/// 设备声音页面退出,需要刷新直播的声音按钮UI
  A4xRouterReasonTypeDeviceSoundPageReturn = 313,
/// 调用showReceivedBindSharedDeviceAlert接口,各个按钮回调
  A4xRouterReasonTypeDeviceShareCompleted = 314,
/// 扫码添加好友设备完成的回调
  A4xRouterReasonTypeDeviceShareScanQrcodeRequest = 315,
/// 回到主页,默认情况
  A4xRouterReasonTypeDefault = 0,
};

/// SDK初始化错误码
typedef SWIFT_ENUM(NSInteger, A4xSDKInitErrorType, closed) {
/// 成功
  A4xSDKInitErrorTypeSuccess = 0,
/// 没有传 AppToken
  A4xSDKInitErrorTypeNoAppToken = 1,
/// 没有传 TenantId
  A4xSDKInitErrorTypeNoTenantId = 2,
/// 没有传 语言
  A4xSDKInitErrorTypeNoLanguage = 3,
/// 没有传 国家
  A4xSDKInitErrorTypeNoCountryNo = 4,
/// 没有传 选择网络节点
  A4xSDKInitErrorTypeNoNodeType = 5,
/// 获取用户信息失败
  A4xSDKInitErrorTypeGetInfoFailed = 6,
};







/// Simple wrapper class to provide basic SQLite database access as a non-singleton
SWIFT_CLASS_NAMED("SQLiteBase")
@interface SQLiteBase : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Output the current SQLite database path
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Simple wrapper class to provide basic SQLite database access.
SWIFT_CLASS_NAMED("SQLiteDB")
@interface SQLiteDB : SQLiteBase
/// Output the current SQLite database path
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end











@interface UIImageView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end







@interface UIScrollView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end











@interface UIView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)my_layoutSubviews;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef A4XBASESDK_SWIFT_H
#define A4XBASESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import MJRefresh;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="A4xBaseSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xAddCameraEventModel")
@interface A4xAddCameraEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xAlbumsEventModel")
@interface A4xAlbumsEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSURLRequest;

SWIFT_CLASS("_TtC10A4xBaseSDK25A4xAlexaRedirectRequester")
@interface A4xAlexaRedirectRequester : NSObject <NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol A4xAppRouterDelegate;

SWIFT_CLASS("_TtC10A4xBaseSDK12A4xAppRouter")
@interface A4xAppRouter : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xAppRouter * _Nonnull router;)
+ (A4xAppRouter * _Nonnull)router SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <A4xAppRouterDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class A4xRouterBaseType;
@class NSString;

SWIFT_PROTOCOL("_TtP10A4xBaseSDK20A4xAppRouterDelegate_")
@protocol A4xAppRouterDelegate
/// VC跳转回调完成的代理
/// @param routerType    : 基本路由类型,包含push类型,模块类型和原因
/// @param fromClassName : 从哪个控制器过来的
/// @param params        : 回调的参数,包括deviceId等其他参数
- (void)a4xAppRouterCompletedWithRouterType:(A4xRouterBaseType * _Nonnull)routerType fromClassName:(NSString * _Nonnull)fromClassName :(NSDictionary<NSString *, id> * _Nullable)params;
@end


SWIFT_PROTOCOL("_TtP10A4xBaseSDK28A4xAppSettingManagerProtocol_")
@protocol A4xAppSettingManagerProtocol
- (void)changeOrientationWithOrientation:(UIInterfaceOrientationMask)orientation;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xBaseAccountCenterInterface")
@interface A4xBaseAccountCenterInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseAccountCenterInterface * _Nonnull shared;)
+ (A4xBaseAccountCenterInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC10A4xBaseSDK22A4xBaseActionsheetView")
@interface A4xBaseActionsheetView : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (void)viewWillLayoutSubviews;
- (void)loadView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class UITableView;
@class NSNumber;
@class NSIndexPath;
@class UITableViewCell;

@interface A4xBaseActionsheetView (SWIFT_EXTENSION(A4xBaseSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class UIPickerView;
@class UIView;

@interface A4xBaseActionsheetView (SWIFT_EXTENSION(A4xBaseSDK)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView rowHeightForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView widthForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end

@class CLLocationManager;
@class CLLocation;

SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseAddressViewModel")
@interface A4xBaseAddressViewModel : NSObject <CLLocationManagerDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseAlertView")
@interface A4xBaseAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC10A4xBaseSDK26A4xBaseAlertViewController")
@interface A4xBaseAlertViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)loadView;
@end


@class A4xObjcLinkedResultModel;

SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseAlexaInterface")
@interface A4xBaseAlexaInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseAlexaInterface * _Nonnull shared;)
+ (A4xBaseAlexaInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 从Alexa App授权完成后,跳转到自己的App需要调用的授权方法
/// <hr/>
/// @param alexaUrlStr : 通过AppDelegate如下方法拿到的 url.absoluteString
/// <hr/>
/// func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool
/// <hr/>
/// @return isCompleted : 是否完成授权 false:授权失败 true:授权完成,返回url字符串
/// @return urlString   : 授权完成的字符串,实现以下方法跳转到Alexa来确认是否授权
/// <hr/>
/// DispatchQueue.main.async {
/// if UIApplication.shared.canOpenURL(url) {
/// UIApplication.shared.open(url, options: [:], completionHandler: nil)
/// }
/// }
/// <hr/>
- (void)alexaAuthWithAlexaUrlStr:(NSString * _Nonnull)alexaUrlStr comple:(void (^ _Nonnull)(BOOL, NSString * _Nonnull))comple;
/// 主动从自己App跳转到AlexaApp授权的方法
/// completionHandler: 结果回调 true:授权成功 false:失败
- (void)toAlexaGrantAuthorizationWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nonnull, BOOL))completionHandler;
/// 发送Alexa App 授权结果的方法,通知后端
/// 从自己的 App 跳转到Alexa App并且授权之后,返回自己App需要调用通知后端授权完成的方法
/// <hr/>
/// @param alexaUrlStr : 通过AppDelegate如下方法拿到的 url.absoluteString
/// <hr/>
/// func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool
/// <hr/>
/// @return isCompleted : 是否完成授权 false:授权失败 true:授权完成,返回url字符串
/// @return urlString   : 授权完成的字符串,实现以下方法跳转到Alexa来确认是否授权
- (void)sendAlexaAuthResultWithAlexaUrlStr:(NSString * _Nonnull)alexaUrlStr comple:(void (^ _Nonnull)(BOOL, A4xObjcLinkedResultModel * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK27A4xBaseAuthorztionAlertView")
@interface A4xBaseAuthorztionAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xBaseBatteryView")
@interface A4xBaseBatteryView : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xBaseBindInterface")
@interface A4xBaseBindInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseBindInterface * _Nonnull shared;)
+ (A4xBaseBindInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)getBindCodeWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseBluetoothManager")
@interface A4xBaseBluetoothManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

@interface A4xBaseBluetoothManager (SWIFT_EXTENSION(A4xBaseSDK)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 从感兴趣的服务中，确认 我们所发现感兴趣的特征
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@class CBCentralManager;

@interface A4xBaseBluetoothManager (SWIFT_EXTENSION(A4xBaseSDK)) <CBCentralManagerDelegate>
- (void)centralManager:(CBCentralManager * _Nonnull)central willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (void)centralManager:(CBCentralManager * _Nonnull)central connectionEventDidOccur:(CBConnectionEvent)event forPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
/// 连接设备失败
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/// 断开连接
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheralDidUpdateName:(CBPeripheral * _Nonnull)peripheral;
- (void)peripheralDidUpdateRSSI:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK15A4xBaseCardView")
@interface A4xBaseCardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

@class UIEvent;

SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseCheckBoxButton")
@interface A4xBaseCheckBoxButton : UIButton
@property (nonatomic, getter=isSelected) BOOL selected;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIColor;

SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseCircleView")
@interface A4xBaseCircleView : UIView
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

enum A4xNodeType : NSInteger;
enum A4xProjectType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK13A4xBaseConfig")
@interface A4xBaseConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseConfig * _Nonnull shared;)
+ (A4xBaseConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Application’s App Key found on A4xBaseSDK Server’s “Management > Applications” section.
/// @discussion Using API Key or App ID will not work.
/// @discussion App key needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull appKey;
/// SDK环境(A4xNodeType)
@property (nonatomic) enum A4xNodeType nodeType;
/// 是否开启A4xSDK日志打印功能
/// 默认 0: 不开启日志打印功能
/// 1: 开启日志打印功能
@property (nonatomic) NSInteger enableDebug;
/// 租户Id,必传
@property (nonatomic, copy) NSString * _Nonnull tenantId;
/// A4xBaseSDK Server’s appToken without the slash at the end.
/// @discussion e.g. @c https://example.com
/// @discussion Host needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull appToken;
/// For enabling SDK language.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull language;
/// For enabling SDK userId.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// For enabling SDK endPoint.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull endPoint;
/// For enabling SDK phone.
/// @discussion needs to be a non-zero length string, otherwise an exception is thrown.
@property (nonatomic, copy) NSString * _Nonnull phone;
/// ISO country code can be specified in ISO 3166-1 alpha-2 format to be used for geo-location based push notifications and advanced segmentation.
/// @discussion By default, A4xBaseSDK Server uses a geo-ip database for acquiring user’s location. If the app has information about user’s country, it can be provided using this property.
/// @discussion It will be sent with @c begin_session requests only.
@property (nonatomic, copy) NSString * _Nonnull countryNo;
/// For specifying which features A4xBaseSDK will start with.
/// @discussion Available features for each platform:
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull features;
/// 初始化SDK参数
/// vicoHome调用时需设置为AppResource
/// -Parater SDK : 从Sdk Bundle里面读取图片和本地化语言文案,同时是Sdk类型接入
/// -Parater APP : 从App Assets里面读取图片,从App内部读取本地化语言文案,同时是App类型接入
/// note:
/// 主项目设置为.APP即可,客户调用时走默认参数即可,默认从SDK Bundle中读取资源
@property (nonatomic) enum A4xProjectType projectType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseCustomSwitch")
@interface A4xBaseCustomSwitch : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseDatePickerView")
@interface A4xBaseDatePickerView : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (void)viewWillLayoutSubviews;
- (void)loadView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface A4xBaseDatePickerView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)cancleButtonAction;
- (void)doneButtonAction;
- (void)outSiteAction;
@end


@class NSAttributedString;

@interface A4xBaseDatePickerView (SWIFT_EXTENSION(A4xBaseSDK)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (NSAttributedString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView attributedTitleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView rowHeightForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xBaseDeviceSettingInterface")
@interface A4xBaseDeviceSettingInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseDeviceSettingInterface * _Nonnull shared;)
+ (A4xBaseDeviceSettingInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK26A4xBaseDeviceUpdateManager")
@interface A4xBaseDeviceUpdateManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC10A4xBaseSDK28A4xBaseDeviceUpdateViewModel")
@interface A4xBaseDeviceUpdateViewModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK30A4xBaseDeviceUpgradeSimpleView")
@interface A4xBaseDeviceUpgradeSimpleView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseEventModel")
@interface A4xBaseEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseFormatTool")
@interface A4xBaseFormatTool : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseFormatTool * _Nonnull shared;)
+ (A4xBaseFormatTool * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







@class UIImageView;

SWIFT_PROTOCOL("_TtP10A4xBaseSDK22A4xBaseGifToolDelegate_")
@protocol A4xBaseGifToolDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK15A4xBaseGridView")
@interface A4xBaseGridView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK28A4xBaseGuestRequestAlertView")
@interface A4xBaseGuestRequestAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseImageCard")
@interface A4xBaseImageCard : A4xBaseCardView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xBaseImageTextButton")
@interface A4xBaseImageTextButton : UIControl
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class A4xObjcDeviceBindQRCodeImageModel;
@class A4xObjcDeviceModel;
@class A4xObjcLibraryNormalVideoModel;
@class A4xObjcLibraryEventVideoModel;
@class A4xObjcLibraryDeleteModel;
@class UIImage;
@class A4xObjcDeviceShareModel;

SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseInterface")
@interface A4xBaseInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseInterface * _Nonnull shared;)
+ (A4xBaseInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nullable themeColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
- (void)getBindCodeWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSString * _Nonnull))comple;
- (void)getQrCodeValueWithBindCode:(NSString * _Nonnull)bindCode wifiName:(NSString * _Nonnull)wifiName wifiPwd:(NSString * _Nonnull)wifiPwd isOldStyle:(BOOL)isOldStyle comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceBindQRCodeImageModel * _Nullable))comple;
- (void)getDeviceBindResultWithOperationIdArr:(NSArray<NSString *> * _Nonnull)operationIdArr comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceBindQRCodeImageModel * _Nullable))comple;
- (void)getDeviceListWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcDeviceModel *> * _Nullable))comple;
- (void)getDeviceInfoBy:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
- (void)getDeviceConfigBy:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
- (void)removeDeviceBy:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新推送接口
/// @param token     : 推送token
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)updatePushTokenWithToken:(NSString * _Nonnull)token comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 退出登录接口
- (void)loginOutRemoteWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 获取普通视频列表
/// 查询某些deviceIds对应的视频,也可以是单个
/// @param start     : 开始时间时间戳 例如:1630598400.0
/// @param end       : 结束时间时间戳 例如:1630684800.0
/// @param miss      : 是否已读 0:获取全部(包括已读未读) 1:获取未读
/// @param mark      : 是否标记 0:获取全部 1:未标记
/// @param deviceIds : 所有需要查询的设备id数组
/// @param page      : 页码
/// @param pageSize  : 对应的每页获取的个数
/// @param tags      : [“person”,“vehicle”,“pet”,“package_drop_off”,“package_pick_up”,“package_exist”,“vehicle_enter”,“vehicle_out”,“vehicle_held_up”]
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 返回结果[A4xObjcLibraryVideoModel]数组
/// @return message  : 返回结果描述
- (void)getLibraryVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryNormalVideoModel *> * _Nonnull, NSString * _Nullable))comple;
/// 获取视频事件列表
/// 查询某些deviceIds对应的视频,也可以是单个
/// @param start     : 开始时间时间戳 例如:1630598400.0
/// @param end       : 结束时间时间戳 例如:1630684800.0
/// @param miss      : 是否已读 0:获取全部(包括已读未读) 1:获取未读
/// @param mark      : 是否标记 0:获取全部 1:未标记
/// @param deviceIds : 所有需要查询的设备id数组
/// @param page      : 页码
/// @param pageSize  : 对应的每页获取的个数
/// @param tags      : [“person”,“vehicle”,“pet”,“package_drop_off”,“package_pick_up”,“package_exist”,“vehicle_enter”,“vehicle_out”,“vehicle_held_up”]
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 返回结果[A4xObjcLibraryEventVideoModel]数组
/// @return message  : 返回结果描述
- (void)getLibraryEventVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryEventVideoModel *> * _Nonnull, NSString * _Nullable))comple;
/// 根据录像ids数组删除某些相册视频,可以是单个
/// @param videoIds  : 视频id数组
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 没有删除掉的数据结果
/// @return message  : 错误信息描述
- (void)deleteLibraryVideoWithVideoIds:(NSArray<NSNumber *> * _Nonnull)videoIds comple:(void (^ _Nonnull)(NSInteger, A4xObjcLibraryDeleteModel * _Nonnull, NSString * _Nonnull))comple;
/// 根据录像id标记某个相册视频是否已读
/// @param videoId : 视频id
/// @param enable  : 是否已读 1:未读 0:已读
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)missLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 根据录像id标记某个相册视频是否收藏
/// @param videoId : 视频id
/// @param enable  : 是否收藏 1:收藏 0:未收藏
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)markLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 获取vip信息
- (void)getVipInfo;
/// 获取首页播放图片
- (UIImage * _Nullable)getThumbImageWithDeviceId:(NSString * _Nullable)deviceId SWIFT_WARN_UNUSED_RESULT;
/// 收到添加设备请求后,获取所有分享绑定请求的接口
/// code                      : 错误码 0-成功 其他-失败
/// [A4xObjcDeviceShareModel] : 返回获取到的设备详细信息数组
/// msg                       : 错误信息描述
- (void)getAllRequestBindsWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcDeviceShareModel *> * _Nullable))comple;
/// 接受/拒绝/取消 分享绑定的接口
/// @param shareModel : Objc分享模型
/// @param status : -1拒绝 0接受 -2关闭
- (void)shareHandleWithShareModel:(A4xObjcDeviceShareModel * _Nonnull)shareModel status:(NSInteger)status comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseLibraryInterface")
@interface A4xBaseLibraryInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseLibraryInterface * _Nonnull shared;)
+ (A4xBaseLibraryInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xBaseLiveInterface")
@interface A4xBaseLiveInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseLiveInterface * _Nonnull shared;)
+ (A4xBaseLiveInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xBaseLoadingButton")
@interface A4xBaseLoadingButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol A4xBaseManagerDelegate;
enum A4xSDKInitErrorType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK14A4xBaseManager")
@interface A4xBaseManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseManager * _Nonnull shared;)
+ (A4xBaseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <A4xBaseManagerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSString * _Nonnull a4xVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull a4xDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
/// 初始化SDK
- (void)initA4xSdkWithConfig:(A4xBaseConfig * _Nonnull)config comple:(void (^ _Nonnull)(enum A4xSDKInitErrorType, NSString * _Nonnull))comple SWIFT_METHOD_FAMILY(none);
- (BOOL)checkIsLogin SWIFT_WARN_UNUSED_RESULT;
- (void)loginOut;
- (void)objc_setLanguageWithLanguage:(NSString * _Nonnull)language comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
- (NSString * _Nonnull)getLocalStringWithKey:(NSString * _Nonnull)key param:(NSArray<NSString *> * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSValue *> * _Nonnull)matchStrRange:(NSString * _Nonnull)matchStr SWIFT_WARN_UNUSED_RESULT;
/// 判断是不是Debug环境
/// @return Bool - false:debug true:生产环境
- (BOOL)checkIsDebug SWIFT_WARN_UNUSED_RESULT;
/// 接收到了分享的请求,弹出弹框,内部逻辑已经处理
- (void)showReceivedBindSharedDeviceAlert;
@end


SWIFT_PROTOCOL("_TtP10A4xBaseSDK22A4xBaseManagerDelegate_")
@protocol A4xBaseManagerDelegate
/// 分享页面相关回调
/// guestType   : 点击按钮的类型 -2:关闭 , -1:拒绝 , 0:接受
/// errorCode   : 错误码 0:success other:失败
/// errorMessage: 错误原因
- (void)a4xBaseSDKGuestAlertButtonDidClickedWithGuestType:(NSInteger)guestType errorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseNavBarButton")
@interface A4xBaseNavBarButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK14A4xBaseNavView")
@interface A4xBaseNavView : UIView
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIGestureRecognizer;
@class UITouch;

SWIFT_CLASS("_TtC10A4xBaseSDK26A4xBaseNavgationController")
@interface A4xBaseNavgationController : UINavigationController <UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseNoDataView")
@interface A4xBaseNoDataView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseOTAInterface")
@interface A4xBaseOTAInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseOTAInterface * _Nonnull shared;)
+ (A4xBaseOTAInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum A4xDeviceLanguageType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK33A4xBaseObjcDeviceSettingInterface")
@interface A4xBaseObjcDeviceSettingInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseObjcDeviceSettingInterface * _Nonnull shared;)
+ (A4xBaseObjcDeviceSettingInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 获取所有已经绑定设备的方法
/// note:
/// 使用该方法必须先要初始化A4xBaseSDK成功,才能正常调用,否则会失败
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return models  : 返回获取到的设备详细信息数组
/// @return message : 返回信息描述
- (void)objc_getDeviceListWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcDeviceModel *> * _Nonnull))comple;
/// 获取某个设备详细信息的方法
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return model   : 返回获取到的设备详细信息
/// @return message : 信息描述
- (void)objc_getDeviceSettingInfoWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
/// 获取某个设备详细配置的方法
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return model   : 返回获取到的设备详细配置
/// @return message : 信息描述
- (void)objc_getDeviceSettingConfigWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceModel * _Nullable))comple;
/// 通过deviceId更新某个设备的设备名称
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param deviceName : 需要修改的新设备名称(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_updateDeviceNameWithDeviceId:(NSString * _Nonnull)deviceId deviceName:(NSString * _Nonnull)deviceName comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 通过deviceId删除某个设备
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_removeDeviceWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 设备是否休眠
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param enable     : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_sleepToWakeUPWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 休眠计划开关
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param enable     : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)enableSleepPlanWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 创建休眠计划
/// <hr/>
/// @param deviceId     : 设备Id,唯一标识(必传)
/// @param planStartDay : 计划开始天数组[Int]
/// @param startHour    : 开始小时
/// @param startMinute  : 开始分钟
/// @param endHour      : 结束小时
/// @param endMinute    : 结束分钟
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)createSleepPlanWithDeviceId:(NSString * _Nonnull)deviceId planStartDay:(NSArray<NSNumber *> * _Nonnull)planStartDay startHour:(NSInteger)startHour startMinute:(NSInteger)startMinute endHour:(NSInteger)endHour endMinute:(NSInteger)endMinute comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 编辑休眠计划
/// <hr/>
/// @param period       : period
/// @param deviceId     : 设备Id,唯一标识(必传)
/// @param planStartDay : 计划开始天数组[Int]
/// @param startHour    : 开始小时
/// @param startMinute  : 开始分钟
/// @param endHour      : 结束小时
/// @param endMinute    : 结束分钟
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)editSleepPlanWithPeriod:(NSInteger)period deviceId:(NSString * _Nonnull)deviceId planStartDay:(NSArray<NSNumber *> * _Nonnull)planStartDay startHour:(NSInteger)startHour startMinute:(NSInteger)startMinute endHour:(NSInteger)endHour endMinute:(NSInteger)endMinute comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 删除休眠计划
/// <hr/>
/// @param period       : period
/// @param deviceId     : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)deleteSleepPlanWithPeriod:(NSInteger)period deviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新设备语言
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param language   : 语言类型
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)objc_updateDeviceLanguageWithDeviceId:(NSString * _Nonnull)deviceId language:(enum A4xDeviceLanguageType)language comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 警铃
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
/// @return result   : 返回警铃是否发出
- (void)objc_openAlarmWithDeviceId:(NSString * _Nonnull)deviceId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, BOOL))comple;
/// 更新动态侦测灵敏度
/// note:
/// 更新灵敏度需要enable传true
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否开启 true/false(必传)
/// @param value    : 值 1:high 2:middle 3:low(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_setDetectionMotionWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 开启/关闭/频闪开关 更新频闪灵敏度
/// note:
/// 更新频闪灵敏度需要enable传true
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否开启 true/false(必传)
/// @param value    : 值 50:rate_50hz 60:rate_60hz
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_setFlickerMotionWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 是否打开录像指示灯
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_enableRecLampWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 是否打开扬声器
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param enable     : 是否开启 true/false
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_enableVoiceVolumeSwitchWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新扬声器音量:0到100
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param value      : 音量大小 0-100
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_updateVoiceVolumeWithDeviceId:(NSString * _Nonnull)deviceId value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 更新报警音量:10到100
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param value      : 音量大小 10-100
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_updateAlarmVolumeWithDeviceId:(NSString * _Nonnull)deviceId value:(NSInteger)value comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 视频翻转
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param enable   : 是否翻转
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)objc_setMirrorFlipWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcLibaryDateState;

SWIFT_CLASS("_TtC10A4xBaseSDK27A4xBaseObjcLibraryInterface")
@interface A4xBaseObjcLibraryInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseObjcLibraryInterface * _Nonnull shared;)
+ (A4xBaseObjcLibraryInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)getLibraryNormalVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryNormalVideoModel *> * _Nonnull, NSString * _Nullable))comple;
- (void)getLibraryEventVideoWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss deviceIds:(NSArray<NSString *> * _Nonnull)deviceIds page:(NSInteger)page pageSize:(NSInteger)pageSize tags:(NSArray<NSString *> * _Nonnull)tags comple:(void (^ _Nonnull)(NSInteger, NSArray<A4xObjcLibraryEventVideoModel *> * _Nonnull, NSString * _Nullable))comple;
- (void)getSingleLibraryInfoWithMsgId:(NSInteger)msgId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcLibraryNormalVideoModel * _Nullable))comple;
/// 根据录像id标记某个相册视频是否已读
/// @param videoId : 视频id
/// @param enable  : 是否已读 1:未读 0:已读
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)onReadLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 根据录像id标记某个相册视频是否收藏
/// @param videoId : 视频id
/// @param enable  : 是否收藏 1:收藏 0:未收藏
/// @param userid  : 用户id
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return message  : 错误信息描述
- (void)markLibraryVideoWithVideoId:(NSInteger)videoId enable:(BOOL)enable userid:(NSInteger)userid comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 根据录像ids数组删除某些相册视频,可以是单个
/// @param videoIds  : 视频id数组
/// <hr/>
/// @return code     : 错误码 0:成功 其他:失败
/// @return rusult   : 没有删除掉的数据结果
/// @return message  : 错误信息描述
- (void)deleteLibraryVideoWithVideoIds:(NSArray<NSNumber *> * _Nonnull)videoIds comple:(void (^ _Nonnull)(NSInteger, A4xObjcLibraryDeleteModel * _Nonnull, NSString * _Nonnull))comple;
- (void)getHasResourcesTimesWithStart:(NSTimeInterval)start end:(NSTimeInterval)end mark:(NSInteger)mark miss:(NSInteger)miss tags:(NSArray<NSString *> * _Nonnull)tags deviceIDs:(NSArray<NSString *> * _Nonnull)deviceIDs result:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<A4xObjcLibaryDateState *> * _Nonnull))result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum A4xDeviceUpdateStatus : NSInteger;
@class A4xObjcDeviceUpdateProgressInfoModel;

SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseObjcOtaInterface")
@interface A4xBaseObjcOtaInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseObjcOtaInterface * _Nonnull shared;)
+ (A4xBaseObjcOtaInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 根据devicemodel判断设备是否处于更新状态
/// yes:更新中 no:没有正在更新
- (BOOL)isFirmwareUpdatingWithObjcDeviceModel:(A4xObjcDeviceModel * _Nonnull)objcDeviceModel SWIFT_WARN_UNUSED_RESULT;
/// 根据devicemodel判断设备是否需要更新
/// yes:需要更新 no:不需要更新
- (BOOL)isFirmwareNeedUpdateWithObjcDeviceModel:(A4xObjcDeviceModel * _Nonnull)objcDeviceModel SWIFT_WARN_UNUSED_RESULT;
/// 根据devicemodel获取设备更新状态
/// A4xDeviceUpdateStatus:更新状态
- (enum A4xDeviceUpdateStatus)getDeviceUpdateStatusWithObjcDeviceModel:(A4xObjcDeviceModel * _Nonnull)objcDeviceModel SWIFT_WARN_UNUSED_RESULT;
- (void)startOTAUpdateWithDeviceID:(NSString * _Nonnull)deviceID resultBlock:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceUpdateProgressInfoModel * _Nullable))resultBlock;
- (void)fetchOTAUpdateProgressWithDeviceID:(NSString * _Nonnull)deviceID resultBlock:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xObjcDeviceUpdateProgressInfoModel * _Nullable))resultBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xDeviceUpdateStatus, closed) {
  A4xDeviceUpdateStatusNoUpdate = 0,
/// 不需要升级,默认状态
  A4xDeviceUpdateStatusNeedUpdate = 1,
/// 需要升级
  A4xDeviceUpdateStatusUpdating = 2,
/// 正在升级中
  A4xDeviceUpdateStatusForceUpdate = 3,
};


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xBasePageControlView")
@interface A4xBasePageControlView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

@interface A4xBasePageControlView (SWIFT_EXTENSION(A4xBaseSDK)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end

@class PHChange;

SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBasePhotoManager")
@interface A4xBasePhotoManager : NSObject <PHPhotoLibraryChangeObserver>
/// This callback is invoked on an arbitrary serial queue. If you need this to be handled on a specific queue, you should redispatch appropriately
/// \param changeInstance 
///
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInstance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xBasePopMenuView")
@interface A4xBasePopMenuView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface A4xBasePopMenuView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


@interface A4xBasePopMenuView (SWIFT_EXTENSION(A4xBaseSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBaseScrollView")
@interface A4xBaseScrollView : UIScrollView
@property (nonatomic) CGRect frame;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK28A4xBaseSystemUpdateAlertView")
@interface A4xBaseSystemUpdateAlertView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xBaseTextField")
@interface A4xBaseTextField : UITextField
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable placeholder;
@end

@class NSCachedURLResponse;
@class NSDate;
@class NSURL;

SWIFT_CLASS("_TtC10A4xBaseSDK15A4xBaseURLCache")
@interface A4xBaseURLCache : NSURLCache
- (NSCachedURLResponse * _Nullable)cachedResponseForRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// @method storeCachedResponse:forRequest:
/// @abstract Stores the given NSCachedURLResponse in the cache using
/// the given request.
/// @param cachedResponse The cached response to store.
/// @param request the NSURLRequest to use as a key for the storage.
- (void)storeCachedResponse:(NSCachedURLResponse * _Nonnull)cachedResponse forRequest:(NSURLRequest * _Nonnull)request;
/// @method removeCachedResponseForRequest:
/// @abstract Removes the NSCachedURLResponse from the cache that is
/// stored using the given request.
/// @discussion No action is taken if there is no NSCachedURLResponse
/// stored with the given request.
/// @param request the NSURLRequest to use as a key for the lookup.
- (void)removeCachedResponseForRequest:(NSURLRequest * _Nonnull)request;
/// @method removeAllCachedResponses
/// @abstract Clears the given cache, removing all NSCachedURLResponse
/// objects that it stores.
- (void)removeAllCachedResponses;
/// @method removeCachedResponsesSince:
/// @abstract Clears the given cache of any cached responses since the provided date.
- (void)removeCachedResponsesSinceDate:(NSDate * _Nonnull)date SWIFT_AVAILABILITY(ios,introduced=8.0);
- (nonnull instancetype)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString * _Nullable)path OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=2.0,deprecated=100000);
- (nonnull instancetype)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity directoryURL:(NSURL * _Nullable)directoryURL OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=13.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextRange;
@class NSTextContainer;
@class NSTextAttachment;

SWIFT_CLASS("_TtC10A4xBaseSDK18A4xBaseURLTextView")
@interface A4xBaseURLTextView : UITextView <UITextViewDelegate>
@property (nonatomic, strong) UIColor * _Nullable textColor;
@property (nonatomic, strong) UITextRange * _Nullable selectedTextRange;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (BOOL)canPerformAction:(SEL _Nonnull)action withSender:(id _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xBaseUserVipInterface")
@interface A4xBaseUserVipInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseUserVipInterface * _Nonnull shared;)
+ (A4xBaseUserVipInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseViewController")
@interface A4xBaseViewController : UIViewController <UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (void)didReceiveMemoryWarning;
@end



SWIFT_CLASS("_TtC10A4xBaseSDK21A4xBaseWifiIotManager")
@interface A4xBaseWifiIotManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBaseWifiIotModel")
@interface A4xBaseWifiIotModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xBindDeviceResult")
@interface A4xBindDeviceResult : NSObject
@property (nonatomic, copy) NSString * _Nonnull opretionId;
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
@property (nonatomic) NSInteger deviceBindStep;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK17A4xBluetoothModel")
@interface A4xBluetoothModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 设备语言类型枚举
/// <hr/>
/// chinese    汉语
/// english    英语
/// japanese   日语
/// german     德语
/// french     法语
/// russian    俄语
/// italian    意大利语
/// spanish    西班牙语
/// finnish    芬兰语
typedef SWIFT_ENUM(NSInteger, A4xDeviceLanguageType, closed) {
  A4xDeviceLanguageTypeChinese = 0,
  A4xDeviceLanguageTypeEnglish = 1,
  A4xDeviceLanguageTypeJapanese = 2,
  A4xDeviceLanguageTypeGerman = 3,
  A4xDeviceLanguageTypeFrench = 4,
  A4xDeviceLanguageTypeRussian = 5,
  A4xDeviceLanguageTypeItalian = 6,
  A4xDeviceLanguageTypeSpanish = 7,
  A4xDeviceLanguageTypeFinnish = 8,
};


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xDeviceSleepModel")
@interface A4xDeviceSleepModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xGradientLayer")
@interface A4xGradientLayer : CAGradientLayer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Base class for providing object-based access to SQLite tables. Simply define the properties and their default values (a value has to be there in order to determine value type) and SQLTable will handle the basic CRUD (creating, reading, updating, deleting) actions for you without any additional code.
SWIFT_CLASS("_TtC10A4xBaseSDK8SQLTable")
@interface SQLTable : NSObject
/// Every SQLTable sub-class will contain an <code>isDeleted</code> flag. Instead of deleting records, you should set the flag to <code>true</code> for deletions and filter your data accordingly when fetching data from <code>SQLTable</code>. This flag will be used to synchronize deletions via CloudKit
@property (nonatomic) BOOL isDeleted;
/// Every SQLTable sub-class will contain a <code>created</code> property indicating the creation date of the record.
@property (nonatomic, copy) NSDate * _Nonnull created;
/// Every SQLTable sub-class will contain a <code>modified</code> property indicating the last modification date of the record.
@property (nonatomic, copy) NSDate * _Nonnull modified;
/// Base initialization which sets up the table name and then verifies that the table exists in the DB, and if it does not, creates it.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK19A4xLocationSQLModel")
@interface A4xLocationSQLModel : SQLTable
@property (nonatomic) NSInteger id;
@property (nonatomic) NSInteger pid;
@property (nonatomic) NSInteger hot;
@property (nonatomic, copy) NSString * _Nullable path;
@property (nonatomic) NSInteger level;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable name_pinyin;
@property (nonatomic, copy) NSString * _Nullable name_en;
@property (nonatomic, copy) NSString * _Nullable code;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)dbName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)imageName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xMJRefreshHeader")
@interface A4xMJRefreshHeader : MJRefreshHeader
@property (nonatomic) CGFloat pullingPercent;
- (void)placeSubviews;
- (void)prepare;
@property (nonatomic) MJRefreshState state;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// SDK环境
typedef SWIFT_ENUM(NSInteger, A4xNodeType, closed) {
/// prod us
  A4xNodeTypePROD_NODE_US = 0,
/// prod eu
  A4xNodeTypePROD_NODE_EU = 1,
/// prod cn
  A4xNodeTypePROD_NODE_CN = 2,
/// staging us
  A4xNodeTypeSTAGE_NODE_US = 3,
/// staging eu
  A4xNodeTypeSTAGE_NODE_EU = 4,
/// staging cn
  A4xNodeTypeSTAGE_NODE_CN = 5,
/// default
  A4xNodeTypeNODE_DEFAULT = 6,
};


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xOTAEventModel")
@interface A4xOTAEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcAccountlinkedplatModel")
@interface A4xObjcAccountlinkedplatModel : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable list;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK27A4xObjcAlexaDeviceListModel")
@interface A4xObjcAlexaDeviceListModel : NSObject
/// Alexa设备列表
@property (nonatomic, copy) NSArray<A4xObjcDeviceModel *> * _Nullable alexaDeviceList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcPlatformDisplayControlModel;

SWIFT_CLASS("_TtC10A4xBaseSDK23A4xObjcAmazonAlexaModel")
@interface A4xObjcAmazonAlexaModel : NSObject
/// 平台的所有支持的设备
@property (nonatomic, strong) A4xObjcAlexaDeviceListModel * _Nullable platformLinkedDevicesMap;
/// 不支持的设备
@property (nonatomic, strong) A4xObjcAlexaDeviceListModel * _Nullable firmwareNotSupportDeviceInfoMap;
@property (nonatomic, copy) NSArray<A4xObjcPlatformDisplayControlModel *> * _Nullable platformDisplayControl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xObjcCoolDownModel")
@interface A4xObjcCoolDownModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK33A4xObjcDeviceBindQRCodeImageModel")
@interface A4xObjcDeviceBindQRCodeImageModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull operationId;
@property (nonatomic, copy) NSString * _Nonnull image;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK25A4xObjcDeviceControlModel")
@interface A4xObjcDeviceControlModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull modelName;
@property (nonatomic) BOOL canRotate;
@property (nonatomic) BOOL canStandby;
@property (nonatomic, copy) NSString * _Nonnull streamProtocol;
@property (nonatomic, copy) NSString * _Nonnull audioCodecType;
@property (nonatomic) BOOL whiteLight;
@property (nonatomic) BOOL devicePersonDetect;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xObjcDeviceListFilter, closed) {
  A4xObjcDeviceListFilterAll = 0,
  A4xObjcDeviceListFilterShare = 1,
  A4xObjcDeviceListFilterLocation = 2,
};

@class A4xObjcPresetModel;
@class A4xObjcSDCardModel;
@class A4xObjcDeviceSupport;

SWIFT_CLASS("_TtC10A4xBaseSDK18A4xObjcDeviceModel")
@interface A4xObjcDeviceModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull deviceId;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull liveUrl;
@property (nonatomic, copy) NSString * _Nonnull modelNo;
@property (nonatomic, copy) NSString * _Nonnull displayModelNo;
@property (nonatomic, copy) NSString * _Nonnull serialNo;
@property (nonatomic, copy) NSString * _Nonnull macAddress;
@property (nonatomic) NSInteger userCount;
@property (nonatomic) NSInteger batter;
@property (nonatomic) NSInteger admin;
@property (nonatomic) NSInteger awake;
@property (nonatomic) NSInteger wifiLevel;
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nonnull locationName;
@property (nonatomic) int64_t adminId;
@property (nonatomic) int64_t userId;
@property (nonatomic) NSInteger online;
@property (nonatomic) NSInteger deviceStatus;
@property (nonatomic) NSInteger dormancyPlanSwitch;
@property (nonatomic, copy) NSString * _Nonnull deviceDormancyMessage;
@property (nonatomic) NSInteger sleepPlan;
@property (nonatomic, copy) NSString * _Nonnull networkName;
@property (nonatomic) NSInteger devicePersonDetect;
@property (nonatomic) NSInteger mirrorFlip;
@property (nonatomic) NSInteger needVideo;
@property (nonatomic) NSInteger videoSeconds;
@property (nonatomic) NSInteger needAlarm;
@property (nonatomic) NSInteger alarmSeconds;
@property (nonatomic) NSInteger needNightVision;
@property (nonatomic) NSInteger nightVisionSensitivity;
@property (nonatomic) NSInteger nightThresholdLevel;
@property (nonatomic) NSInteger whiteLightScintillation;
@property (nonatomic) NSInteger nightVisionMode;
@property (nonatomic, copy) NSString * _Nonnull mcu;
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic, copy) NSString * _Nonnull adminName;
@property (nonatomic, copy) NSString * _Nonnull adminEmail;
@property (nonatomic, copy) NSString * _Nonnull adminPhone;
@property (nonatomic) double activatedTime;
@property (nonatomic) NSInteger activated;
@property (nonatomic) NSInteger role;
@property (nonatomic) NSInteger statusCode;
@property (nonatomic) NSInteger upgradeStatus;
@property (nonatomic) BOOL needForceUpdate;
@property (nonatomic) float upgradeProgress;
@property (nonatomic, copy) NSString * _Nonnull userSn;
@property (nonatomic) NSInteger charging;
@property (nonatomic, copy) NSString * _Nonnull newFirmwareId;
@property (nonatomic, copy) NSString * _Nonnull deviceLanguage;
@property (nonatomic, copy) NSString * _Nonnull timeZone;
@property (nonatomic, copy) NSString * _Nonnull video_sharp;
@property (nonatomic, copy) NSArray<A4xObjcPresetModel *> * _Nonnull presetLocations;
@property (nonatomic) NSInteger wifiChannel;
@property (nonatomic, copy) NSString * _Nonnull ip;
@property (nonatomic, copy) NSString * _Nonnull resolution;
@property (nonatomic) BOOL pushIgnored;
@property (nonatomic, strong) A4xObjcSDCardModel * _Nullable sdCard;
@property (nonatomic, strong) A4xObjcDeviceControlModel * _Nullable deviceContrl;
@property (nonatomic) NSInteger packagePush;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull deviceSupportLanguage;
@property (nonatomic) BOOL antiflickerSupport;
@property (nonatomic) NSInteger antiflickerSwitch;
@property (nonatomic) NSInteger antiflicker;
@property (nonatomic) NSInteger recLamp;
@property (nonatomic) NSInteger voiceVolumeSwitch;
@property (nonatomic) NSInteger voiceVolume;
@property (nonatomic) NSInteger alarmVolume;
@property (nonatomic) NSInteger needMotion;
@property (nonatomic) NSInteger motionSensitivity;
@property (nonatomic) NSInteger personDetect;
@property (nonatomic) NSInteger motionTrack;
@property (nonatomic) NSInteger motionTrackMode;
@property (nonatomic) NSInteger cryDetect;
@property (nonatomic) NSInteger cryDetectLevel;
@property (nonatomic, strong) A4xObjcDeviceSupport * _Nullable deviceSupport;
@property (nonatomic, copy) NSString * _Nonnull deviceIconUrl;
@property (nonatomic, copy) NSString * _Nonnull deviceSmailUrl;
@property (nonatomic, copy) NSString * _Nonnull displayGitSha;
@property (nonatomic) BOOL quantityCharge;
@property (nonatomic) BOOL showCodecChange;
@property (nonatomic) BOOL codecSupported;
@property (nonatomic, copy) NSString * _Nonnull defaultCodec;
@property (nonatomic, copy) NSString * _Nonnull codec;
@property (nonatomic) BOOL firmwareSupported;
/// 当前设备是否是Vip 0:不是 1:是
@property (nonatomic) NSInteger deviceVipLevel;
@property (nonatomic, strong) A4xObjcCoolDownModel * _Nullable cooldown;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK23A4xObjcDeviceShareModel")
@interface A4xObjcDeviceShareModel : NSObject
/// 分享操作主要的ID
@property (nonatomic) int64_t mainId;
/// 管理员ID
@property (nonatomic) int64_t adminId;
/// 分享目标ID
@property (nonatomic) int64_t targetId;
/// 分享目标名称
@property (nonatomic, copy) NSString * _Nonnull targetName;
/// 分享目标邮箱
@property (nonatomic, copy) NSString * _Nonnull targetEmail;
/// 分享目标手机号
@property (nonatomic, copy) NSString * _Nonnull targetPhone;
/// 设备ID
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
/// 设备名称
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// 分享角色ID （固定2，代表普通用户）
@property (nonatomic) int64_t roleId;
/// 分享角色 （暂时固定0）
@property (nonatomic) int64_t role;
/// 角色权限文本（暂时固定 “Live feed,playback video cli”）
@property (nonatomic, copy) NSString * _Nonnull roleText;
/// 分享ID
@property (nonatomic, copy) NSString * _Nonnull shareId;
/// 管理员名称
@property (nonatomic, copy) NSString * _Nonnull adminName;
/// 管理员名称
@property (nonatomic, copy) NSString * _Nonnull adminEmail;
/// 分享过期时间戳
@property (nonatomic) NSInteger expireTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xObjcDeviceSupport")
@interface A4xObjcDeviceSupport : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull deviceSupportResolution;
@property (nonatomic) BOOL deviceSupportAlarm;
@property (nonatomic) BOOL deviceSupportMirrorFlip;
@property (nonatomic) NSInteger supportRecLamp;
@property (nonatomic) NSInteger supportVoiceVolume;
@property (nonatomic) NSInteger supportAlarmVolume;
@property (nonatomic) NSInteger supportWebrtc;
@property (nonatomic) NSInteger supportCryDetect;
@property (nonatomic) BOOL killKeepAlive;
@property (nonatomic) NSInteger deviceDormancySupport;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK36A4xObjcDeviceUpdateProgressInfoModel")
@interface A4xObjcDeviceUpdateProgressInfoModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
@property (nonatomic, copy) NSString * _Nonnull targetFirmware;
@property (nonatomic) NSInteger inProgress;
@property (nonatomic) NSInteger transferredSize;
@property (nonatomic) int64_t totalSize;
/// 0 无状态 > 0 更新完成 < 0 负值更新失败
@property (nonatomic) NSInteger status;
@property (nonatomic) NSInteger timeout;
@property (nonatomic) NSInteger otaStatus;
@property (nonatomic) int64_t otaStartTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xObjcLibaryDateState")
@interface A4xObjcLibaryDateState : NSObject
@property (nonatomic) NSInteger dateTimestamp;
@property (nonatomic) NSInteger count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK25A4xObjcLibraryDeleteModel")
@interface A4xObjcLibraryDeleteModel : NSObject
@property (nonatomic) NSInteger removed;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull failed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcLibraryVideoTagsModel;

SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcLibraryEventVideoModel")
@interface A4xObjcLibraryEventVideoModel : NSObject
@property (nonatomic) NSInteger videoEvent;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic) NSTimeInterval endTime;
@property (nonatomic) float period;
@property (nonatomic, copy) NSString * _Nonnull deviceName;
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
@property (nonatomic, copy) NSString * _Nonnull videoUrls;
@property (nonatomic, strong) A4xObjcLibraryVideoTagsModel * _Nullable tags;
@property (nonatomic) NSInteger libraryCount;
@property (nonatomic) NSInteger type;
@property (nonatomic) NSInteger missing;
@property (nonatomic) NSInteger marked;
@property (nonatomic, copy) NSString * _Nonnull libraryIds;
@property (nonatomic) BOOL manager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK30A4xObjcLibraryNormalVideoModel")
@interface A4xObjcLibraryNormalVideoModel : NSObject
@property (nonatomic) NSInteger resourceId;
@property (nonatomic) NSInteger missing;
@property (nonatomic) NSInteger mark;
@property (nonatomic) NSInteger type;
@property (nonatomic) NSInteger from;
@property (nonatomic) NSTimeInterval time;
@property (nonatomic, copy) NSString * _Nonnull cName;
@property (nonatomic, copy) NSString * _Nonnull cID;
@property (nonatomic, copy) NSString * _Nonnull date;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, copy) NSString * _Nonnull tags;
@property (nonatomic) BOOL manager;
@property (nonatomic, copy) NSString * _Nonnull managerName;
@property (nonatomic) float period;
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nonnull locationName;
@property (nonatomic, copy) NSURL * _Nonnull videoURL;
@property (nonatomic) int64_t adminId;
@property (nonatomic, copy) NSString * _Nonnull pushInfo;
@property (nonatomic, copy) NSString * _Nonnull traceId;
@property (nonatomic) NSInteger fileSize;
@property (nonatomic, copy) NSString * _Nonnull eventInfo;
@property (nonatomic, copy) NSString * _Nonnull packageEventInfo;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull eventInfoList;
@property (nonatomic) BOOL adminIsVip;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK28A4xObjcLibraryVideoTagsModel")
@interface A4xObjcLibraryVideoTagsModel : NSObject
@property (nonatomic) NSInteger person;
@property (nonatomic) NSInteger pet;
@property (nonatomic) NSInteger vehicle;
@property (nonatomic) NSInteger package;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 调用sendAlexaAuthResult接口之后,返回的A4xObjcLinkedResultModel下面的user模型信息
SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcLinkedAccountLinkModel")
@interface A4xObjcLinkedAccountLinkModel : NSObject
/// 账号link状态
@property (nonatomic, copy) NSString * _Nullable status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcLinkedSkillModel;
@class A4xObjcLinkedUserModel;

/// 调用sendAlexaAuthResult接口之后,返回的数据模型
SWIFT_CLASS("_TtC10A4xBaseSDK24A4xObjcLinkedResultModel")
@interface A4xObjcLinkedResultModel : NSObject
/// 技能组字典信息
@property (nonatomic, strong) A4xObjcLinkedSkillModel * _Nullable skill;
/// 用户信息
@property (nonatomic, strong) A4xObjcLinkedUserModel * _Nullable user;
/// 账号link状态
@property (nonatomic, strong) A4xObjcLinkedAccountLinkModel * _Nullable accountlink;
/// 状态
@property (nonatomic, copy) NSString * _Nullable status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 调用sendAlexaAuthResult接口之后,返回的A4xObjcLinkedResultModel下面的skill模型信息
SWIFT_CLASS("_TtC10A4xBaseSDK23A4xObjcLinkedSkillModel")
@interface A4xObjcLinkedSkillModel : NSObject
/// 环境 :developer
@property (nonatomic, copy) NSString * _Nullable stage;
/// 技能组id
@property (nonatomic, copy) NSString * _Nullable skillId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 调用sendAlexaAuthResult接口之后,返回的A4xObjcLinkedResultModel下面的user模型信息
SWIFT_CLASS("_TtC10A4xBaseSDK22A4xObjcLinkedUserModel")
@interface A4xObjcLinkedUserModel : NSObject
/// 用户id
@property (nonatomic, copy) NSString * _Nullable userId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK20A4xObjcLocationModel")
@interface A4xObjcLocationModel : NSObject
@property (nonatomic) enum A4xObjcDeviceListFilter filterType;
@property (nonatomic, copy) NSString * _Nonnull identerType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10A4xBaseSDK15A4xObjcOtaModel")
@interface A4xObjcOtaModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK34A4xObjcPlatformDisplayControlModel")
@interface A4xObjcPlatformDisplayControlModel : NSObject
@property (nonatomic, copy) NSString * _Nullable platformKey;
@property (nonatomic) BOOL platformValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xObjcPresetModel")
@interface A4xObjcPresetModel : NSObject
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nonnull coordinate;
@property (nonatomic, copy) NSString * _Nonnull thumbnailUrl;
@property (nonatomic, copy) NSString * _Nonnull rotationPointName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK18A4xObjcSDCardModel")
@interface A4xObjcSDCardModel : NSObject
@property (nonatomic) NSInteger formatStatus;
@property (nonatomic) float total;
@property (nonatomic) float used;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK21A4xObjcVideoTimeModel")
@interface A4xObjcVideoTimeModel : NSObject
@property (nonatomic) int64_t start;
@property (nonatomic) int64_t end;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK29A4xObjcVideoTimeModelResponse")
@interface A4xObjcVideoTimeModelResponse : NSObject
@property (nonatomic, copy) NSArray<A4xObjcVideoTimeModel *> * _Nullable videoSlices;
@property (nonatomic, strong) A4xObjcVideoTimeModel * _Nullable earliestVideoSlice;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK16A4xPayEventModel")
@interface A4xPayEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10A4xBaseSDK22A4xPlayVideoEventModel")
@interface A4xPlayVideoEventModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 区分App还是SDK
typedef SWIFT_ENUM(NSInteger, A4xProjectType, closed) {
  A4xProjectTypeAPP = 0,
  A4xProjectTypeSDK = 1,
};

enum A4xRouterPushType : NSInteger;
enum A4xRouterMoudleType : NSInteger;
enum A4xRouterReasonType : NSInteger;

SWIFT_CLASS("_TtC10A4xBaseSDK17A4xRouterBaseType")
@interface A4xRouterBaseType : NSObject
@property (nonatomic) enum A4xRouterPushType pushType;
@property (nonatomic) enum A4xRouterMoudleType moudleType;
@property (nonatomic) enum A4xRouterReasonType funcType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 模块类型
typedef SWIFT_ENUM(NSInteger, A4xRouterMoudleType, closed) {
  A4xRouterMoudleTypeLive = 100,
  A4xRouterMoudleTypeBind = 200,
  A4xRouterMoudleTypeDeviceSetting = 300,
  A4xRouterMoudleTypeOta = 400,
  A4xRouterMoudleTypeLibtary = 500,
  A4xRouterMoudleTypeAlexa = 600,
  A4xRouterMoudleTypeUserAccount = 700,
  A4xRouterMoudleTypeCommon = 800,
  A4xRouterMoudleTypeDefault = 0,
};

typedef SWIFT_ENUM(NSInteger, A4xRouterPushType, closed) {
  A4xRouterPushTypeRouter = 0,
/// 默认走路由机制
  A4xRouterPushTypePush = 1,
/// push
  A4xRouterPushTypePop = 2,
/// pop
  A4xRouterPushTypeDismiss = 3,
};

/// 功能类型
typedef SWIFT_ENUM(NSInteger, A4xRouterReasonType, closed) {
/// 特殊的case
/// 直播页面模块需要,以<code>1**</code>开头
/// 直播页面->设备设置页面
  A4xRouterReasonTypeLivePageToDeviceSetting = 101,
/// 直播页面->相册页面
  A4xRouterReasonTypeLivePageToLibrary = 102,
/// 直播页面->声音设置页面
  A4xRouterReasonTypeLivePageToSoundSetting = 103,
/// 直播页面->固件升级页面
  A4xRouterReasonTypeLivePageToFirmwareUpdatePage = 104,
/// 直播页面->分享页面(这里分情况设备属于自己还是属于被分享者)
  A4xRouterReasonTypeLivePageToSharePage = 105,
/// 直播页面录制已经完成
  A4xRouterReasonTypeLivePageRecordCompleted = 106,
/// 直播页面->运动轨迹页面
  A4xRouterReasonTypeLivePageToMotionTrackingPage = 107,
/// 直播页面->运动检测页面
  A4xRouterReasonTypeLivePageToMotionDetection = 108,
/// 绑定页面模块需要,以<code>2**</code>开头
/// 绑定页面绑定成功
  A4xRouterReasonTypeBindPageBindSuccess = 204,
/// 绑定页面换绑成功
  A4xRouterReasonTypeBindPageChangeWifiSuccess = 205,
/// 绑定页面结束OTA
  A4xRouterReasonTypeBindPageOTAFinish = 206,
/// 绑定页面跳过OTA
  A4xRouterReasonTypeBindPageOTASkip = 207,
/// 绑定页面用户反馈
  A4xRouterReasonTypeBindPageUserFeedback = 208,
/// 绑定页面扫码完成
  A4xRouterReasonTypeBindPageScanQrcodeResultEnd = 209,
/// 绑定页面取消绑定,点击了返回按钮
  A4xRouterReasonTypeBindPageBindCancle = 210,
/// 设备设置页面模块需要,以<code>3**</code>开头
/// 点击了删除设备按钮回调
  A4xRouterReasonTypeDeletingDevice = 301,
/// 从设备设置页面进入ActivityZone页面
  A4xRouterReasonTypeDevicePageToActivityZone = 302,
/// 从设备设置页面进入更多页面
  A4xRouterReasonTypeDevicePageToMorePage = 303,
/// 从设备设置页面进入SD卡回看页面
  A4xRouterReasonTypeDevicePageToSDHistory = 304,
/// 从设备设置页面进入SD卡回看页面
  A4xRouterReasonTypeDevicePageToSharedSDHistory = 305,
/// 设备页面换绑wifi成功
  A4xRouterReasonTypeDevicePageReplaceBindWiFi = 306,
/// 设备页面高级设置按钮点击
  A4xRouterReasonTypeDevicePageInstallButtonClick = 307,
/// 点击分享按钮的回调，用户可以自己给提示框(例如弹出请长按二维码弹窗)
  A4xRouterReasonTypeDevicePageShareButtonClick = 308,
/// 长按二维码回调image对象
  A4xRouterReasonTypeDevicePageQRCodeLongPress = 309,
/// 设备已经被管理员删除
  A4xRouterReasonTypeDeviceHasBeenDeleted = 310,
/// 从设备设置页面返回到主页
  A4xRouterReasonTypeDevicePageReturnToHomePage = 311,
/// 设备页面进入去购买页面
  A4xRouterReasonTypeDevicePageToGoBuy = 312,
/// 设备声音页面退出,需要刷新直播的声音按钮UI
  A4xRouterReasonTypeDeviceSoundPageReturn = 313,
/// 调用showReceivedBindSharedDeviceAlert接口,各个按钮回调
  A4xRouterReasonTypeDeviceShareCompleted = 314,
/// 扫码添加好友设备完成的回调
  A4xRouterReasonTypeDeviceShareScanQrcodeRequest = 315,
/// 回到主页,默认情况
  A4xRouterReasonTypeDefault = 0,
};

/// SDK初始化错误码
typedef SWIFT_ENUM(NSInteger, A4xSDKInitErrorType, closed) {
/// 成功
  A4xSDKInitErrorTypeSuccess = 0,
/// 没有传 AppToken
  A4xSDKInitErrorTypeNoAppToken = 1,
/// 没有传 TenantId
  A4xSDKInitErrorTypeNoTenantId = 2,
/// 没有传 语言
  A4xSDKInitErrorTypeNoLanguage = 3,
/// 没有传 国家
  A4xSDKInitErrorTypeNoCountryNo = 4,
/// 没有传 选择网络节点
  A4xSDKInitErrorTypeNoNodeType = 5,
/// 获取用户信息失败
  A4xSDKInitErrorTypeGetInfoFailed = 6,
};







/// Simple wrapper class to provide basic SQLite database access as a non-singleton
SWIFT_CLASS_NAMED("SQLiteBase")
@interface SQLiteBase : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Output the current SQLite database path
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Simple wrapper class to provide basic SQLite database access.
SWIFT_CLASS_NAMED("SQLiteDB")
@interface SQLiteDB : SQLiteBase
/// Output the current SQLite database path
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end











@interface UIImageView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end







@interface UIScrollView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end











@interface UIView (SWIFT_EXTENSION(A4xBaseSDK))
- (void)my_layoutSubviews;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
