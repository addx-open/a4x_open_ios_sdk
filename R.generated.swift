//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
    
  fileprivate static let applicationLocale = (hostingBundle ?? hostingBundle_defalut).preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
    
  fileprivate static let hostingBundle_defalut = Bundle(for: R.Class.self)//Bundle(path: Bundle.main.resourcePath! + "/A4xSDK.bundle")//
    
  fileprivate static let bundlePath = Bundle.main.path(forResource: "A4xSDK", ofType: "bundle")
  fileprivate static let hostingBundle = Bundle.init(path: bundlePath!)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if (hostingBundle ?? hostingBundle_defalut).localizations.contains(locale.identifier) {
          if let language = locale.languageCode, (hostingBundle ?? hostingBundle_defalut).localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, (hostingBundle ?? hostingBundle_defalut).localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = (hostingBundle ?? hostingBundle_defalut).developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = (hostingBundle ?? hostingBundle_defalut).developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = (hostingBundle ?? hostingBundle_defalut).url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = (hostingBundle ?? hostingBundle_defalut).url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = (hostingBundle ?? hostingBundle_defalut).url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, (hostingBundle ?? hostingBundle_defalut))
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = (hostingBundle ?? hostingBundle_defalut).infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
    static let comAppleDeveloperNetworkingWifiInfo = true
    static let comAppleExternalAccessoryWirelessConfiguration = true

    struct comAppleSecurityApplicationGroups {
      static let groupAddxVicoo = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.addx.vicoo") ?? "group.addx.vicoo"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 39 files.
  struct file {
    /// Resource file `AppCommenInfo.conf`.
    static let appCommenInfoConf = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AppCommenInfo", pathExtension: "conf")
    /// Resource file `BebasNeue.otf`.
    static let bebasNeueOtf = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BebasNeue", pathExtension: "otf")
    /// Resource file `Terms.htm`.
    static let termsHtm = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "Terms", pathExtension: "htm")
    /// Resource file `account_disable_push_animail.json`.
    static let account_disable_push_animailJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_disable_push_animail", pathExtension: "json")
    /// Resource file `account_enable_push_animail.json`.
    static let account_enable_push_animailJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_enable_push_animail", pathExtension: "json")
    /// Resource file `add_guide.html`.
    static let add_guideHtml = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_guide", pathExtension: "html")
    /// Resource file `alert_device.gif`.
    static let alert_deviceGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "alert_device", pathExtension: "gif")
    /// Resource file `buildInfo.conf`.
    static let buildInfoConf = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "buildInfo", pathExtension: "conf")
    /// Resource file `dataSource.db`.
    static let dataSourceDb = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "dataSource", pathExtension: "db")
    /// Resource file `decive_add_guide.gif`.
    static let decive_add_guideGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "decive_add_guide", pathExtension: "gif")
    /// Resource file `device_alarm.gif`.
    static let device_alarmGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_alarm", pathExtension: "gif")
    /// Resource file `device_connect_failed.json`.
    static let device_connect_failedJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_connect_failed", pathExtension: "json")
    /// Resource file `device_connect_success.json`.
    static let device_connect_successJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_connect_success", pathExtension: "json")
    /// Resource file `device_connecting.json`.
    static let device_connectingJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_connecting", pathExtension: "json")
    /// Resource file `device_feedbackScan_button.gif`.
    static let device_feedbackScan_buttonGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_feedbackScan_button", pathExtension: "gif")
    /// Resource file `device_power_double.gif`.
    static let device_power_doubleGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_double", pathExtension: "gif")
    /// Resource file `device_power_long_cn.gif`.
    static let device_power_long_cnGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_long_cn", pathExtension: "gif")
    /// Resource file `device_power_long_en.gif`.
    static let device_power_long_enGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_long_en", pathExtension: "gif")
    /// Resource file `device_power_long_ja.gif`.
    static let device_power_long_jaGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_long_ja", pathExtension: "gif")
    /// Resource file `device_preset_location.gif`.
    static let device_preset_locationGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_preset_location", pathExtension: "gif")
    /// Resource file `device_wait_loading_animail.json`.
    static let device_wait_loading_animailJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wait_loading_animail", pathExtension: "json")
    /// Resource file `device_wait_logo_big_animail.json`.
    static let device_wait_logo_big_animailJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wait_logo_big_animail", pathExtension: "json")
    /// Resource file `device_wait_logo_smail_animail.json`.
    static let device_wait_logo_smail_animailJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wait_logo_smail_animail", pathExtension: "json")
    /// Resource file `device_wait_scuess_animail.json`.
    static let device_wait_scuess_animailJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wait_scuess_animail", pathExtension: "json")
    /// Resource file `getting_wifi.gif`.
    static let getting_wifiGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "getting_wifi", pathExtension: "gif")
    /// Resource file `guide_step1.gif`.
    static let guide_step1Gif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guide_step1", pathExtension: "gif")
    /// Resource file `guide_step2.gif`.
    static let guide_step2Gif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guide_step2", pathExtension: "gif")
    /// Resource file `guide_step3.gif`.
    static let guide_step3Gif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guide_step3", pathExtension: "gif")
    /// Resource file `image_defalult.gif`.
    static let image_defalultGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "image_defalult", pathExtension: "gif")
    /// Resource file `img_0.png`.
    static let img_0Png = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "img_0", pathExtension: "png")
    /// Resource file `live_play_animail.json`.
    static let live_play_animailJson = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_play_animail", pathExtension: "json")
    /// Resource file `pay_free.gif`.
    static let pay_freeGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "pay_free", pathExtension: "gif")
    /// Resource file `privacy.htm`.
    static let privacyHtm = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "privacy", pathExtension: "htm")
    /// Resource file `qrcode_voice.gif`.
    static let qrcode_voiceGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "qrcode_voice", pathExtension: "gif")
    /// Resource file `scan_qr_code_cn.gif`.
    static let scan_qr_code_cnGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qr_code_cn", pathExtension: "gif")
    /// Resource file `scan_qr_code_en.gif`.
    static let scan_qr_code_enGif = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qr_code_en", pathExtension: "gif")
    /// Resource file `scan_qrcode.mp3`.
    static let scan_qrcodeMp3 = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qrcode", pathExtension: "mp3")
    /// Resource file `toast_close.png`.
    static let toast_closePng = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "toast_close", pathExtension: "png")
    /// Resource file `user_login_bg.png`.
    static let user_login_bgPng = Rswift.FileResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "user_login_bg", pathExtension: "png")

    /// `bundle.url(forResource: "AppCommenInfo", withExtension: "conf")`
    static func appCommenInfoConf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appCommenInfoConf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BebasNeue", withExtension: "otf")`
    static func bebasNeueOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bebasNeueOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Terms", withExtension: "htm")`
    static func termsHtm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.termsHtm
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "account_disable_push_animail", withExtension: "json")`
    static func account_disable_push_animailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.account_disable_push_animailJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "account_enable_push_animail", withExtension: "json")`
    static func account_enable_push_animailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.account_enable_push_animailJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "add_guide", withExtension: "html")`
    static func add_guideHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.add_guideHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "alert_device", withExtension: "gif")`
    static func alert_deviceGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alert_deviceGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "buildInfo", withExtension: "conf")`
    static func buildInfoConf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.buildInfoConf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dataSource", withExtension: "db")`
    static func dataSourceDb(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dataSourceDb
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "decive_add_guide", withExtension: "gif")`
    static func decive_add_guideGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.decive_add_guideGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_alarm", withExtension: "gif")`
    static func device_alarmGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_alarmGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_connect_failed", withExtension: "json")`
    static func device_connect_failedJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_connect_failedJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_connect_success", withExtension: "json")`
    static func device_connect_successJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_connect_successJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_connecting", withExtension: "json")`
    static func device_connectingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_connectingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_feedbackScan_button", withExtension: "gif")`
    static func device_feedbackScan_buttonGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_feedbackScan_buttonGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_power_double", withExtension: "gif")`
    static func device_power_doubleGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_power_doubleGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_power_long_cn", withExtension: "gif")`
    static func device_power_long_cnGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_power_long_cnGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_power_long_en", withExtension: "gif")`
    static func device_power_long_enGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_power_long_enGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_power_long_ja", withExtension: "gif")`
    static func device_power_long_jaGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_power_long_jaGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_preset_location", withExtension: "gif")`
    static func device_preset_locationGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_preset_locationGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_wait_loading_animail", withExtension: "json")`
    static func device_wait_loading_animailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_wait_loading_animailJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_wait_logo_big_animail", withExtension: "json")`
    static func device_wait_logo_big_animailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_wait_logo_big_animailJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_wait_logo_smail_animail", withExtension: "json")`
    static func device_wait_logo_smail_animailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_wait_logo_smail_animailJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "device_wait_scuess_animail", withExtension: "json")`
    static func device_wait_scuess_animailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.device_wait_scuess_animailJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "getting_wifi", withExtension: "gif")`
    static func getting_wifiGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getting_wifiGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide_step1", withExtension: "gif")`
    static func guide_step1Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guide_step1Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide_step2", withExtension: "gif")`
    static func guide_step2Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guide_step2Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide_step3", withExtension: "gif")`
    static func guide_step3Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guide_step3Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "image_defalult", withExtension: "gif")`
    static func image_defalultGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.image_defalultGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "img_0", withExtension: "png")`
    static func img_0Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.img_0Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "live_play_animail", withExtension: "json")`
    static func live_play_animailJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.live_play_animailJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pay_free", withExtension: "gif")`
    static func pay_freeGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pay_freeGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "privacy", withExtension: "htm")`
    static func privacyHtm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privacyHtm
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "qrcode_voice", withExtension: "gif")`
    static func qrcode_voiceGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qrcode_voiceGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "scan_qr_code_cn", withExtension: "gif")`
    static func scan_qr_code_cnGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scan_qr_code_cnGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "scan_qr_code_en", withExtension: "gif")`
    static func scan_qr_code_enGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scan_qr_code_enGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "scan_qrcode", withExtension: "mp3")`
    static func scan_qrcodeMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scan_qrcodeMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "toast_close", withExtension: "png")`
    static func toast_closePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toast_closePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "user_login_bg", withExtension: "png")`
    static func user_login_bgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.user_login_bgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `BebasNeue`.
    static let bebasNeue = Rswift.FontResource(fontName: "BebasNeue")

    /// `UIFont(name: "BebasNeue", size: ...)`
    static func bebasNeue(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: bebasNeue, size: size)
    }

    static func validate() throws {
      if R.font.bebasNeue(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BebasNeue' could not be loaded, is 'BebasNeue.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 725 images.
  struct image {
    /// Image `AC`.
    static let aC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AC")
    /// Image `AD`.
    static let aD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AD")
    /// Image `AE`.
    static let aE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AE")
    /// Image `AF`.
    static let aF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AF")
    /// Image `AG`.
    static let aG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AG")
    /// Image `AI`.
    static let aI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AI")
    /// Image `AL`.
    static let aL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AL")
    /// Image `AM`.
    static let aM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AM")
    /// Image `AO`.
    static let aO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AO")
    /// Image `AQ`.
    static let aQ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AQ")
    /// Image `AR`.
    static let aR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AR")
    /// Image `AS`.
    static let aS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AS")
    /// Image `AT`.
    static let aT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AT")
    /// Image `AU`.
    static let aU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AU")
    /// Image `AW`.
    static let aW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AW")
    /// Image `AX`.
    static let aX = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AX")
    /// Image `AZ`.
    static let aZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "AZ")
    /// Image `BA`.
    static let bA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BA")
    /// Image `BB`.
    static let bB = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BB")
    /// Image `BD`.
    static let bD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BD")
    /// Image `BE`.
    static let bE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BE")
    /// Image `BF`.
    static let bF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BF")
    /// Image `BG`.
    static let bG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BG")
    /// Image `BH`.
    static let bH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BH")
    /// Image `BI`.
    static let bI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BI")
    /// Image `BJ`.
    static let bJ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BJ")
    /// Image `BL`.
    static let bL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BL")
    /// Image `BM`.
    static let bM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BM")
    /// Image `BN`.
    static let bN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BN")
    /// Image `BO`.
    static let bO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BO")
    /// Image `BQ`.
    static let bQ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BQ")
    /// Image `BR`.
    static let bR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BR")
    /// Image `BS`.
    static let bS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BS")
    /// Image `BT`.
    static let bT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BT")
    /// Image `BW`.
    static let bW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BW")
    /// Image `BY`.
    static let bY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BY")
    /// Image `BZ`.
    static let bZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "BZ")
    /// Image `CA`.
    static let cA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CA")
    /// Image `CC`.
    static let cC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CC")
    /// Image `CD`.
    static let cD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CD")
    /// Image `CF`.
    static let cF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CF")
    /// Image `CG`.
    static let cG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CG")
    /// Image `CH`.
    static let cH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CH")
    /// Image `CI`.
    static let cI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CI")
    /// Image `CK`.
    static let cK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CK")
    /// Image `CL`.
    static let cL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CL")
    /// Image `CM`.
    static let cM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CM")
    /// Image `CN`.
    static let cN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CN")
    /// Image `CO`.
    static let cO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CO")
    /// Image `CR`.
    static let cR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CR")
    /// Image `CU`.
    static let cU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CU")
    /// Image `CV`.
    static let cV = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CV")
    /// Image `CW`.
    static let cW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CW")
    /// Image `CX`.
    static let cX = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CX")
    /// Image `CY`.
    static let cY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CY")
    /// Image `CZ`.
    static let cZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "CZ")
    /// Image `DE`.
    static let dE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "DE")
    /// Image `DG`.
    static let dG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "DG")
    /// Image `DJ`.
    static let dJ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "DJ")
    /// Image `DK`.
    static let dK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "DK")
    /// Image `DM`.
    static let dM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "DM")
    /// Image `DO`.
    static let dO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "DO")
    /// Image `DZ`.
    static let dZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "DZ")
    /// Image `EA`.
    static let eA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "EA")
    /// Image `EC`.
    static let eC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "EC")
    /// Image `EE`.
    static let eE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "EE")
    /// Image `EG`.
    static let eG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "EG")
    /// Image `EH`.
    static let eH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "EH")
    /// Image `ER`.
    static let eR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ER")
    /// Image `ES`.
    static let eS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ES")
    /// Image `ET`.
    static let eT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ET")
    /// Image `FI`.
    static let fI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "FI")
    /// Image `FJ`.
    static let fJ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "FJ")
    /// Image `FK`.
    static let fK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "FK")
    /// Image `FM`.
    static let fM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "FM")
    /// Image `FO`.
    static let fO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "FO")
    /// Image `FR`.
    static let fR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "FR")
    /// Image `GA`.
    static let gA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GA")
    /// Image `GB`.
    static let gB = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GB")
    /// Image `GD`.
    static let gD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GD")
    /// Image `GE`.
    static let gE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GE")
    /// Image `GF`.
    static let gF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GF")
    /// Image `GG`.
    static let gG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GG")
    /// Image `GH`.
    static let gH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GH")
    /// Image `GI`.
    static let gI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GI")
    /// Image `GL`.
    static let gL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GL")
    /// Image `GM`.
    static let gM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GM")
    /// Image `GN`.
    static let gN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GN")
    /// Image `GP`.
    static let gP = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GP")
    /// Image `GQ`.
    static let gQ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GQ")
    /// Image `GR`.
    static let gR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GR")
    /// Image `GS`.
    static let gS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GS")
    /// Image `GT`.
    static let gT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GT")
    /// Image `GU`.
    static let gU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GU")
    /// Image `GW`.
    static let gW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GW")
    /// Image `GY`.
    static let gY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "GY")
    /// Image `HK`.
    static let hK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "HK")
    /// Image `HN`.
    static let hN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "HN")
    /// Image `HR`.
    static let hR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "HR")
    /// Image `HT`.
    static let hT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "HT")
    /// Image `HU`.
    static let hU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "HU")
    /// Image `IC`.
    static let iC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IC")
    /// Image `ID`.
    static let iD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ID")
    /// Image `IE`.
    static let iE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IE")
    /// Image `IL`.
    static let iL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IL")
    /// Image `IM`.
    static let iM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IM")
    /// Image `IN`.
    static let iN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IN")
    /// Image `IO`.
    static let iO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IO")
    /// Image `IQ`.
    static let iQ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IQ")
    /// Image `IR`.
    static let iR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IR")
    /// Image `IS`.
    static let iS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IS")
    /// Image `IT`.
    static let iT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "IT")
    /// Image `JE`.
    static let jE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "JE")
    /// Image `JM`.
    static let jM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "JM")
    /// Image `JO`.
    static let jO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "JO")
    /// Image `JP`.
    static let jP = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "JP")
    /// Image `KE`.
    static let kE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KE")
    /// Image `KG`.
    static let kG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KG")
    /// Image `KH`.
    static let kH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KH")
    /// Image `KI`.
    static let kI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KI")
    /// Image `KM`.
    static let kM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KM")
    /// Image `KN`.
    static let kN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KN")
    /// Image `KP`.
    static let kP = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KP")
    /// Image `KR`.
    static let kR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KR")
    /// Image `KW`.
    static let kW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KW")
    /// Image `KY`.
    static let kY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KY")
    /// Image `KZ`.
    static let kZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "KZ")
    /// Image `LA`.
    static let lA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LA")
    /// Image `LB`.
    static let lB = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LB")
    /// Image `LC`.
    static let lC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LC")
    /// Image `LI`.
    static let lI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LI")
    /// Image `LK`.
    static let lK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LK")
    /// Image `LR`.
    static let lR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LR")
    /// Image `LS`.
    static let lS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LS")
    /// Image `LT`.
    static let lT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LT")
    /// Image `LU`.
    static let lU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LU")
    /// Image `LV`.
    static let lV = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LV")
    /// Image `LY`.
    static let lY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LY")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "LaunchImage")
    /// Image `MA`.
    static let mA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MA")
    /// Image `MC`.
    static let mC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MC")
    /// Image `MD`.
    static let mD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MD")
    /// Image `ME`.
    static let mE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ME")
    /// Image `MF`.
    static let mF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MF")
    /// Image `MG`.
    static let mG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MG")
    /// Image `MH`.
    static let mH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MH")
    /// Image `MK`.
    static let mK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MK")
    /// Image `ML`.
    static let mL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ML")
    /// Image `MM`.
    static let mM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MM")
    /// Image `MN`.
    static let mN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MN")
    /// Image `MO`.
    static let mO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MO")
    /// Image `MP`.
    static let mP = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MP")
    /// Image `MQ`.
    static let mQ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MQ")
    /// Image `MR`.
    static let mR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MR")
    /// Image `MS`.
    static let mS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MS")
    /// Image `MT`.
    static let mT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MT")
    /// Image `MU`.
    static let mU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MU")
    /// Image `MV`.
    static let mV = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MV")
    /// Image `MW`.
    static let mW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MW")
    /// Image `MX`.
    static let mX = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MX")
    /// Image `MY`.
    static let mY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MY")
    /// Image `MZ`.
    static let mZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "MZ")
    /// Image `NA`.
    static let nA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NA")
    /// Image `NC`.
    static let nC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NC")
    /// Image `NE`.
    static let nE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NE")
    /// Image `NF`.
    static let nF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NF")
    /// Image `NG`.
    static let nG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NG")
    /// Image `NI`.
    static let nI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NI")
    /// Image `NL`.
    static let nL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NL")
    /// Image `NO`.
    static let nO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NO")
    /// Image `NP`.
    static let nP = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NP")
    /// Image `NR`.
    static let nR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NR")
    /// Image `NU`.
    static let nU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NU")
    /// Image `NZ`.
    static let nZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "NZ")
    /// Image `OM`.
    static let oM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "OM")
    /// Image `PA`.
    static let pA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PA")
    /// Image `PE`.
    static let pE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PE")
    /// Image `PF`.
    static let pF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PF")
    /// Image `PG`.
    static let pG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PG")
    /// Image `PH`.
    static let pH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PH")
    /// Image `PK`.
    static let pK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PK")
    /// Image `PL`.
    static let pL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PL")
    /// Image `PM`.
    static let pM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PM")
    /// Image `PN`.
    static let pN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PN")
    /// Image `PR`.
    static let pR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PR")
    /// Image `PS`.
    static let pS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PS")
    /// Image `PT`.
    static let pT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PT")
    /// Image `PW`.
    static let pW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PW")
    /// Image `PY`.
    static let pY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "PY")
    /// Image `QA`.
    static let qA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "QA")
    /// Image `RE`.
    static let rE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "RE")
    /// Image `RO`.
    static let rO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "RO")
    /// Image `RS`.
    static let rS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "RS")
    /// Image `RU`.
    static let rU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "RU")
    /// Image `RW`.
    static let rW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "RW")
    /// Image `SA`.
    static let sA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SA")
    /// Image `SB`.
    static let sB = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SB")
    /// Image `SC`.
    static let sC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SC")
    /// Image `SD`.
    static let sD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SD")
    /// Image `SE`.
    static let sE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SE")
    /// Image `SG`.
    static let sG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SG")
    /// Image `SH`.
    static let sH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SH")
    /// Image `SI`.
    static let sI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SI")
    /// Image `SJ`.
    static let sJ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SJ")
    /// Image `SK`.
    static let sK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SK")
    /// Image `SL`.
    static let sL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SL")
    /// Image `SM`.
    static let sM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SM")
    /// Image `SN`.
    static let sN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SN")
    /// Image `SO`.
    static let sO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SO")
    /// Image `SR`.
    static let sR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SR")
    /// Image `SS`.
    static let sS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SS")
    /// Image `ST`.
    static let sT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ST")
    /// Image `SV`.
    static let sV = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SV")
    /// Image `SX`.
    static let sX = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SX")
    /// Image `SY`.
    static let sY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SY")
    /// Image `SZ`.
    static let sZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "SZ")
    /// Image `TA`.
    static let tA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TA")
    /// Image `TC`.
    static let tC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TC")
    /// Image `TD`.
    static let tD = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TD")
    /// Image `TF`.
    static let tF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TF")
    /// Image `TG`.
    static let tG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TG")
    /// Image `TH`.
    static let tH = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TH")
    /// Image `TJ`.
    static let tJ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TJ")
    /// Image `TK`.
    static let tK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TK")
    /// Image `TL`.
    static let tL = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TL")
    /// Image `TM`.
    static let tM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TM")
    /// Image `TN`.
    static let tN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TN")
    /// Image `TO`.
    static let tO = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TO")
    /// Image `TR`.
    static let tR = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TR")
    /// Image `TT`.
    static let tT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TT")
    /// Image `TV`.
    static let tV = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TV")
    /// Image `TW`.
    static let tW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TW")
    /// Image `TZ`.
    static let tZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "TZ")
    /// Image `UA`.
    static let uA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "UA")
    /// Image `UG`.
    static let uG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "UG")
    /// Image `UM`.
    static let uM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "UM")
    /// Image `US`.
    static let uS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "US")
    /// Image `UY`.
    static let uY = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "UY")
    /// Image `UZ`.
    static let uZ = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "UZ")
    /// Image `VA`.
    static let vA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "VA")
    /// Image `VC`.
    static let vC = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "VC")
    /// Image `VE`.
    static let vE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "VE")
    /// Image `VG`.
    static let vG = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "VG")
    /// Image `VI`.
    static let vI = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "VI")
    /// Image `VN`.
    static let vN = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "VN")
    /// Image `VU`.
    static let vU = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "VU")
    /// Image `WF`.
    static let wF = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "WF")
    /// Image `WS`.
    static let wS = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "WS")
    /// Image `XK`.
    static let xK = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "XK")
    /// Image `YE`.
    static let yE = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "YE")
    /// Image `YT`.
    static let yT = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "YT")
    /// Image `ZA`.
    static let zA = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ZA")
    /// Image `ZM`.
    static let zM = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ZM")
    /// Image `ZW`.
    static let zW = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ZW")
    /// Image `ac_icon_back_write`.
    static let ac_icon_back_write = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ac_icon_back_write")
    /// Image `account_email_icon`.
    static let account_email_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_email_icon")
    /// Image `account_feedback_add`.
    static let account_feedback_add = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_feedback_add")
    /// Image `account_feedback_close`.
    static let account_feedback_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_feedback_close")
    /// Image `account_logo`.
    static let account_logo = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_logo")
    /// Image `account_node_seleded`.
    static let account_node_seleded = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_node_seleded")
    /// Image `account_pwd_icon`.
    static let account_pwd_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_pwd_icon")
    /// Image `account_search_icon`.
    static let account_search_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "account_search_icon")
    /// Image `acticity_cell_default`.
    static let acticity_cell_default = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "acticity_cell_default")
    /// Image `activity_edit_delete`.
    static let activity_edit_delete = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "activity_edit_delete")
    /// Image `activity_edit_done`.
    static let activity_edit_done = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "activity_edit_done")
    /// Image `ad_add_new_device_logo`.
    static let ad_add_new_device_logo = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_add_new_device_logo")
    /// Image `ad_disturb_icon`.
    static let ad_disturb_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_disturb_icon")
    /// Image `ad_home_video_bell_disable`.
    static let ad_home_video_bell_disable = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_home_video_bell_disable")
    /// Image `ad_install_turn_vide_session_1`.
    static let ad_install_turn_vide_session_1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_install_turn_vide_session_1")
    /// Image `ad_install_turn_vide_session_2`.
    static let ad_install_turn_vide_session_2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_install_turn_vide_session_2")
    /// Image `ad_install_wifi_none`.
    static let ad_install_wifi_none = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_install_wifi_none")
    /// Image `ad_install_wifi_normail`.
    static let ad_install_wifi_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_install_wifi_normail")
    /// Image `ad_install_wifi_strong`.
    static let ad_install_wifi_strong = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_install_wifi_strong")
    /// Image `ad_install_wifi_weak`.
    static let ad_install_wifi_weak = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_install_wifi_weak")
    /// Image `ad_join_new_device_logo`.
    static let ad_join_new_device_logo = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_join_new_device_logo")
    /// Image `ad_member_detail_header_bg`.
    static let ad_member_detail_header_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "ad_member_detail_header_bg")
    /// Image `add_camera_err_tip_1`.
    static let add_camera_err_tip_1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_camera_err_tip_1")
    /// Image `add_camera_err_tip_2`.
    static let add_camera_err_tip_2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_camera_err_tip_2")
    /// Image `add_camera_err_tip_3`.
    static let add_camera_err_tip_3 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_camera_err_tip_3")
    /// Image `add_camera_frist`.
    static let add_camera_frist = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_camera_frist")
    /// Image `add_device_cb0`.
    static let add_device_cb0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_cb0")
    /// Image `add_device_cb1`.
    static let add_device_cb1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_cb1")
    /// Image `add_device_cb2`.
    static let add_device_cb2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_cb2")
    /// Image `add_device_cg0`.
    static let add_device_cg0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_cg0")
    /// Image `add_device_cg1`.
    static let add_device_cg1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_cg1")
    /// Image `add_device_cg2`.
    static let add_device_cg2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_cg2")
    /// Image `add_device_ck0`.
    static let add_device_ck0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_ck0")
    /// Image `add_device_cs0`.
    static let add_device_cs0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_cs0")
    /// Image `add_device_default`.
    static let add_device_default = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_default")
    /// Image `add_device_join`.
    static let add_device_join = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_device_join")
    /// Image `add_dialog_add_camera`.
    static let add_dialog_add_camera = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_dialog_add_camera")
    /// Image `add_dialog_add_location`.
    static let add_dialog_add_location = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_dialog_add_location")
    /// Image `add_dialog_arrow`.
    static let add_dialog_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_dialog_arrow")
    /// Image `add_dialog_join_camera`.
    static let add_dialog_join_camera = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_dialog_join_camera")
    /// Image `add_new_device_b`.
    static let add_new_device_b = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "add_new_device_b")
    /// Image `added_service_defalut_icon`.
    static let added_service_defalut_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "added_service_defalut_icon")
    /// Image `addlocation_logo`.
    static let addlocation_logo = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "addlocation_logo")
    /// Image `alert_device.gif`.
    static let alert_deviceGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "alert_device.gif")
    /// Image `app_feature_tip`.
    static let app_feature_tip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "app_feature_tip")
    /// Image `app_remove_head_bg`.
    static let app_remove_head_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "app_remove_head_bg")
    /// Image `authorization_arrow_tipImage`.
    static let authorization_arrow_tipImage = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_arrow_tipImage")
    /// Image `authorization_audio_tipImage`.
    static let authorization_audio_tipImage = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_audio_tipImage")
    /// Image `authorization_bluetooth_bg`.
    static let authorization_bluetooth_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_bluetooth_bg")
    /// Image `authorization_camera_tipImage`.
    static let authorization_camera_tipImage = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_camera_tipImage")
    /// Image `authorization_location_icon`.
    static let authorization_location_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_location_icon")
    /// Image `authorization_location_tipImage`.
    static let authorization_location_tipImage = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_location_tipImage")
    /// Image `authorization_photo_tipImage`.
    static let authorization_photo_tipImage = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_photo_tipImage")
    /// Image `authorization_public_bg`.
    static let authorization_public_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_public_bg")
    /// Image `authorization_push`.
    static let authorization_push = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_push")
    /// Image `authorization_switch_tipImage`.
    static let authorization_switch_tipImage = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "authorization_switch_tipImage")
    /// Image `av_content_video_play`.
    static let av_content_video_play = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "av_content_video_play")
    /// Image `av_video_pause`.
    static let av_video_pause = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "av_video_pause")
    /// Image `av_video_play`.
    static let av_video_play = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "av_video_play")
    /// Image `batter_charging`.
    static let batter_charging = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "batter_charging")
    /// Image `bind_camera_guide`.
    static let bind_camera_guide = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_camera_guide")
    /// Image `bind_device_b0_setp1`.
    static let bind_device_b0_setp1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_b0_setp1")
    /// Image `bind_device_b0_setp2`.
    static let bind_device_b0_setp2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_b0_setp2")
    /// Image `bind_device_b1_setp1`.
    static let bind_device_b1_setp1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_b1_setp1")
    /// Image `bind_device_b1_setp2`.
    static let bind_device_b1_setp2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_b1_setp2")
    /// Image `bind_device_channal_2_4g`.
    static let bind_device_channal_2_4g = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_channal_2_4g")
    /// Image `bind_device_channal_5g`.
    static let bind_device_channal_5g = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_channal_5g")
    /// Image `bind_device_g1`.
    static let bind_device_g1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_g1")
    /// Image `bind_device_g2`.
    static let bind_device_g2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_g2")
    /// Image `bind_device_guide_down`.
    static let bind_device_guide_down = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_guide_down")
    /// Image `bind_device_guide_up`.
    static let bind_device_guide_up = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_guide_up")
    /// Image `bind_device_k0_setp1`.
    static let bind_device_k0_setp1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_k0_setp1")
    /// Image `bind_device_k0_setp2`.
    static let bind_device_k0_setp2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_k0_setp2")
    /// Image `bind_device_s0_setp1`.
    static let bind_device_s0_setp1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_s0_setp1")
    /// Image `bind_device_s0_setp2`.
    static let bind_device_s0_setp2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_s0_setp2")
    /// Image `bind_device_un_open1`.
    static let bind_device_un_open1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_un_open1")
    /// Image `bind_device_un_open2`.
    static let bind_device_un_open2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_un_open2")
    /// Image `bind_device_un_open3`.
    static let bind_device_un_open3 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_device_un_open3")
    /// Image `bind_result_bg`.
    static let bind_result_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "bind_result_bg")
    /// Image `checkbox_select`.
    static let checkbox_select = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "checkbox_select")
    /// Image `checkbox_unselect`.
    static let checkbox_unselect = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "checkbox_unselect")
    /// Image `cloud_area`.
    static let cloud_area = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "cloud_area")
    /// Image `cloud_close`.
    static let cloud_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "cloud_close")
    /// Image `cloud_noitication`.
    static let cloud_noitication = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "cloud_noitication")
    /// Image `cloud_recording`.
    static let cloud_recording = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "cloud_recording")
    /// Image `decive_add_guide.gif`.
    static let decive_add_guideGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "decive_add_guide.gif")
    /// Image `del_history_wifi`.
    static let del_history_wifi = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "del_history_wifi")
    /// Image `device_activity_del`.
    static let device_activity_del = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_activity_del")
    /// Image `device_activity_setting`.
    static let device_activity_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_activity_setting")
    /// Image `device_add_sleep_plan`.
    static let device_add_sleep_plan = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_add_sleep_plan")
    /// Image `device_alarm.gif`.
    static let device_alarmGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_alarm.gif")
    /// Image `device_alarm_volume_loud_gray`.
    static let device_alarm_volume_loud_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_alarm_volume_loud_gray")
    /// Image `device_alarm_volume_loud`.
    static let device_alarm_volume_loud = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_alarm_volume_loud")
    /// Image `device_alarm_volume_low_gray`.
    static let device_alarm_volume_low_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_alarm_volume_low_gray")
    /// Image `device_alarm_volume_low`.
    static let device_alarm_volume_low = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_alarm_volume_low")
    /// Image `device_batter_bg_light`.
    static let device_batter_bg_light = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_batter_bg_light")
    /// Image `device_batter_bg`.
    static let device_batter_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_batter_bg")
    /// Image `device_connect_supper`.
    static let device_connect_supper = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_connect_supper")
    /// Image `device_cry_detection_high`.
    static let device_cry_detection_high = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_cry_detection_high")
    /// Image `device_cry_detection_low`.
    static let device_cry_detection_low = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_cry_detection_low")
    /// Image `device_cry_detection_middle`.
    static let device_cry_detection_middle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_cry_detection_middle")
    /// Image `device_edit_icon`.
    static let device_edit_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_edit_icon")
    /// Image `device_feedbackScan_Three`.
    static let device_feedbackScan_Three = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_feedbackScan_Three")
    /// Image `device_feedbackScan_button.gif`.
    static let device_feedbackScan_buttonGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_feedbackScan_button.gif")
    /// Image `device_feedbackScan_one`.
    static let device_feedbackScan_one = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_feedbackScan_one")
    /// Image `device_feedbackScan_two`.
    static let device_feedbackScan_two = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_feedbackScan_two")
    /// Image `device_icon_b0`.
    static let device_icon_b0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_b0")
    /// Image `device_icon_b1`.
    static let device_icon_b1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_b1")
    /// Image `device_icon_b2`.
    static let device_icon_b2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_b2")
    /// Image `device_icon_default`.
    static let device_icon_default = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_default")
    /// Image `device_icon_g0`.
    static let device_icon_g0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_g0")
    /// Image `device_icon_g1`.
    static let device_icon_g1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_g1")
    /// Image `device_icon_g2`.
    static let device_icon_g2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_g2")
    /// Image `device_icon_k0`.
    static let device_icon_k0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_k0")
    /// Image `device_icon_s0`.
    static let device_icon_s0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_icon_s0")
    /// Image `device_light_close`.
    static let device_light_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_light_close")
    /// Image `device_light_open`.
    static let device_light_open = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_light_open")
    /// Image `device_live_fllow_disable`.
    static let device_live_fllow_disable = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_fllow_disable")
    /// Image `device_live_fllow`.
    static let device_live_fllow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_fllow")
    /// Image `device_live_move_fllow`.
    static let device_live_move_fllow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_move_fllow")
    /// Image `device_live_move_follow_disable`.
    static let device_live_move_follow_disable = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_move_follow_disable")
    /// Image `device_live_title_move_alert`.
    static let device_live_title_move_alert = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_title_move_alert")
    /// Image `device_live_wifi_middle`.
    static let device_live_wifi_middle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_wifi_middle")
    /// Image `device_live_wifi_none`.
    static let device_live_wifi_none = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_wifi_none")
    /// Image `device_live_wifi_strong`.
    static let device_live_wifi_strong = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_wifi_strong")
    /// Image `device_live_wifi_week`.
    static let device_live_wifi_week = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_live_wifi_week")
    /// Image `device_location_checked`.
    static let device_location_checked = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_location_checked")
    /// Image `device_location_state`.
    static let device_location_state = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_location_state")
    /// Image `device_manager_nav_add`.
    static let device_manager_nav_add = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_manager_nav_add")
    /// Image `device_manager_no_device`.
    static let device_manager_no_device = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_manager_no_device")
    /// Image `device_manager_no_share_device`.
    static let device_manager_no_share_device = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_manager_no_share_device")
    /// Image `device_more_info_arrow_gray`.
    static let device_more_info_arrow_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_more_info_arrow_gray")
    /// Image `device_more_info_arrow`.
    static let device_more_info_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_more_info_arrow")
    /// Image `device_offline_state`.
    static let device_offline_state = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_offline_state")
    /// Image `device_power_double.gif`.
    static let device_power_doubleGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_double.gif")
    /// Image `device_power_double_press`.
    static let device_power_double_press = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_double_press")
    /// Image `device_power_long_cn.gif`.
    static let device_power_long_cnGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_long_cn.gif")
    /// Image `device_power_long_en.gif`.
    static let device_power_long_enGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_long_en.gif")
    /// Image `device_power_long_ja.gif`.
    static let device_power_long_jaGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_long_ja.gif")
    /// Image `device_power_long_press`.
    static let device_power_long_press = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_long_press")
    /// Image `device_power_on_ hand`.
    static let device_power_on_Hand = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_on_ hand")
    /// Image `device_power_on_icon_bg`.
    static let device_power_on_icon_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_on_icon_bg")
    /// Image `device_power_on_icon`.
    static let device_power_on_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_power_on_icon")
    /// Image `device_preset_location.gif`.
    static let device_preset_locationGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_preset_location.gif")
    /// Image `device_preset_location`.
    static let device_preset_location = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_preset_location")
    /// Image `device_sd_indicator`.
    static let device_sd_indicator = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_sd_indicator")
    /// Image `device_send_alert`.
    static let device_send_alert = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_send_alert")
    /// Image `device_set_activity_zones`.
    static let device_set_activity_zones = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_activity_zones")
    /// Image `device_set_advanced_info`.
    static let device_set_advanced_info = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_advanced_info")
    /// Image `device_set_firmware_info`.
    static let device_set_firmware_info = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_firmware_info")
    /// Image `device_set_light`.
    static let device_set_light = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_light")
    /// Image `device_set_motion_detection`.
    static let device_set_motion_detection = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_motion_detection")
    /// Image `device_set_push`.
    static let device_set_push = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_push")
    /// Image `device_set_sd_video`.
    static let device_set_sd_video = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_sd_video")
    /// Image `device_set_sd`.
    static let device_set_sd = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_sd")
    /// Image `device_set_share`.
    static let device_set_share = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_share")
    /// Image `device_set_sleep`.
    static let device_set_sleep = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_sleep")
    /// Image `device_set_sound`.
    static let device_set_sound = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_set_sound")
    /// Image `device_share_add_guide`.
    static let device_share_add_guide = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_share_add_guide")
    /// Image `device_share_guide_2`.
    static let device_share_guide_2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_share_guide_2")
    /// Image `device_share_guide_3`.
    static let device_share_guide_3 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_share_guide_3")
    /// Image `device_share_permission`.
    static let device_share_permission = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_share_permission")
    /// Image `device_sleep_plan_add`.
    static let device_sleep_plan_add = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_sleep_plan_add")
    /// Image `device_sleep_plan_error`.
    static let device_sleep_plan_error = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_sleep_plan_error")
    /// Image `device_sleep_plan_off`.
    static let device_sleep_plan_off = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_sleep_plan_off")
    /// Image `device_sleep_plan`.
    static let device_sleep_plan = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_sleep_plan")
    /// Image `device_sleep_set`.
    static let device_sleep_set = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_sleep_set")
    /// Image `device_sn_guide`.
    static let device_sn_guide = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_sn_guide")
    /// Image `device_speaker_volume_loud`.
    static let device_speaker_volume_loud = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_speaker_volume_loud")
    /// Image `device_speaker_volume_low`.
    static let device_speaker_volume_low = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_speaker_volume_low")
    /// Image `device_speaker_volume_mute`.
    static let device_speaker_volume_mute = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_speaker_volume_mute")
    /// Image `device_state_tip`.
    static let device_state_tip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_state_tip")
    /// Image `device_temp_qr`.
    static let device_temp_qr = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_temp_qr")
    /// Image `device_update_loading_icon`.
    static let device_update_loading_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_update_loading_icon")
    /// Image `device_update_version`.
    static let device_update_version = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_update_version")
    /// Image `device_wait_progress_error_bg`.
    static let device_wait_progress_error_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wait_progress_error_bg")
    /// Image `device_wifi_look`.
    static let device_wifi_look = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_look")
    /// Image `device_wifi_middle`.
    static let device_wifi_middle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_middle")
    /// Image `device_wifi_none`.
    static let device_wifi_none = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_none")
    /// Image `device_wifi_secure`.
    static let device_wifi_secure = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_secure")
    /// Image `device_wifi_state_middle`.
    static let device_wifi_state_middle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_state_middle")
    /// Image `device_wifi_state_none`.
    static let device_wifi_state_none = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_state_none")
    /// Image `device_wifi_state_strong`.
    static let device_wifi_state_strong = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_state_strong")
    /// Image `device_wifi_state_weak`.
    static let device_wifi_state_weak = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_state_weak")
    /// Image `device_wifi_strong`.
    static let device_wifi_strong = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_strong")
    /// Image `device_wifi_tip`.
    static let device_wifi_tip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_tip")
    /// Image `device_wifi_week`.
    static let device_wifi_week = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_wifi_week")
    /// Image `device_zendesk_chat`.
    static let device_zendesk_chat = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "device_zendesk_chat")
    /// Image `devices_motion`.
    static let devices_motion = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "devices_motion")
    /// Image `edit_location_delete`.
    static let edit_location_delete = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "edit_location_delete")
    /// Image `edit_location_done`.
    static let edit_location_done = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "edit_location_done")
    /// Image `edit_location_icon`.
    static let edit_location_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "edit_location_icon")
    /// Image `explore_loading_error`.
    static let explore_loading_error = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "explore_loading_error")
    /// Image `failed_get_inform`.
    static let failed_get_inform = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "failed_get_inform")
    /// Image `feedback_system`.
    static let feedback_system = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "feedback_system")
    /// Image `feedback_user`.
    static let feedback_user = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "feedback_user")
    /// Image `filter_selected_camera_icon`.
    static let filter_selected_camera_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "filter_selected_camera_icon")
    /// Image `filter_tag_camera_icon`.
    static let filter_tag_camera_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "filter_tag_camera_icon")
    /// Image `filter_tag_dis_select_icon`.
    static let filter_tag_dis_select_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "filter_tag_dis_select_icon")
    /// Image `filter_tag_select_icon`.
    static let filter_tag_select_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "filter_tag_select_icon")
    /// Image `getting_wifi.gif`.
    static let getting_wifiGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "getting_wifi.gif")
    /// Image `guest_request_close`.
    static let guest_request_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guest_request_close")
    /// Image `guest_request_device_name`.
    static let guest_request_device_name = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guest_request_device_name")
    /// Image `guest_request_nick_name`.
    static let guest_request_nick_name = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guest_request_nick_name")
    /// Image `guest_request_permissions`.
    static let guest_request_permissions = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guest_request_permissions")
    /// Image `guest_request_title`.
    static let guest_request_title = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guest_request_title")
    /// Image `guide_step1.gif`.
    static let guide_step1Gif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guide_step1.gif")
    /// Image `guide_step2.gif`.
    static let guide_step2Gif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guide_step2.gif")
    /// Image `guide_step3.gif`.
    static let guide_step3Gif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "guide_step3.gif")
    /// Image `home_device_alert`.
    static let home_device_alert = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_alert")
    /// Image `home_device_auto_fllow_default`.
    static let home_device_auto_fllow_default = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_auto_fllow_default")
    /// Image `home_device_auto_fllow`.
    static let home_device_auto_fllow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_auto_fllow")
    /// Image `home_device_auto_move_default`.
    static let home_device_auto_move_default = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_auto_move_default")
    /// Image `home_device_auto_move_fllow`.
    static let home_device_auto_move_fllow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_auto_move_fllow")
    /// Image `home_device_edit_modle`.
    static let home_device_edit_modle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_edit_modle")
    /// Image `home_device_live_edit_modle`.
    static let home_device_live_edit_modle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_live_edit_modle")
    /// Image `home_device_location`.
    static let home_device_location = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_location")
    /// Image `home_device_more`.
    static let home_device_more = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_more")
    /// Image `home_device_preset_add`.
    static let home_device_preset_add = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_preset_add")
    /// Image `home_device_preset_close`.
    static let home_device_preset_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_preset_close")
    /// Image `home_device_preset_remove`.
    static let home_device_preset_remove = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_preset_remove")
    /// Image `home_device_voice_disable`.
    static let home_device_voice_disable = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_voice_disable")
    /// Image `home_device_voice_enable`.
    static let home_device_voice_enable = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_voice_enable")
    /// Image `home_device_white_close`.
    static let home_device_white_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_white_close")
    /// Image `home_device_white_open`.
    static let home_device_white_open = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_device_white_open")
    /// Image `home_error_close`.
    static let home_error_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_error_close")
    /// Image `home_libary_header_delete`.
    static let home_libary_header_delete = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_libary_header_delete")
    /// Image `home_libary_no_data`.
    static let home_libary_no_data = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_libary_no_data")
    /// Image `home_play_bottom_shard_bg`.
    static let home_play_bottom_shard_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_play_bottom_shard_bg")
    /// Image `home_report_log`.
    static let home_report_log = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_report_log")
    /// Image `home_rocker_drag_bg`.
    static let home_rocker_drag_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_rocker_drag_bg")
    /// Image `home_rocker_drag_light_bg`.
    static let home_rocker_drag_light_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_rocker_drag_light_bg")
    /// Image `home_rocker_drag`.
    static let home_rocker_drag = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_rocker_drag")
    /// Image `home_rocker_light_drag`.
    static let home_rocker_light_drag = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_rocker_light_drag")
    /// Image `home_sleep_plan`.
    static let home_sleep_plan = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_sleep_plan")
    /// Image `home_temp_image`.
    static let home_temp_image = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_temp_image")
    /// Image `home_user_info_about_setting`.
    static let home_user_info_about_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_about_setting")
    /// Image `home_user_info_add_device`.
    static let home_user_info_add_device = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_add_device")
    /// Image `home_user_info_added_service`.
    static let home_user_info_added_service = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_added_service")
    /// Image `home_user_info_arrow`.
    static let home_user_info_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_arrow")
    /// Image `home_user_info_device_setting`.
    static let home_user_info_device_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_device_setting")
    /// Image `home_user_info_edit_button`.
    static let home_user_info_edit_button = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_edit_button")
    /// Image `home_user_info_faq`.
    static let home_user_info_faq = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_faq")
    /// Image `home_user_info_feedback`.
    static let home_user_info_feedback = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_feedback")
    /// Image `home_user_info_help_setting`.
    static let home_user_info_help_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_help_setting")
    /// Image `home_user_info_language_setting`.
    static let home_user_info_language_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_language_setting")
    /// Image `home_user_info_location_setting`.
    static let home_user_info_location_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_user_info_location_setting")
    /// Image `home_video_cell_add`.
    static let home_video_cell_add = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_video_cell_add")
    /// Image `home_video_loading`.
    static let home_video_loading = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_video_loading")
    /// Image `home_video_location_arrow`.
    static let home_video_location_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_video_location_arrow")
    /// Image `home_video_location_icon`.
    static let home_video_location_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_video_location_icon")
    /// Image `home_video_speak`.
    static let home_video_speak = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "home_video_speak")
    /// Image `homepage_explore_select`.
    static let homepage_explore_select = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_explore_select")
    /// Image `homepage_explore`.
    static let homepage_explore = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_explore")
    /// Image `homepage_head_add`.
    static let homepage_head_add = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_head_add")
    /// Image `homepage_head_arrow`.
    static let homepage_head_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_head_arrow")
    /// Image `homepage_head_menus`.
    static let homepage_head_menus = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_head_menus")
    /// Image `homepage_head_split`.
    static let homepage_head_split = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_head_split")
    /// Image `homepage_libary_select`.
    static let homepage_libary_select = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_libary_select")
    /// Image `homepage_libary`.
    static let homepage_libary = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_libary")
    /// Image `homepage_user_select`.
    static let homepage_user_select = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_user_select")
    /// Image `homepage_user`.
    static let homepage_user = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_user")
    /// Image `homepage_video_select`.
    static let homepage_video_select = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_video_select")
    /// Image `homepage_video`.
    static let homepage_video = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "homepage_video")
    /// Image `icon_back_blue`.
    static let icon_back_blue = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "icon_back_blue")
    /// Image `icon_back_gray`.
    static let icon_back_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "icon_back_gray")
    /// Image `icon_back_write`.
    static let icon_back_write = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "icon_back_write")
    /// Image `icon_country_default`.
    static let icon_country_default = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "icon_country_default")
    /// Image `icon_history_wifi`.
    static let icon_history_wifi = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "icon_history_wifi")
    /// Image `icon_share_quit`.
    static let icon_share_quit = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "icon_share_quit")
    /// Image `image_defalult.gif`.
    static let image_defalultGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "image_defalult.gif")
    /// Image `img_0`.
    static let img_0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "img_0")
    /// Image `join_device_bottom_left`.
    static let join_device_bottom_left = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "join_device_bottom_left")
    /// Image `join_device_bottom_right`.
    static let join_device_bottom_right = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "join_device_bottom_right")
    /// Image `join_device_qrcode_error`.
    static let join_device_qrcode_error = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "join_device_qrcode_error")
    /// Image `join_device_scan_animail`.
    static let join_device_scan_animail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "join_device_scan_animail")
    /// Image `join_device_scan_wait_image`.
    static let join_device_scan_wait_image = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "join_device_scan_wait_image")
    /// Image `join_device_scan`.
    static let join_device_scan = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "join_device_scan")
    /// Image `live_alert_icon`.
    static let live_alert_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_alert_icon")
    /// Image `live_night_white_loading`.
    static let live_night_white_loading = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_night_white_loading")
    /// Image `live_video_loading`.
    static let live_video_loading = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_loading")
    /// Image `live_video_micro`.
    static let live_video_micro = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_micro")
    /// Image `live_video_more_menu_quit`.
    static let live_video_more_menu_quit = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_more_menu_quit")
    /// Image `live_video_more`.
    static let live_video_more = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_more")
    /// Image `live_video_question`.
    static let live_video_question = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_question")
    /// Image `live_video_record_normail`.
    static let live_video_record_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_record_normail")
    /// Image `live_video_record_selected`.
    static let live_video_record_selected = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_record_selected")
    /// Image `live_video_reset_location`.
    static let live_video_reset_location = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_reset_location")
    /// Image `live_video_setting`.
    static let live_video_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_setting")
    /// Image `live_video_sharp_1080p`.
    static let live_video_sharp_1080p = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_sharp_1080p")
    /// Image `live_video_sharp_480p`.
    static let live_video_sharp_480p = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_sharp_480p")
    /// Image `live_video_sharp_720p`.
    static let live_video_sharp_720p = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_sharp_720p")
    /// Image `live_video_sharp_auto`.
    static let live_video_sharp_auto = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_sharp_auto")
    /// Image `live_video_sharp`.
    static let live_video_sharp = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_sharp")
    /// Image `live_video_speaking`.
    static let live_video_speaking = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_speaking")
    /// Image `live_video_wifi_middle`.
    static let live_video_wifi_middle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_wifi_middle")
    /// Image `live_video_wifi_none`.
    static let live_video_wifi_none = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_wifi_none")
    /// Image `live_video_wifi_strong`.
    static let live_video_wifi_strong = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_wifi_strong")
    /// Image `live_video_wifi_week`.
    static let live_video_wifi_week = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_wifi_week")
    /// Image `live_video_wlan`.
    static let live_video_wlan = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "live_video_wlan")
    /// Image `location_back_door`.
    static let location_back_door = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_back_door")
    /// Image `location_bedroom`.
    static let location_bedroom = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_bedroom")
    /// Image `location_front_door`.
    static let location_front_door = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_front_door")
    /// Image `location_garden`.
    static let location_garden = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_garden")
    /// Image `location_livingroom`.
    static let location_livingroom = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_livingroom")
    /// Image `location_manager_edit`.
    static let location_manager_edit = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_manager_edit")
    /// Image `location_no_tip`.
    static let location_no_tip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_no_tip")
    /// Image `location_office`.
    static let location_office = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_office")
    /// Image `location_position`.
    static let location_position = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "location_position")
    /// Image `main_libary_camera_icon`.
    static let main_libary_camera_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_camera_icon")
    /// Image `main_libary_cry`.
    static let main_libary_cry = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_cry")
    /// Image `main_libary_filter`.
    static let main_libary_filter = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_filter")
    /// Image `main_libary_manager`.
    static let main_libary_manager = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_manager")
    /// Image `main_libary_mark_icon`.
    static let main_libary_mark_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_mark_icon")
    /// Image `main_libary_movement_icon`.
    static let main_libary_movement_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_movement_icon")
    /// Image `main_libary_package_detained`.
    static let main_libary_package_detained = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_package_detained")
    /// Image `main_libary_package_down`.
    static let main_libary_package_down = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_package_down")
    /// Image `main_libary_package_gray`.
    static let main_libary_package_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_package_gray")
    /// Image `main_libary_package_up`.
    static let main_libary_package_up = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_package_up")
    /// Image `main_libary_package`.
    static let main_libary_package = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_package")
    /// Image `main_libary_people_gray`.
    static let main_libary_people_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_people_gray")
    /// Image `main_libary_people`.
    static let main_libary_people = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_people")
    /// Image `main_libary_pet_gray`.
    static let main_libary_pet_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_pet_gray")
    /// Image `main_libary_pet`.
    static let main_libary_pet = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_pet")
    /// Image `main_libary_red`.
    static let main_libary_red = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_red")
    /// Image `main_libary_small_package`.
    static let main_libary_small_package = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_small_package")
    /// Image `main_libary_small_people`.
    static let main_libary_small_people = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_small_people")
    /// Image `main_libary_small_pet`.
    static let main_libary_small_pet = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_small_pet")
    /// Image `main_libary_small_vehicle`.
    static let main_libary_small_vehicle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_small_vehicle")
    /// Image `main_libary_unmark_mark_icon`.
    static let main_libary_unmark_mark_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_unmark_mark_icon")
    /// Image `main_libary_unread_icon`.
    static let main_libary_unread_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_unread_icon")
    /// Image `main_libary_vehicle_gray`.
    static let main_libary_vehicle_gray = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_vehicle_gray")
    /// Image `main_libary_vehicle`.
    static let main_libary_vehicle = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_vehicle")
    /// Image `main_libary_video_icon`.
    static let main_libary_video_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "main_libary_video_icon")
    /// Image `memberVip_more_arrow`.
    static let memberVip_more_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "memberVip_more_arrow")
    /// Image `member_CollarSuccess_normail`.
    static let member_CollarSuccess_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_CollarSuccess_normail")
    /// Image `member_ReceiveCoupon_normail`.
    static let member_ReceiveCoupon_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_ReceiveCoupon_normail")
    /// Image `member_check_icon`.
    static let member_check_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_check_icon")
    /// Image `member_coupons_normail`.
    static let member_coupons_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_coupons_normail")
    /// Image `member_detail_cloud_normail`.
    static let member_detail_cloud_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_cloud_normail")
    /// Image `member_detail_cloud_vip`.
    static let member_detail_cloud_vip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_cloud_vip")
    /// Image `member_detail_cloud`.
    static let member_detail_cloud = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_cloud")
    /// Image `member_detail_feature_has`.
    static let member_detail_feature_has = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_feature_has")
    /// Image `member_detail_feature_none`.
    static let member_detail_feature_none = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_feature_none")
    /// Image `member_detail_feature`.
    static let member_detail_feature = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_feature")
    /// Image `member_detail_smart_normail`.
    static let member_detail_smart_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_smart_normail")
    /// Image `member_detail_smart_vip`.
    static let member_detail_smart_vip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_smart_vip")
    /// Image `member_detail_smart`.
    static let member_detail_smart = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_smart")
    /// Image `member_detail_tip`.
    static let member_detail_tip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_tip")
    /// Image `member_detail_vip_icon`.
    static let member_detail_vip_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_vip_icon")
    /// Image `member_detail_zone_normail`.
    static let member_detail_zone_normail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_zone_normail")
    /// Image `member_detail_zone_vip`.
    static let member_detail_zone_vip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_zone_vip")
    /// Image `member_detail_zone`.
    static let member_detail_zone = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_detail_zone")
    /// Image `member_header_arrow`.
    static let member_header_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_header_arrow")
    /// Image `member_header_bg`.
    static let member_header_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_header_bg")
    /// Image `member_header_bottom_bg`.
    static let member_header_bottom_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_header_bottom_bg")
    /// Image `member_header_cloud`.
    static let member_header_cloud = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_header_cloud")
    /// Image `member_header_ordinary_bg`.
    static let member_header_ordinary_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_header_ordinary_bg")
    /// Image `member_header_tip_image`.
    static let member_header_tip_image = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_header_tip_image")
    /// Image `member_more_info_arrow`.
    static let member_more_info_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_more_info_arrow")
    /// Image `member_par_wait_icon`.
    static let member_par_wait_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_par_wait_icon")
    /// Image `member_pay_momo`.
    static let member_pay_momo = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_pay_momo")
    /// Image `member_pay_mpesa`.
    static let member_pay_mpesa = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_pay_mpesa")
    /// Image `member_pay_scuess`.
    static let member_pay_scuess = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_pay_scuess")
    /// Image `member_plan_select`.
    static let member_plan_select = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_plan_select")
    /// Image `member_progress_header_bg`.
    static let member_progress_header_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "member_progress_header_bg")
    /// Image `motion_tracking_help`.
    static let motion_tracking_help = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "motion_tracking_help")
    /// Image `nav_add_device_right`.
    static let nav_add_device_right = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "nav_add_device_right")
    /// Image `nav_menu_add_device`.
    static let nav_menu_add_device = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "nav_menu_add_device")
    /// Image `nav_menu_add_friend_device`.
    static let nav_menu_add_friend_device = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "nav_menu_add_friend_device")
    /// Image `no_move_location`.
    static let no_move_location = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "no_move_location")
    /// Image `no_net_warming`.
    static let no_net_warming = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "no_net_warming")
    /// Image `no_wifi_connet_tip`.
    static let no_wifi_connet_tip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "no_wifi_connet_tip")
    /// Image `notication_ai_filter`.
    static let notication_ai_filter = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "notication_ai_filter")
    /// Image `notification_human`.
    static let notification_human = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "notification_human")
    /// Image `notification_uncheck`.
    static let notification_uncheck = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "notification_uncheck")
    /// Image `notification_warning`.
    static let notification_warning = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "notification_warning")
    /// Image `package_guide_1`.
    static let package_guide_1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "package_guide_1")
    /// Image `package_guide_2`.
    static let package_guide_2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "package_guide_2")
    /// Image `package_guide_3`.
    static let package_guide_3 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "package_guide_3")
    /// Image `pay_free.gif`.
    static let pay_freeGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "pay_free.gif")
    /// Image `press_down`.
    static let press_down = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "press_down")
    /// Image `qrcode_back`.
    static let qrcode_back = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "qrcode_back")
    /// Image `qrcode_scuess`.
    static let qrcode_scuess = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "qrcode_scuess")
    /// Image `qrcode_voice.gif`.
    static let qrcode_voiceGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "qrcode_voice.gif")
    /// Image `rember_voice_check_select`.
    static let rember_voice_check_select = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "rember_voice_check_select")
    /// Image `rember_voice_check_unselect`.
    static let rember_voice_check_unselect = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "rember_voice_check_unselect")
    /// Image `remember_wifi_intro_info`.
    static let remember_wifi_intro_info = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "remember_wifi_intro_info")
    /// Image `resouce_bottom_delete`.
    static let resouce_bottom_delete = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "resouce_bottom_delete")
    /// Image `resouce_bottom_download`.
    static let resouce_bottom_download = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "resouce_bottom_download")
    /// Image `resouce_bottom_share`.
    static let resouce_bottom_share = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "resouce_bottom_share")
    /// Image `scan_gallery`.
    static let scan_gallery = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_gallery")
    /// Image `scan_qr_code_cn.gif`.
    static let scan_qr_code_cnGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qr_code_cn.gif")
    /// Image `scan_qr_code_en.gif`.
    static let scan_qr_code_enGif = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qr_code_en.gif")
    /// Image `scan_qrcode_voice_0`.
    static let scan_qrcode_voice_0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qrcode_voice_0")
    /// Image `scan_qrcode_voice_1`.
    static let scan_qrcode_voice_1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qrcode_voice_1")
    /// Image `scan_qrcode_voice_2`.
    static let scan_qrcode_voice_2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qrcode_voice_2")
    /// Image `scan_qrcode_voice_3`.
    static let scan_qrcode_voice_3 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qrcode_voice_3")
    /// Image `scan_qrcode_voice_type1`.
    static let scan_qrcode_voice_type1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qrcode_voice_type1")
    /// Image `scan_qrcode_voice_type2`.
    static let scan_qrcode_voice_type2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "scan_qrcode_voice_type2")
    /// Image `sd_car_error_format`.
    static let sd_car_error_format = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_car_error_format")
    /// Image `sd_car_error_tip`.
    static let sd_car_error_tip = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_car_error_tip")
    /// Image `sd_format_fail`.
    static let sd_format_fail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_format_fail")
    /// Image `sd_format_scuess`.
    static let sd_format_scuess = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_format_scuess")
    /// Image `sd_format_smail`.
    static let sd_format_smail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_format_smail")
    /// Image `sd_list_error`.
    static let sd_list_error = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_list_error")
    /// Image `sd_play_error`.
    static let sd_play_error = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_play_error")
    /// Image `sd_play_no_net`.
    static let sd_play_no_net = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_play_no_net")
    /// Image `sd_play_timeout`.
    static let sd_play_timeout = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_play_timeout")
    /// Image `sd_video_error`.
    static let sd_video_error = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_video_error")
    /// Image `sd_video_timeout`.
    static let sd_video_timeout = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "sd_video_timeout")
    /// Image `select_place_close`.
    static let select_place_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "select_place_close")
    /// Image `slider_indicator`.
    static let slider_indicator = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "slider_indicator")
    /// Image `slider_max`.
    static let slider_max = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "slider_max")
    /// Image `slider_min`.
    static let slider_min = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "slider_min")
    /// Image `slider_thumb`.
    static let slider_thumb = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "slider_thumb")
    /// Image `smail_device_icon_b0`.
    static let smail_device_icon_b0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_b0")
    /// Image `smail_device_icon_b1`.
    static let smail_device_icon_b1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_b1")
    /// Image `smail_device_icon_b2`.
    static let smail_device_icon_b2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_b2")
    /// Image `smail_device_icon_g0`.
    static let smail_device_icon_g0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_g0")
    /// Image `smail_device_icon_g1`.
    static let smail_device_icon_g1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_g1")
    /// Image `smail_device_icon_g2`.
    static let smail_device_icon_g2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_g2")
    /// Image `smail_device_icon_k0`.
    static let smail_device_icon_k0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_k0")
    /// Image `smail_device_icon_s0`.
    static let smail_device_icon_s0 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "smail_device_icon_s0")
    /// Image `speak_tip_icon`.
    static let speak_tip_icon = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "speak_tip_icon")
    /// Image `textfield_clear_button`.
    static let textfield_clear_button = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "textfield_clear_button")
    /// Image `time_change_big`.
    static let time_change_big = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "time_change_big")
    /// Image `time_change_smail`.
    static let time_change_smail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "time_change_smail")
    /// Image `title_move_alert`.
    static let title_move_alert = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "title_move_alert")
    /// Image `toast_close`.
    static let toast_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "toast_close")
    /// Image `user_guide_1`.
    static let user_guide_1 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "user_guide_1")
    /// Image `user_guide_2`.
    static let user_guide_2 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "user_guide_2")
    /// Image `user_guide_3`.
    static let user_guide_3 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "user_guide_3")
    /// Image `user_guide_4`.
    static let user_guide_4 = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "user_guide_4")
    /// Image `user_login_bg`.
    static let user_login_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "user_login_bg")
    /// Image `user_member_auto_pay`.
    static let user_member_auto_pay = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "user_member_auto_pay")
    /// Image `video_add_members`.
    static let video_add_members = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_add_members")
    /// Image `video_connect_access`.
    static let video_connect_access = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_connect_access")
    /// Image `video_connect_device_offline`.
    static let video_connect_device_offline = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_connect_device_offline")
    /// Image `video_connect_fail`.
    static let video_connect_fail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_connect_fail")
    /// Image `video_connect_network`.
    static let video_connect_network = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_connect_network")
    /// Image `video_connect_time_out`.
    static let video_connect_time_out = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_connect_time_out")
    /// Image `video_exit_full_screen`.
    static let video_exit_full_screen = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_exit_full_screen")
    /// Image `video_feedback_dog`.
    static let video_feedback_dog = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_feedback_dog")
    /// Image `video_feedback_no_tag`.
    static let video_feedback_no_tag = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_feedback_no_tag")
    /// Image `video_feedback_people`.
    static let video_feedback_people = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_feedback_people")
    /// Image `video_feedback_selected`.
    static let video_feedback_selected = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_feedback_selected")
    /// Image `video_full_bg`.
    static let video_full_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_full_bg")
    /// Image `video_full_screen`.
    static let video_full_screen = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_full_screen")
    /// Image `video_input_feedback_selected`.
    static let video_input_feedback_selected = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_input_feedback_selected")
    /// Image `video_live_screen_shot`.
    static let video_live_screen_shot = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_live_screen_shot")
    /// Image `video_live_speak`.
    static let video_live_speak = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_live_speak")
    /// Image `video_live_volume_mute`.
    static let video_live_volume_mute = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_live_volume_mute")
    /// Image `video_live_volume`.
    static let video_live_volume = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_live_volume")
    /// Image `video_live_warning`.
    static let video_live_warning = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_live_warning")
    /// Image `video_loading_error`.
    static let video_loading_error = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_loading_error")
    /// Image `video_members`.
    static let video_members = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_members")
    /// Image `video_pause_smail`.
    static let video_pause_smail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_pause_smail")
    /// Image `video_pause`.
    static let video_pause = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_pause")
    /// Image `video_play_bottom_shard_bg`.
    static let video_play_bottom_shard_bg = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_play_bottom_shard_bg")
    /// Image `video_play_smail`.
    static let video_play_smail = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_play_smail")
    /// Image `video_play_top_share`.
    static let video_play_top_share = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_play_top_share")
    /// Image `video_play`.
    static let video_play = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_play")
    /// Image `video_replay`.
    static let video_replay = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_replay")
    /// Image `video_setting`.
    static let video_setting = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_setting")
    /// Image `video_sharp_arrow`.
    static let video_sharp_arrow = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_sharp_arrow")
    /// Image `video_volume_mute`.
    static let video_volume_mute = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_volume_mute")
    /// Image `video_volume`.
    static let video_volume = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "video_volume")
    /// Image `wait_connect`.
    static let wait_connect = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "wait_connect")
    /// Image `weak_wifi_warning_close`.
    static let weak_wifi_warning_close = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "weak_wifi_warning_close")
    /// Image `weak_wifi_warning`.
    static let weak_wifi_warning = Rswift.ImageResource(bundle: R.hostingBundle ?? R.hostingBundle_defalut, name: "weak_wifi_warning")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AC", bundle: ..., traitCollection: ...)`
    static func aC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AD", bundle: ..., traitCollection: ...)`
    static func aD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AE", bundle: ..., traitCollection: ...)`
    static func aE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AF", bundle: ..., traitCollection: ...)`
    static func aF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AG", bundle: ..., traitCollection: ...)`
    static func aG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AI", bundle: ..., traitCollection: ...)`
    static func aI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AL", bundle: ..., traitCollection: ...)`
    static func aL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AM", bundle: ..., traitCollection: ...)`
    static func aM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AO", bundle: ..., traitCollection: ...)`
    static func aO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AQ", bundle: ..., traitCollection: ...)`
    static func aQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aQ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR", bundle: ..., traitCollection: ...)`
    static func aR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AS", bundle: ..., traitCollection: ...)`
    static func aS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AT", bundle: ..., traitCollection: ...)`
    static func aT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AU", bundle: ..., traitCollection: ...)`
    static func aU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AW", bundle: ..., traitCollection: ...)`
    static func aW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AX", bundle: ..., traitCollection: ...)`
    static func aX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AZ", bundle: ..., traitCollection: ...)`
    static func aZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BA", bundle: ..., traitCollection: ...)`
    static func bA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BB", bundle: ..., traitCollection: ...)`
    static func bB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BD", bundle: ..., traitCollection: ...)`
    static func bD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BE", bundle: ..., traitCollection: ...)`
    static func bE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BF", bundle: ..., traitCollection: ...)`
    static func bF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BG", bundle: ..., traitCollection: ...)`
    static func bG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BH", bundle: ..., traitCollection: ...)`
    static func bH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BI", bundle: ..., traitCollection: ...)`
    static func bI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BJ", bundle: ..., traitCollection: ...)`
    static func bJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BL", bundle: ..., traitCollection: ...)`
    static func bL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BM", bundle: ..., traitCollection: ...)`
    static func bM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BN", bundle: ..., traitCollection: ...)`
    static func bN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BO", bundle: ..., traitCollection: ...)`
    static func bO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BQ", bundle: ..., traitCollection: ...)`
    static func bQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bQ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BR", bundle: ..., traitCollection: ...)`
    static func bR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BS", bundle: ..., traitCollection: ...)`
    static func bS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BT", bundle: ..., traitCollection: ...)`
    static func bT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BW", bundle: ..., traitCollection: ...)`
    static func bW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BY", bundle: ..., traitCollection: ...)`
    static func bY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BZ", bundle: ..., traitCollection: ...)`
    static func bZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CA", bundle: ..., traitCollection: ...)`
    static func cA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CC", bundle: ..., traitCollection: ...)`
    static func cC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CD", bundle: ..., traitCollection: ...)`
    static func cD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CF", bundle: ..., traitCollection: ...)`
    static func cF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CG", bundle: ..., traitCollection: ...)`
    static func cG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CH", bundle: ..., traitCollection: ...)`
    static func cH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CI", bundle: ..., traitCollection: ...)`
    static func cI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CK", bundle: ..., traitCollection: ...)`
    static func cK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CL", bundle: ..., traitCollection: ...)`
    static func cL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CM", bundle: ..., traitCollection: ...)`
    static func cM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CN", bundle: ..., traitCollection: ...)`
    static func cN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CO", bundle: ..., traitCollection: ...)`
    static func cO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CR", bundle: ..., traitCollection: ...)`
    static func cR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CU", bundle: ..., traitCollection: ...)`
    static func cU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CV", bundle: ..., traitCollection: ...)`
    static func cV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cV, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CW", bundle: ..., traitCollection: ...)`
    static func cW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CX", bundle: ..., traitCollection: ...)`
    static func cX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CY", bundle: ..., traitCollection: ...)`
    static func cY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CZ", bundle: ..., traitCollection: ...)`
    static func cZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DE", bundle: ..., traitCollection: ...)`
    static func dE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DG", bundle: ..., traitCollection: ...)`
    static func dG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DJ", bundle: ..., traitCollection: ...)`
    static func dJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DK", bundle: ..., traitCollection: ...)`
    static func dK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DM", bundle: ..., traitCollection: ...)`
    static func dM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DO", bundle: ..., traitCollection: ...)`
    static func dO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DZ", bundle: ..., traitCollection: ...)`
    static func dZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EA", bundle: ..., traitCollection: ...)`
    static func eA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EC", bundle: ..., traitCollection: ...)`
    static func eC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EE", bundle: ..., traitCollection: ...)`
    static func eE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EG", bundle: ..., traitCollection: ...)`
    static func eG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EH", bundle: ..., traitCollection: ...)`
    static func eH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ER", bundle: ..., traitCollection: ...)`
    static func eR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ES", bundle: ..., traitCollection: ...)`
    static func eS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ET", bundle: ..., traitCollection: ...)`
    static func eT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FI", bundle: ..., traitCollection: ...)`
    static func fI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FJ", bundle: ..., traitCollection: ...)`
    static func fJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FK", bundle: ..., traitCollection: ...)`
    static func fK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FM", bundle: ..., traitCollection: ...)`
    static func fM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FO", bundle: ..., traitCollection: ...)`
    static func fO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FR", bundle: ..., traitCollection: ...)`
    static func fR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GA", bundle: ..., traitCollection: ...)`
    static func gA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB", bundle: ..., traitCollection: ...)`
    static func gB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GD", bundle: ..., traitCollection: ...)`
    static func gD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GE", bundle: ..., traitCollection: ...)`
    static func gE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GF", bundle: ..., traitCollection: ...)`
    static func gF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GG", bundle: ..., traitCollection: ...)`
    static func gG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GH", bundle: ..., traitCollection: ...)`
    static func gH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GI", bundle: ..., traitCollection: ...)`
    static func gI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GL", bundle: ..., traitCollection: ...)`
    static func gL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GM", bundle: ..., traitCollection: ...)`
    static func gM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GN", bundle: ..., traitCollection: ...)`
    static func gN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GP", bundle: ..., traitCollection: ...)`
    static func gP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GQ", bundle: ..., traitCollection: ...)`
    static func gQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gQ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GR", bundle: ..., traitCollection: ...)`
    static func gR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GS", bundle: ..., traitCollection: ...)`
    static func gS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GT", bundle: ..., traitCollection: ...)`
    static func gT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GU", bundle: ..., traitCollection: ...)`
    static func gU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GW", bundle: ..., traitCollection: ...)`
    static func gW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GY", bundle: ..., traitCollection: ...)`
    static func gY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HK", bundle: ..., traitCollection: ...)`
    static func hK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HN", bundle: ..., traitCollection: ...)`
    static func hN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HR", bundle: ..., traitCollection: ...)`
    static func hR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HT", bundle: ..., traitCollection: ...)`
    static func hT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HU", bundle: ..., traitCollection: ...)`
    static func hU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IC", bundle: ..., traitCollection: ...)`
    static func iC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ID", bundle: ..., traitCollection: ...)`
    static func iD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IE", bundle: ..., traitCollection: ...)`
    static func iE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IL", bundle: ..., traitCollection: ...)`
    static func iL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IM", bundle: ..., traitCollection: ...)`
    static func iM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IN", bundle: ..., traitCollection: ...)`
    static func iN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IO", bundle: ..., traitCollection: ...)`
    static func iO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IQ", bundle: ..., traitCollection: ...)`
    static func iQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iQ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IR", bundle: ..., traitCollection: ...)`
    static func iR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IS", bundle: ..., traitCollection: ...)`
    static func iS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IT", bundle: ..., traitCollection: ...)`
    static func iT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JE", bundle: ..., traitCollection: ...)`
    static func jE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JM", bundle: ..., traitCollection: ...)`
    static func jM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JO", bundle: ..., traitCollection: ...)`
    static func jO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JP", bundle: ..., traitCollection: ...)`
    static func jP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KE", bundle: ..., traitCollection: ...)`
    static func kE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KG", bundle: ..., traitCollection: ...)`
    static func kG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KH", bundle: ..., traitCollection: ...)`
    static func kH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KI", bundle: ..., traitCollection: ...)`
    static func kI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KM", bundle: ..., traitCollection: ...)`
    static func kM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KN", bundle: ..., traitCollection: ...)`
    static func kN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KP", bundle: ..., traitCollection: ...)`
    static func kP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KR", bundle: ..., traitCollection: ...)`
    static func kR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KW", bundle: ..., traitCollection: ...)`
    static func kW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KY", bundle: ..., traitCollection: ...)`
    static func kY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KZ", bundle: ..., traitCollection: ...)`
    static func kZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LA", bundle: ..., traitCollection: ...)`
    static func lA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LB", bundle: ..., traitCollection: ...)`
    static func lB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LC", bundle: ..., traitCollection: ...)`
    static func lC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LI", bundle: ..., traitCollection: ...)`
    static func lI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LK", bundle: ..., traitCollection: ...)`
    static func lK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LR", bundle: ..., traitCollection: ...)`
    static func lR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LS", bundle: ..., traitCollection: ...)`
    static func lS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LT", bundle: ..., traitCollection: ...)`
    static func lT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LU", bundle: ..., traitCollection: ...)`
    static func lU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LV", bundle: ..., traitCollection: ...)`
    static func lV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lV, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LY", bundle: ..., traitCollection: ...)`
    static func lY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MA", bundle: ..., traitCollection: ...)`
    static func mA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MC", bundle: ..., traitCollection: ...)`
    static func mC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MD", bundle: ..., traitCollection: ...)`
    static func mD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ME", bundle: ..., traitCollection: ...)`
    static func mE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MF", bundle: ..., traitCollection: ...)`
    static func mF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MG", bundle: ..., traitCollection: ...)`
    static func mG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MH", bundle: ..., traitCollection: ...)`
    static func mH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MK", bundle: ..., traitCollection: ...)`
    static func mK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ML", bundle: ..., traitCollection: ...)`
    static func mL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MM", bundle: ..., traitCollection: ...)`
    static func mM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MN", bundle: ..., traitCollection: ...)`
    static func mN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MO", bundle: ..., traitCollection: ...)`
    static func mO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MP", bundle: ..., traitCollection: ...)`
    static func mP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MQ", bundle: ..., traitCollection: ...)`
    static func mQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mQ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MR", bundle: ..., traitCollection: ...)`
    static func mR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MS", bundle: ..., traitCollection: ...)`
    static func mS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MT", bundle: ..., traitCollection: ...)`
    static func mT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MU", bundle: ..., traitCollection: ...)`
    static func mU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MV", bundle: ..., traitCollection: ...)`
    static func mV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mV, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MW", bundle: ..., traitCollection: ...)`
    static func mW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MX", bundle: ..., traitCollection: ...)`
    static func mX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MY", bundle: ..., traitCollection: ...)`
    static func mY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MZ", bundle: ..., traitCollection: ...)`
    static func mZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NA", bundle: ..., traitCollection: ...)`
    static func nA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NC", bundle: ..., traitCollection: ...)`
    static func nC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NE", bundle: ..., traitCollection: ...)`
    static func nE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NF", bundle: ..., traitCollection: ...)`
    static func nF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NG", bundle: ..., traitCollection: ...)`
    static func nG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NI", bundle: ..., traitCollection: ...)`
    static func nI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NL", bundle: ..., traitCollection: ...)`
    static func nL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NO", bundle: ..., traitCollection: ...)`
    static func nO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NP", bundle: ..., traitCollection: ...)`
    static func nP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NR", bundle: ..., traitCollection: ...)`
    static func nR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NU", bundle: ..., traitCollection: ...)`
    static func nU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NZ", bundle: ..., traitCollection: ...)`
    static func nZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OM", bundle: ..., traitCollection: ...)`
    static func oM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PA", bundle: ..., traitCollection: ...)`
    static func pA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PE", bundle: ..., traitCollection: ...)`
    static func pE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PF", bundle: ..., traitCollection: ...)`
    static func pF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PG", bundle: ..., traitCollection: ...)`
    static func pG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PH", bundle: ..., traitCollection: ...)`
    static func pH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PK", bundle: ..., traitCollection: ...)`
    static func pK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PL", bundle: ..., traitCollection: ...)`
    static func pL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PM", bundle: ..., traitCollection: ...)`
    static func pM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PN", bundle: ..., traitCollection: ...)`
    static func pN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PR", bundle: ..., traitCollection: ...)`
    static func pR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PS", bundle: ..., traitCollection: ...)`
    static func pS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PT", bundle: ..., traitCollection: ...)`
    static func pT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PW", bundle: ..., traitCollection: ...)`
    static func pW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PY", bundle: ..., traitCollection: ...)`
    static func pY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "QA", bundle: ..., traitCollection: ...)`
    static func qA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RE", bundle: ..., traitCollection: ...)`
    static func rE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RO", bundle: ..., traitCollection: ...)`
    static func rO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RS", bundle: ..., traitCollection: ...)`
    static func rS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RU", bundle: ..., traitCollection: ...)`
    static func rU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RW", bundle: ..., traitCollection: ...)`
    static func rW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SA", bundle: ..., traitCollection: ...)`
    static func sA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SB", bundle: ..., traitCollection: ...)`
    static func sB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SC", bundle: ..., traitCollection: ...)`
    static func sC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SD", bundle: ..., traitCollection: ...)`
    static func sD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SE", bundle: ..., traitCollection: ...)`
    static func sE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SG", bundle: ..., traitCollection: ...)`
    static func sG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SH", bundle: ..., traitCollection: ...)`
    static func sH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SI", bundle: ..., traitCollection: ...)`
    static func sI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SJ", bundle: ..., traitCollection: ...)`
    static func sJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SK", bundle: ..., traitCollection: ...)`
    static func sK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SL", bundle: ..., traitCollection: ...)`
    static func sL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SM", bundle: ..., traitCollection: ...)`
    static func sM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SN", bundle: ..., traitCollection: ...)`
    static func sN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SO", bundle: ..., traitCollection: ...)`
    static func sO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SR", bundle: ..., traitCollection: ...)`
    static func sR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SS", bundle: ..., traitCollection: ...)`
    static func sS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ST", bundle: ..., traitCollection: ...)`
    static func sT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SV", bundle: ..., traitCollection: ...)`
    static func sV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sV, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SX", bundle: ..., traitCollection: ...)`
    static func sX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SY", bundle: ..., traitCollection: ...)`
    static func sY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SZ", bundle: ..., traitCollection: ...)`
    static func sZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TA", bundle: ..., traitCollection: ...)`
    static func tA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TC", bundle: ..., traitCollection: ...)`
    static func tC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TD", bundle: ..., traitCollection: ...)`
    static func tD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TF", bundle: ..., traitCollection: ...)`
    static func tF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TG", bundle: ..., traitCollection: ...)`
    static func tG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TH", bundle: ..., traitCollection: ...)`
    static func tH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TJ", bundle: ..., traitCollection: ...)`
    static func tJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TK", bundle: ..., traitCollection: ...)`
    static func tK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TL", bundle: ..., traitCollection: ...)`
    static func tL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TM", bundle: ..., traitCollection: ...)`
    static func tM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TN", bundle: ..., traitCollection: ...)`
    static func tN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TO", bundle: ..., traitCollection: ...)`
    static func tO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tO, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TR", bundle: ..., traitCollection: ...)`
    static func tR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TT", bundle: ..., traitCollection: ...)`
    static func tT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TV", bundle: ..., traitCollection: ...)`
    static func tV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tV, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TW", bundle: ..., traitCollection: ...)`
    static func tW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TZ", bundle: ..., traitCollection: ...)`
    static func tZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UA", bundle: ..., traitCollection: ...)`
    static func uA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UG", bundle: ..., traitCollection: ...)`
    static func uG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UM", bundle: ..., traitCollection: ...)`
    static func uM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "US", bundle: ..., traitCollection: ...)`
    static func uS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UY", bundle: ..., traitCollection: ...)`
    static func uY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UZ", bundle: ..., traitCollection: ...)`
    static func uZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VA", bundle: ..., traitCollection: ...)`
    static func vA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VC", bundle: ..., traitCollection: ...)`
    static func vC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VE", bundle: ..., traitCollection: ...)`
    static func vE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VG", bundle: ..., traitCollection: ...)`
    static func vG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VI", bundle: ..., traitCollection: ...)`
    static func vI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VN", bundle: ..., traitCollection: ...)`
    static func vN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VU", bundle: ..., traitCollection: ...)`
    static func vU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WF", bundle: ..., traitCollection: ...)`
    static func wF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WS", bundle: ..., traitCollection: ...)`
    static func wS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "XK", bundle: ..., traitCollection: ...)`
    static func xK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "YE", bundle: ..., traitCollection: ...)`
    static func yE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "YT", bundle: ..., traitCollection: ...)`
    static func yT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ZA", bundle: ..., traitCollection: ...)`
    static func zA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ZM", bundle: ..., traitCollection: ...)`
    static func zM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zM, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ZW", bundle: ..., traitCollection: ...)`
    static func zW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ac_icon_back_write", bundle: ..., traitCollection: ...)`
    static func ac_icon_back_write(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_back_write, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_email_icon", bundle: ..., traitCollection: ...)`
    static func account_email_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_email_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_feedback_add", bundle: ..., traitCollection: ...)`
    static func account_feedback_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_feedback_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_feedback_close", bundle: ..., traitCollection: ...)`
    static func account_feedback_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_feedback_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_logo", bundle: ..., traitCollection: ...)`
    static func account_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_node_seleded", bundle: ..., traitCollection: ...)`
    static func account_node_seleded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_node_seleded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_pwd_icon", bundle: ..., traitCollection: ...)`
    static func account_pwd_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_pwd_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_search_icon", bundle: ..., traitCollection: ...)`
    static func account_search_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_search_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "acticity_cell_default", bundle: ..., traitCollection: ...)`
    static func acticity_cell_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.acticity_cell_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activity_edit_delete", bundle: ..., traitCollection: ...)`
    static func activity_edit_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activity_edit_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activity_edit_done", bundle: ..., traitCollection: ...)`
    static func activity_edit_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activity_edit_done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_add_new_device_logo", bundle: ..., traitCollection: ...)`
    static func ad_add_new_device_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_add_new_device_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_disturb_icon", bundle: ..., traitCollection: ...)`
    static func ad_disturb_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_disturb_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_home_video_bell_disable", bundle: ..., traitCollection: ...)`
    static func ad_home_video_bell_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_home_video_bell_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_install_turn_vide_session_1", bundle: ..., traitCollection: ...)`
    static func ad_install_turn_vide_session_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_install_turn_vide_session_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_install_turn_vide_session_2", bundle: ..., traitCollection: ...)`
    static func ad_install_turn_vide_session_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_install_turn_vide_session_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_install_wifi_none", bundle: ..., traitCollection: ...)`
    static func ad_install_wifi_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_install_wifi_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_install_wifi_normail", bundle: ..., traitCollection: ...)`
    static func ad_install_wifi_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_install_wifi_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_install_wifi_strong", bundle: ..., traitCollection: ...)`
    static func ad_install_wifi_strong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_install_wifi_strong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_install_wifi_weak", bundle: ..., traitCollection: ...)`
    static func ad_install_wifi_weak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_install_wifi_weak, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_join_new_device_logo", bundle: ..., traitCollection: ...)`
    static func ad_join_new_device_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_join_new_device_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad_member_detail_header_bg", bundle: ..., traitCollection: ...)`
    static func ad_member_detail_header_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_member_detail_header_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_camera_err_tip_1", bundle: ..., traitCollection: ...)`
    static func add_camera_err_tip_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_camera_err_tip_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_camera_err_tip_2", bundle: ..., traitCollection: ...)`
    static func add_camera_err_tip_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_camera_err_tip_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_camera_err_tip_3", bundle: ..., traitCollection: ...)`
    static func add_camera_err_tip_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_camera_err_tip_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_camera_frist", bundle: ..., traitCollection: ...)`
    static func add_camera_frist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_camera_frist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_cb0", bundle: ..., traitCollection: ...)`
    static func add_device_cb0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_cb0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_cb1", bundle: ..., traitCollection: ...)`
    static func add_device_cb1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_cb1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_cb2", bundle: ..., traitCollection: ...)`
    static func add_device_cb2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_cb2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_cg0", bundle: ..., traitCollection: ...)`
    static func add_device_cg0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_cg0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_cg1", bundle: ..., traitCollection: ...)`
    static func add_device_cg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_cg1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_cg2", bundle: ..., traitCollection: ...)`
    static func add_device_cg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_cg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_ck0", bundle: ..., traitCollection: ...)`
    static func add_device_ck0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_ck0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_cs0", bundle: ..., traitCollection: ...)`
    static func add_device_cs0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_cs0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_default", bundle: ..., traitCollection: ...)`
    static func add_device_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_device_join", bundle: ..., traitCollection: ...)`
    static func add_device_join(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_device_join, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_dialog_add_camera", bundle: ..., traitCollection: ...)`
    static func add_dialog_add_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_dialog_add_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_dialog_add_location", bundle: ..., traitCollection: ...)`
    static func add_dialog_add_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_dialog_add_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_dialog_arrow", bundle: ..., traitCollection: ...)`
    static func add_dialog_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_dialog_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_dialog_join_camera", bundle: ..., traitCollection: ...)`
    static func add_dialog_join_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_dialog_join_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_new_device_b", bundle: ..., traitCollection: ...)`
    static func add_new_device_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_new_device_b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "added_service_defalut_icon", bundle: ..., traitCollection: ...)`
    static func added_service_defalut_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.added_service_defalut_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addlocation_logo", bundle: ..., traitCollection: ...)`
    static func addlocation_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addlocation_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert_device.gif", bundle: ..., traitCollection: ...)`
    static func alert_deviceGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alert_deviceGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_feature_tip", bundle: ..., traitCollection: ...)`
    static func app_feature_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_feature_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_remove_head_bg", bundle: ..., traitCollection: ...)`
    static func app_remove_head_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_remove_head_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_arrow_tipImage", bundle: ..., traitCollection: ...)`
    static func authorization_arrow_tipImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_arrow_tipImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_audio_tipImage", bundle: ..., traitCollection: ...)`
    static func authorization_audio_tipImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_audio_tipImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_bluetooth_bg", bundle: ..., traitCollection: ...)`
    static func authorization_bluetooth_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_bluetooth_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_camera_tipImage", bundle: ..., traitCollection: ...)`
    static func authorization_camera_tipImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_camera_tipImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_location_icon", bundle: ..., traitCollection: ...)`
    static func authorization_location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_location_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_location_tipImage", bundle: ..., traitCollection: ...)`
    static func authorization_location_tipImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_location_tipImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_photo_tipImage", bundle: ..., traitCollection: ...)`
    static func authorization_photo_tipImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_photo_tipImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_public_bg", bundle: ..., traitCollection: ...)`
    static func authorization_public_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_public_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_push", bundle: ..., traitCollection: ...)`
    static func authorization_push(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_push, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authorization_switch_tipImage", bundle: ..., traitCollection: ...)`
    static func authorization_switch_tipImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authorization_switch_tipImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "av_content_video_play", bundle: ..., traitCollection: ...)`
    static func av_content_video_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.av_content_video_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "av_video_pause", bundle: ..., traitCollection: ...)`
    static func av_video_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.av_video_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "av_video_play", bundle: ..., traitCollection: ...)`
    static func av_video_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.av_video_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "batter_charging", bundle: ..., traitCollection: ...)`
    static func batter_charging(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.batter_charging, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_camera_guide", bundle: ..., traitCollection: ...)`
    static func bind_camera_guide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_camera_guide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_b0_setp1", bundle: ..., traitCollection: ...)`
    static func bind_device_b0_setp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_b0_setp1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_b0_setp2", bundle: ..., traitCollection: ...)`
    static func bind_device_b0_setp2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_b0_setp2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_b1_setp1", bundle: ..., traitCollection: ...)`
    static func bind_device_b1_setp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_b1_setp1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_b1_setp2", bundle: ..., traitCollection: ...)`
    static func bind_device_b1_setp2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_b1_setp2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_channal_2_4g", bundle: ..., traitCollection: ...)`
    static func bind_device_channal_2_4g(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_channal_2_4g, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_channal_5g", bundle: ..., traitCollection: ...)`
    static func bind_device_channal_5g(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_channal_5g, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_g1", bundle: ..., traitCollection: ...)`
    static func bind_device_g1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_g1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_g2", bundle: ..., traitCollection: ...)`
    static func bind_device_g2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_g2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_guide_down", bundle: ..., traitCollection: ...)`
    static func bind_device_guide_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_guide_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_guide_up", bundle: ..., traitCollection: ...)`
    static func bind_device_guide_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_guide_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_k0_setp1", bundle: ..., traitCollection: ...)`
    static func bind_device_k0_setp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_k0_setp1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_k0_setp2", bundle: ..., traitCollection: ...)`
    static func bind_device_k0_setp2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_k0_setp2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_s0_setp1", bundle: ..., traitCollection: ...)`
    static func bind_device_s0_setp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_s0_setp1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_s0_setp2", bundle: ..., traitCollection: ...)`
    static func bind_device_s0_setp2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_s0_setp2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_un_open1", bundle: ..., traitCollection: ...)`
    static func bind_device_un_open1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_un_open1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_un_open2", bundle: ..., traitCollection: ...)`
    static func bind_device_un_open2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_un_open2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_device_un_open3", bundle: ..., traitCollection: ...)`
    static func bind_device_un_open3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_device_un_open3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bind_result_bg", bundle: ..., traitCollection: ...)`
    static func bind_result_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bind_result_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox_select", bundle: ..., traitCollection: ...)`
    static func checkbox_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox_unselect", bundle: ..., traitCollection: ...)`
    static func checkbox_unselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_unselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud_area", bundle: ..., traitCollection: ...)`
    static func cloud_area(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud_area, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud_close", bundle: ..., traitCollection: ...)`
    static func cloud_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud_noitication", bundle: ..., traitCollection: ...)`
    static func cloud_noitication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud_noitication, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud_recording", bundle: ..., traitCollection: ...)`
    static func cloud_recording(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud_recording, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "decive_add_guide.gif", bundle: ..., traitCollection: ...)`
    static func decive_add_guideGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.decive_add_guideGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "del_history_wifi", bundle: ..., traitCollection: ...)`
    static func del_history_wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.del_history_wifi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_activity_del", bundle: ..., traitCollection: ...)`
    static func device_activity_del(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_activity_del, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_activity_setting", bundle: ..., traitCollection: ...)`
    static func device_activity_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_activity_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_add_sleep_plan", bundle: ..., traitCollection: ...)`
    static func device_add_sleep_plan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_add_sleep_plan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_alarm.gif", bundle: ..., traitCollection: ...)`
    static func device_alarmGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_alarmGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_alarm_volume_loud", bundle: ..., traitCollection: ...)`
    static func device_alarm_volume_loud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_alarm_volume_loud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_alarm_volume_loud_gray", bundle: ..., traitCollection: ...)`
    static func device_alarm_volume_loud_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_alarm_volume_loud_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_alarm_volume_low", bundle: ..., traitCollection: ...)`
    static func device_alarm_volume_low(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_alarm_volume_low, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_alarm_volume_low_gray", bundle: ..., traitCollection: ...)`
    static func device_alarm_volume_low_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_alarm_volume_low_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_batter_bg", bundle: ..., traitCollection: ...)`
    static func device_batter_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_batter_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_batter_bg_light", bundle: ..., traitCollection: ...)`
    static func device_batter_bg_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_batter_bg_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_connect_supper", bundle: ..., traitCollection: ...)`
    static func device_connect_supper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_connect_supper, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_cry_detection_high", bundle: ..., traitCollection: ...)`
    static func device_cry_detection_high(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_cry_detection_high, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_cry_detection_low", bundle: ..., traitCollection: ...)`
    static func device_cry_detection_low(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_cry_detection_low, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_cry_detection_middle", bundle: ..., traitCollection: ...)`
    static func device_cry_detection_middle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_cry_detection_middle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_edit_icon", bundle: ..., traitCollection: ...)`
    static func device_edit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_edit_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_feedbackScan_Three", bundle: ..., traitCollection: ...)`
    static func device_feedbackScan_Three(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_feedbackScan_Three, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_feedbackScan_button.gif", bundle: ..., traitCollection: ...)`
    static func device_feedbackScan_buttonGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_feedbackScan_buttonGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_feedbackScan_one", bundle: ..., traitCollection: ...)`
    static func device_feedbackScan_one(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_feedbackScan_one, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_feedbackScan_two", bundle: ..., traitCollection: ...)`
    static func device_feedbackScan_two(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_feedbackScan_two, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_b0", bundle: ..., traitCollection: ...)`
    static func device_icon_b0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_b0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_b1", bundle: ..., traitCollection: ...)`
    static func device_icon_b1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_b1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_b2", bundle: ..., traitCollection: ...)`
    static func device_icon_b2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_b2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_default", bundle: ..., traitCollection: ...)`
    static func device_icon_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_g0", bundle: ..., traitCollection: ...)`
    static func device_icon_g0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_g0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_g1", bundle: ..., traitCollection: ...)`
    static func device_icon_g1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_g1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_g2", bundle: ..., traitCollection: ...)`
    static func device_icon_g2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_g2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_k0", bundle: ..., traitCollection: ...)`
    static func device_icon_k0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_k0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_icon_s0", bundle: ..., traitCollection: ...)`
    static func device_icon_s0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_icon_s0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_light_close", bundle: ..., traitCollection: ...)`
    static func device_light_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_light_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_light_open", bundle: ..., traitCollection: ...)`
    static func device_light_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_light_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_fllow", bundle: ..., traitCollection: ...)`
    static func device_live_fllow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_fllow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_fllow_disable", bundle: ..., traitCollection: ...)`
    static func device_live_fllow_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_fllow_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_move_fllow", bundle: ..., traitCollection: ...)`
    static func device_live_move_fllow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_move_fllow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_move_follow_disable", bundle: ..., traitCollection: ...)`
    static func device_live_move_follow_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_move_follow_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_title_move_alert", bundle: ..., traitCollection: ...)`
    static func device_live_title_move_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_title_move_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_wifi_middle", bundle: ..., traitCollection: ...)`
    static func device_live_wifi_middle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_wifi_middle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_wifi_none", bundle: ..., traitCollection: ...)`
    static func device_live_wifi_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_wifi_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_wifi_strong", bundle: ..., traitCollection: ...)`
    static func device_live_wifi_strong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_wifi_strong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_live_wifi_week", bundle: ..., traitCollection: ...)`
    static func device_live_wifi_week(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_live_wifi_week, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_location_checked", bundle: ..., traitCollection: ...)`
    static func device_location_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_location_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_location_state", bundle: ..., traitCollection: ...)`
    static func device_location_state(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_location_state, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_manager_nav_add", bundle: ..., traitCollection: ...)`
    static func device_manager_nav_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_manager_nav_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_manager_no_device", bundle: ..., traitCollection: ...)`
    static func device_manager_no_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_manager_no_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_manager_no_share_device", bundle: ..., traitCollection: ...)`
    static func device_manager_no_share_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_manager_no_share_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_more_info_arrow", bundle: ..., traitCollection: ...)`
    static func device_more_info_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_more_info_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_more_info_arrow_gray", bundle: ..., traitCollection: ...)`
    static func device_more_info_arrow_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_more_info_arrow_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_offline_state", bundle: ..., traitCollection: ...)`
    static func device_offline_state(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_offline_state, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_double.gif", bundle: ..., traitCollection: ...)`
    static func device_power_doubleGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_doubleGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_double_press", bundle: ..., traitCollection: ...)`
    static func device_power_double_press(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_double_press, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_long_cn.gif", bundle: ..., traitCollection: ...)`
    static func device_power_long_cnGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_long_cnGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_long_en.gif", bundle: ..., traitCollection: ...)`
    static func device_power_long_enGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_long_enGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_long_ja.gif", bundle: ..., traitCollection: ...)`
    static func device_power_long_jaGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_long_jaGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_long_press", bundle: ..., traitCollection: ...)`
    static func device_power_long_press(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_long_press, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_on_ hand", bundle: ..., traitCollection: ...)`
    static func device_power_on_Hand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_on_Hand, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_on_icon", bundle: ..., traitCollection: ...)`
    static func device_power_on_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_on_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_power_on_icon_bg", bundle: ..., traitCollection: ...)`
    static func device_power_on_icon_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_power_on_icon_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_preset_location", bundle: ..., traitCollection: ...)`
    static func device_preset_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_preset_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_preset_location.gif", bundle: ..., traitCollection: ...)`
    static func device_preset_locationGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_preset_locationGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_sd_indicator", bundle: ..., traitCollection: ...)`
    static func device_sd_indicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_sd_indicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_send_alert", bundle: ..., traitCollection: ...)`
    static func device_send_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_send_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_activity_zones", bundle: ..., traitCollection: ...)`
    static func device_set_activity_zones(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_activity_zones, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_advanced_info", bundle: ..., traitCollection: ...)`
    static func device_set_advanced_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_advanced_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_firmware_info", bundle: ..., traitCollection: ...)`
    static func device_set_firmware_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_firmware_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_light", bundle: ..., traitCollection: ...)`
    static func device_set_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_motion_detection", bundle: ..., traitCollection: ...)`
    static func device_set_motion_detection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_motion_detection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_push", bundle: ..., traitCollection: ...)`
    static func device_set_push(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_push, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_sd", bundle: ..., traitCollection: ...)`
    static func device_set_sd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_sd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_sd_video", bundle: ..., traitCollection: ...)`
    static func device_set_sd_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_sd_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_share", bundle: ..., traitCollection: ...)`
    static func device_set_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_sleep", bundle: ..., traitCollection: ...)`
    static func device_set_sleep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_sleep, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_set_sound", bundle: ..., traitCollection: ...)`
    static func device_set_sound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_set_sound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_share_add_guide", bundle: ..., traitCollection: ...)`
    static func device_share_add_guide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_share_add_guide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_share_guide_2", bundle: ..., traitCollection: ...)`
    static func device_share_guide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_share_guide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_share_guide_3", bundle: ..., traitCollection: ...)`
    static func device_share_guide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_share_guide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_share_permission", bundle: ..., traitCollection: ...)`
    static func device_share_permission(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_share_permission, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_sleep_plan", bundle: ..., traitCollection: ...)`
    static func device_sleep_plan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_sleep_plan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_sleep_plan_add", bundle: ..., traitCollection: ...)`
    static func device_sleep_plan_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_sleep_plan_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_sleep_plan_error", bundle: ..., traitCollection: ...)`
    static func device_sleep_plan_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_sleep_plan_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_sleep_plan_off", bundle: ..., traitCollection: ...)`
    static func device_sleep_plan_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_sleep_plan_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_sleep_set", bundle: ..., traitCollection: ...)`
    static func device_sleep_set(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_sleep_set, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_sn_guide", bundle: ..., traitCollection: ...)`
    static func device_sn_guide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_sn_guide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_speaker_volume_loud", bundle: ..., traitCollection: ...)`
    static func device_speaker_volume_loud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_speaker_volume_loud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_speaker_volume_low", bundle: ..., traitCollection: ...)`
    static func device_speaker_volume_low(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_speaker_volume_low, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_speaker_volume_mute", bundle: ..., traitCollection: ...)`
    static func device_speaker_volume_mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_speaker_volume_mute, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_state_tip", bundle: ..., traitCollection: ...)`
    static func device_state_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_state_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_temp_qr", bundle: ..., traitCollection: ...)`
    static func device_temp_qr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_temp_qr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_update_loading_icon", bundle: ..., traitCollection: ...)`
    static func device_update_loading_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_update_loading_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_update_version", bundle: ..., traitCollection: ...)`
    static func device_update_version(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_update_version, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wait_progress_error_bg", bundle: ..., traitCollection: ...)`
    static func device_wait_progress_error_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wait_progress_error_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_look", bundle: ..., traitCollection: ...)`
    static func device_wifi_look(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_look, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_middle", bundle: ..., traitCollection: ...)`
    static func device_wifi_middle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_middle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_none", bundle: ..., traitCollection: ...)`
    static func device_wifi_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_secure", bundle: ..., traitCollection: ...)`
    static func device_wifi_secure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_secure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_state_middle", bundle: ..., traitCollection: ...)`
    static func device_wifi_state_middle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_state_middle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_state_none", bundle: ..., traitCollection: ...)`
    static func device_wifi_state_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_state_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_state_strong", bundle: ..., traitCollection: ...)`
    static func device_wifi_state_strong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_state_strong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_state_weak", bundle: ..., traitCollection: ...)`
    static func device_wifi_state_weak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_state_weak, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_strong", bundle: ..., traitCollection: ...)`
    static func device_wifi_strong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_strong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_tip", bundle: ..., traitCollection: ...)`
    static func device_wifi_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_wifi_week", bundle: ..., traitCollection: ...)`
    static func device_wifi_week(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_wifi_week, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "device_zendesk_chat", bundle: ..., traitCollection: ...)`
    static func device_zendesk_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.device_zendesk_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "devices_motion", bundle: ..., traitCollection: ...)`
    static func devices_motion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.devices_motion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_location_delete", bundle: ..., traitCollection: ...)`
    static func edit_location_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_location_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_location_done", bundle: ..., traitCollection: ...)`
    static func edit_location_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_location_done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_location_icon", bundle: ..., traitCollection: ...)`
    static func edit_location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_location_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "explore_loading_error", bundle: ..., traitCollection: ...)`
    static func explore_loading_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explore_loading_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "failed_get_inform", bundle: ..., traitCollection: ...)`
    static func failed_get_inform(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.failed_get_inform, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedback_system", bundle: ..., traitCollection: ...)`
    static func feedback_system(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback_system, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedback_user", bundle: ..., traitCollection: ...)`
    static func feedback_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_selected_camera_icon", bundle: ..., traitCollection: ...)`
    static func filter_selected_camera_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_selected_camera_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_tag_camera_icon", bundle: ..., traitCollection: ...)`
    static func filter_tag_camera_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_tag_camera_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_tag_dis_select_icon", bundle: ..., traitCollection: ...)`
    static func filter_tag_dis_select_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_tag_dis_select_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_tag_select_icon", bundle: ..., traitCollection: ...)`
    static func filter_tag_select_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_tag_select_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "getting_wifi.gif", bundle: ..., traitCollection: ...)`
    static func getting_wifiGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.getting_wifiGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guest_request_close", bundle: ..., traitCollection: ...)`
    static func guest_request_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guest_request_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guest_request_device_name", bundle: ..., traitCollection: ...)`
    static func guest_request_device_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guest_request_device_name, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guest_request_nick_name", bundle: ..., traitCollection: ...)`
    static func guest_request_nick_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guest_request_nick_name, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guest_request_permissions", bundle: ..., traitCollection: ...)`
    static func guest_request_permissions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guest_request_permissions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guest_request_title", bundle: ..., traitCollection: ...)`
    static func guest_request_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guest_request_title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guide_step1.gif", bundle: ..., traitCollection: ...)`
    static func guide_step1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_step1Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guide_step2.gif", bundle: ..., traitCollection: ...)`
    static func guide_step2Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_step2Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guide_step3.gif", bundle: ..., traitCollection: ...)`
    static func guide_step3Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_step3Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_alert", bundle: ..., traitCollection: ...)`
    static func home_device_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_auto_fllow", bundle: ..., traitCollection: ...)`
    static func home_device_auto_fllow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_auto_fllow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_auto_fllow_default", bundle: ..., traitCollection: ...)`
    static func home_device_auto_fllow_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_auto_fllow_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_auto_move_default", bundle: ..., traitCollection: ...)`
    static func home_device_auto_move_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_auto_move_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_auto_move_fllow", bundle: ..., traitCollection: ...)`
    static func home_device_auto_move_fllow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_auto_move_fllow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_edit_modle", bundle: ..., traitCollection: ...)`
    static func home_device_edit_modle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_edit_modle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_live_edit_modle", bundle: ..., traitCollection: ...)`
    static func home_device_live_edit_modle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_live_edit_modle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_location", bundle: ..., traitCollection: ...)`
    static func home_device_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_more", bundle: ..., traitCollection: ...)`
    static func home_device_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_preset_add", bundle: ..., traitCollection: ...)`
    static func home_device_preset_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_preset_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_preset_close", bundle: ..., traitCollection: ...)`
    static func home_device_preset_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_preset_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_preset_remove", bundle: ..., traitCollection: ...)`
    static func home_device_preset_remove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_preset_remove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_voice_disable", bundle: ..., traitCollection: ...)`
    static func home_device_voice_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_voice_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_voice_enable", bundle: ..., traitCollection: ...)`
    static func home_device_voice_enable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_voice_enable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_white_close", bundle: ..., traitCollection: ...)`
    static func home_device_white_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_white_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_white_open", bundle: ..., traitCollection: ...)`
    static func home_device_white_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_white_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_error_close", bundle: ..., traitCollection: ...)`
    static func home_error_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_error_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_libary_header_delete", bundle: ..., traitCollection: ...)`
    static func home_libary_header_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_libary_header_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_libary_no_data", bundle: ..., traitCollection: ...)`
    static func home_libary_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_libary_no_data, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_play_bottom_shard_bg", bundle: ..., traitCollection: ...)`
    static func home_play_bottom_shard_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_play_bottom_shard_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_report_log", bundle: ..., traitCollection: ...)`
    static func home_report_log(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_report_log, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_rocker_drag", bundle: ..., traitCollection: ...)`
    static func home_rocker_drag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_rocker_drag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_rocker_drag_bg", bundle: ..., traitCollection: ...)`
    static func home_rocker_drag_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_rocker_drag_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_rocker_drag_light_bg", bundle: ..., traitCollection: ...)`
    static func home_rocker_drag_light_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_rocker_drag_light_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_rocker_light_drag", bundle: ..., traitCollection: ...)`
    static func home_rocker_light_drag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_rocker_light_drag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_sleep_plan", bundle: ..., traitCollection: ...)`
    static func home_sleep_plan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_sleep_plan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_temp_image", bundle: ..., traitCollection: ...)`
    static func home_temp_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_temp_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_about_setting", bundle: ..., traitCollection: ...)`
    static func home_user_info_about_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_about_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_add_device", bundle: ..., traitCollection: ...)`
    static func home_user_info_add_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_add_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_added_service", bundle: ..., traitCollection: ...)`
    static func home_user_info_added_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_added_service, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_arrow", bundle: ..., traitCollection: ...)`
    static func home_user_info_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_device_setting", bundle: ..., traitCollection: ...)`
    static func home_user_info_device_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_device_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_edit_button", bundle: ..., traitCollection: ...)`
    static func home_user_info_edit_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_edit_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_faq", bundle: ..., traitCollection: ...)`
    static func home_user_info_faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_feedback", bundle: ..., traitCollection: ...)`
    static func home_user_info_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_help_setting", bundle: ..., traitCollection: ...)`
    static func home_user_info_help_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_help_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_language_setting", bundle: ..., traitCollection: ...)`
    static func home_user_info_language_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_language_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_user_info_location_setting", bundle: ..., traitCollection: ...)`
    static func home_user_info_location_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_user_info_location_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_video_cell_add", bundle: ..., traitCollection: ...)`
    static func home_video_cell_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_video_cell_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_video_loading", bundle: ..., traitCollection: ...)`
    static func home_video_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_video_loading, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_video_location_arrow", bundle: ..., traitCollection: ...)`
    static func home_video_location_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_video_location_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_video_location_icon", bundle: ..., traitCollection: ...)`
    static func home_video_location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_video_location_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_video_speak", bundle: ..., traitCollection: ...)`
    static func home_video_speak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_video_speak, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_explore", bundle: ..., traitCollection: ...)`
    static func homepage_explore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_explore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_explore_select", bundle: ..., traitCollection: ...)`
    static func homepage_explore_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_explore_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_head_add", bundle: ..., traitCollection: ...)`
    static func homepage_head_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_head_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_head_arrow", bundle: ..., traitCollection: ...)`
    static func homepage_head_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_head_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_head_menus", bundle: ..., traitCollection: ...)`
    static func homepage_head_menus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_head_menus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_head_split", bundle: ..., traitCollection: ...)`
    static func homepage_head_split(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_head_split, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_libary", bundle: ..., traitCollection: ...)`
    static func homepage_libary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_libary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_libary_select", bundle: ..., traitCollection: ...)`
    static func homepage_libary_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_libary_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_user", bundle: ..., traitCollection: ...)`
    static func homepage_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_user_select", bundle: ..., traitCollection: ...)`
    static func homepage_user_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_user_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_video", bundle: ..., traitCollection: ...)`
    static func homepage_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homepage_video_select", bundle: ..., traitCollection: ...)`
    static func homepage_video_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homepage_video_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back_blue", bundle: ..., traitCollection: ...)`
    static func icon_back_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back_gray", bundle: ..., traitCollection: ...)`
    static func icon_back_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back_write", bundle: ..., traitCollection: ...)`
    static func icon_back_write(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_write, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_country_default", bundle: ..., traitCollection: ...)`
    static func icon_country_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_country_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_history_wifi", bundle: ..., traitCollection: ...)`
    static func icon_history_wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_history_wifi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_quit", bundle: ..., traitCollection: ...)`
    static func icon_share_quit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_quit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_defalult.gif", bundle: ..., traitCollection: ...)`
    static func image_defalultGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_defalultGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_0", bundle: ..., traitCollection: ...)`
    static func img_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "join_device_bottom_left", bundle: ..., traitCollection: ...)`
    static func join_device_bottom_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.join_device_bottom_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "join_device_bottom_right", bundle: ..., traitCollection: ...)`
    static func join_device_bottom_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.join_device_bottom_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "join_device_qrcode_error", bundle: ..., traitCollection: ...)`
    static func join_device_qrcode_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.join_device_qrcode_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "join_device_scan", bundle: ..., traitCollection: ...)`
    static func join_device_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.join_device_scan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "join_device_scan_animail", bundle: ..., traitCollection: ...)`
    static func join_device_scan_animail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.join_device_scan_animail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "join_device_scan_wait_image", bundle: ..., traitCollection: ...)`
    static func join_device_scan_wait_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.join_device_scan_wait_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_alert_icon", bundle: ..., traitCollection: ...)`
    static func live_alert_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_alert_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_night_white_loading", bundle: ..., traitCollection: ...)`
    static func live_night_white_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_night_white_loading, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_loading", bundle: ..., traitCollection: ...)`
    static func live_video_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_loading, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_micro", bundle: ..., traitCollection: ...)`
    static func live_video_micro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_micro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_more", bundle: ..., traitCollection: ...)`
    static func live_video_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_more_menu_quit", bundle: ..., traitCollection: ...)`
    static func live_video_more_menu_quit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_more_menu_quit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_question", bundle: ..., traitCollection: ...)`
    static func live_video_question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_question, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_record_normail", bundle: ..., traitCollection: ...)`
    static func live_video_record_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_record_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_record_selected", bundle: ..., traitCollection: ...)`
    static func live_video_record_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_record_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_reset_location", bundle: ..., traitCollection: ...)`
    static func live_video_reset_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_reset_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_setting", bundle: ..., traitCollection: ...)`
    static func live_video_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_sharp", bundle: ..., traitCollection: ...)`
    static func live_video_sharp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_sharp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_sharp_1080p", bundle: ..., traitCollection: ...)`
    static func live_video_sharp_1080p(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_sharp_1080p, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_sharp_480p", bundle: ..., traitCollection: ...)`
    static func live_video_sharp_480p(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_sharp_480p, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_sharp_720p", bundle: ..., traitCollection: ...)`
    static func live_video_sharp_720p(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_sharp_720p, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_sharp_auto", bundle: ..., traitCollection: ...)`
    static func live_video_sharp_auto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_sharp_auto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_speaking", bundle: ..., traitCollection: ...)`
    static func live_video_speaking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_speaking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_wifi_middle", bundle: ..., traitCollection: ...)`
    static func live_video_wifi_middle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_wifi_middle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_wifi_none", bundle: ..., traitCollection: ...)`
    static func live_video_wifi_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_wifi_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_wifi_strong", bundle: ..., traitCollection: ...)`
    static func live_video_wifi_strong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_wifi_strong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_wifi_week", bundle: ..., traitCollection: ...)`
    static func live_video_wifi_week(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_wifi_week, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_video_wlan", bundle: ..., traitCollection: ...)`
    static func live_video_wlan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_video_wlan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_back_door", bundle: ..., traitCollection: ...)`
    static func location_back_door(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_back_door, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_bedroom", bundle: ..., traitCollection: ...)`
    static func location_bedroom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_bedroom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_front_door", bundle: ..., traitCollection: ...)`
    static func location_front_door(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_front_door, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_garden", bundle: ..., traitCollection: ...)`
    static func location_garden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_garden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_livingroom", bundle: ..., traitCollection: ...)`
    static func location_livingroom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_livingroom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_manager_edit", bundle: ..., traitCollection: ...)`
    static func location_manager_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_manager_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_no_tip", bundle: ..., traitCollection: ...)`
    static func location_no_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_no_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_office", bundle: ..., traitCollection: ...)`
    static func location_office(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_office, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_position", bundle: ..., traitCollection: ...)`
    static func location_position(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_position, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_camera_icon", bundle: ..., traitCollection: ...)`
    static func main_libary_camera_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_camera_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_cry", bundle: ..., traitCollection: ...)`
    static func main_libary_cry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_cry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_filter", bundle: ..., traitCollection: ...)`
    static func main_libary_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_manager", bundle: ..., traitCollection: ...)`
    static func main_libary_manager(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_manager, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_mark_icon", bundle: ..., traitCollection: ...)`
    static func main_libary_mark_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_mark_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_movement_icon", bundle: ..., traitCollection: ...)`
    static func main_libary_movement_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_movement_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_package", bundle: ..., traitCollection: ...)`
    static func main_libary_package(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_package, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_package_detained", bundle: ..., traitCollection: ...)`
    static func main_libary_package_detained(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_package_detained, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_package_down", bundle: ..., traitCollection: ...)`
    static func main_libary_package_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_package_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_package_gray", bundle: ..., traitCollection: ...)`
    static func main_libary_package_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_package_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_package_up", bundle: ..., traitCollection: ...)`
    static func main_libary_package_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_package_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_people", bundle: ..., traitCollection: ...)`
    static func main_libary_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_people, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_people_gray", bundle: ..., traitCollection: ...)`
    static func main_libary_people_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_people_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_pet", bundle: ..., traitCollection: ...)`
    static func main_libary_pet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_pet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_pet_gray", bundle: ..., traitCollection: ...)`
    static func main_libary_pet_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_pet_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_red", bundle: ..., traitCollection: ...)`
    static func main_libary_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_small_package", bundle: ..., traitCollection: ...)`
    static func main_libary_small_package(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_small_package, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_small_people", bundle: ..., traitCollection: ...)`
    static func main_libary_small_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_small_people, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_small_pet", bundle: ..., traitCollection: ...)`
    static func main_libary_small_pet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_small_pet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_small_vehicle", bundle: ..., traitCollection: ...)`
    static func main_libary_small_vehicle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_small_vehicle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_unmark_mark_icon", bundle: ..., traitCollection: ...)`
    static func main_libary_unmark_mark_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_unmark_mark_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_unread_icon", bundle: ..., traitCollection: ...)`
    static func main_libary_unread_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_unread_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_vehicle", bundle: ..., traitCollection: ...)`
    static func main_libary_vehicle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_vehicle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_vehicle_gray", bundle: ..., traitCollection: ...)`
    static func main_libary_vehicle_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_vehicle_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_libary_video_icon", bundle: ..., traitCollection: ...)`
    static func main_libary_video_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_libary_video_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberVip_more_arrow", bundle: ..., traitCollection: ...)`
    static func memberVip_more_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberVip_more_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_CollarSuccess_normail", bundle: ..., traitCollection: ...)`
    static func member_CollarSuccess_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_CollarSuccess_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_ReceiveCoupon_normail", bundle: ..., traitCollection: ...)`
    static func member_ReceiveCoupon_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_ReceiveCoupon_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_check_icon", bundle: ..., traitCollection: ...)`
    static func member_check_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_check_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_coupons_normail", bundle: ..., traitCollection: ...)`
    static func member_coupons_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_coupons_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_cloud", bundle: ..., traitCollection: ...)`
    static func member_detail_cloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_cloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_cloud_normail", bundle: ..., traitCollection: ...)`
    static func member_detail_cloud_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_cloud_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_cloud_vip", bundle: ..., traitCollection: ...)`
    static func member_detail_cloud_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_cloud_vip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_feature", bundle: ..., traitCollection: ...)`
    static func member_detail_feature(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_feature, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_feature_has", bundle: ..., traitCollection: ...)`
    static func member_detail_feature_has(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_feature_has, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_feature_none", bundle: ..., traitCollection: ...)`
    static func member_detail_feature_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_feature_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_smart", bundle: ..., traitCollection: ...)`
    static func member_detail_smart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_smart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_smart_normail", bundle: ..., traitCollection: ...)`
    static func member_detail_smart_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_smart_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_smart_vip", bundle: ..., traitCollection: ...)`
    static func member_detail_smart_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_smart_vip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_tip", bundle: ..., traitCollection: ...)`
    static func member_detail_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_vip_icon", bundle: ..., traitCollection: ...)`
    static func member_detail_vip_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_vip_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_zone", bundle: ..., traitCollection: ...)`
    static func member_detail_zone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_zone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_zone_normail", bundle: ..., traitCollection: ...)`
    static func member_detail_zone_normail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_zone_normail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_detail_zone_vip", bundle: ..., traitCollection: ...)`
    static func member_detail_zone_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_detail_zone_vip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_header_arrow", bundle: ..., traitCollection: ...)`
    static func member_header_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_header_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_header_bg", bundle: ..., traitCollection: ...)`
    static func member_header_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_header_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_header_bottom_bg", bundle: ..., traitCollection: ...)`
    static func member_header_bottom_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_header_bottom_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_header_cloud", bundle: ..., traitCollection: ...)`
    static func member_header_cloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_header_cloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_header_ordinary_bg", bundle: ..., traitCollection: ...)`
    static func member_header_ordinary_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_header_ordinary_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_header_tip_image", bundle: ..., traitCollection: ...)`
    static func member_header_tip_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_header_tip_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_more_info_arrow", bundle: ..., traitCollection: ...)`
    static func member_more_info_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_more_info_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_par_wait_icon", bundle: ..., traitCollection: ...)`
    static func member_par_wait_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_par_wait_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_pay_momo", bundle: ..., traitCollection: ...)`
    static func member_pay_momo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_pay_momo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_pay_mpesa", bundle: ..., traitCollection: ...)`
    static func member_pay_mpesa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_pay_mpesa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_pay_scuess", bundle: ..., traitCollection: ...)`
    static func member_pay_scuess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_pay_scuess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_plan_select", bundle: ..., traitCollection: ...)`
    static func member_plan_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_plan_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "member_progress_header_bg", bundle: ..., traitCollection: ...)`
    static func member_progress_header_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.member_progress_header_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "motion_tracking_help", bundle: ..., traitCollection: ...)`
    static func motion_tracking_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.motion_tracking_help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_add_device_right", bundle: ..., traitCollection: ...)`
    static func nav_add_device_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_add_device_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_menu_add_device", bundle: ..., traitCollection: ...)`
    static func nav_menu_add_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_menu_add_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_menu_add_friend_device", bundle: ..., traitCollection: ...)`
    static func nav_menu_add_friend_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_menu_add_friend_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_move_location", bundle: ..., traitCollection: ...)`
    static func no_move_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_move_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_net_warming", bundle: ..., traitCollection: ...)`
    static func no_net_warming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_net_warming, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_wifi_connet_tip", bundle: ..., traitCollection: ...)`
    static func no_wifi_connet_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_wifi_connet_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notication_ai_filter", bundle: ..., traitCollection: ...)`
    static func notication_ai_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notication_ai_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_human", bundle: ..., traitCollection: ...)`
    static func notification_human(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_human, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_uncheck", bundle: ..., traitCollection: ...)`
    static func notification_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_warning", bundle: ..., traitCollection: ...)`
    static func notification_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_warning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package_guide_1", bundle: ..., traitCollection: ...)`
    static func package_guide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package_guide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package_guide_2", bundle: ..., traitCollection: ...)`
    static func package_guide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package_guide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package_guide_3", bundle: ..., traitCollection: ...)`
    static func package_guide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package_guide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay_free.gif", bundle: ..., traitCollection: ...)`
    static func pay_freeGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay_freeGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "press_down", bundle: ..., traitCollection: ...)`
    static func press_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.press_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_back", bundle: ..., traitCollection: ...)`
    static func qrcode_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_scuess", bundle: ..., traitCollection: ...)`
    static func qrcode_scuess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_scuess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode_voice.gif", bundle: ..., traitCollection: ...)`
    static func qrcode_voiceGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_voiceGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rember_voice_check_select", bundle: ..., traitCollection: ...)`
    static func rember_voice_check_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rember_voice_check_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rember_voice_check_unselect", bundle: ..., traitCollection: ...)`
    static func rember_voice_check_unselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rember_voice_check_unselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remember_wifi_intro_info", bundle: ..., traitCollection: ...)`
    static func remember_wifi_intro_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remember_wifi_intro_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resouce_bottom_delete", bundle: ..., traitCollection: ...)`
    static func resouce_bottom_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resouce_bottom_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resouce_bottom_download", bundle: ..., traitCollection: ...)`
    static func resouce_bottom_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resouce_bottom_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "resouce_bottom_share", bundle: ..., traitCollection: ...)`
    static func resouce_bottom_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resouce_bottom_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_gallery", bundle: ..., traitCollection: ...)`
    static func scan_gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qr_code_cn.gif", bundle: ..., traitCollection: ...)`
    static func scan_qr_code_cnGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qr_code_cnGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qr_code_en.gif", bundle: ..., traitCollection: ...)`
    static func scan_qr_code_enGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qr_code_enGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qrcode_voice_0", bundle: ..., traitCollection: ...)`
    static func scan_qrcode_voice_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qrcode_voice_0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qrcode_voice_1", bundle: ..., traitCollection: ...)`
    static func scan_qrcode_voice_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qrcode_voice_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qrcode_voice_2", bundle: ..., traitCollection: ...)`
    static func scan_qrcode_voice_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qrcode_voice_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qrcode_voice_3", bundle: ..., traitCollection: ...)`
    static func scan_qrcode_voice_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qrcode_voice_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qrcode_voice_type1", bundle: ..., traitCollection: ...)`
    static func scan_qrcode_voice_type1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qrcode_voice_type1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_qrcode_voice_type2", bundle: ..., traitCollection: ...)`
    static func scan_qrcode_voice_type2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_qrcode_voice_type2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_car_error_format", bundle: ..., traitCollection: ...)`
    static func sd_car_error_format(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_car_error_format, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_car_error_tip", bundle: ..., traitCollection: ...)`
    static func sd_car_error_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_car_error_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_format_fail", bundle: ..., traitCollection: ...)`
    static func sd_format_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_format_fail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_format_scuess", bundle: ..., traitCollection: ...)`
    static func sd_format_scuess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_format_scuess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_format_smail", bundle: ..., traitCollection: ...)`
    static func sd_format_smail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_format_smail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_list_error", bundle: ..., traitCollection: ...)`
    static func sd_list_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_list_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_play_error", bundle: ..., traitCollection: ...)`
    static func sd_play_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_play_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_play_no_net", bundle: ..., traitCollection: ...)`
    static func sd_play_no_net(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_play_no_net, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_play_timeout", bundle: ..., traitCollection: ...)`
    static func sd_play_timeout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_play_timeout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_video_error", bundle: ..., traitCollection: ...)`
    static func sd_video_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_video_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd_video_timeout", bundle: ..., traitCollection: ...)`
    static func sd_video_timeout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd_video_timeout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "select_place_close", bundle: ..., traitCollection: ...)`
    static func select_place_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.select_place_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_indicator", bundle: ..., traitCollection: ...)`
    static func slider_indicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_indicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_max", bundle: ..., traitCollection: ...)`
    static func slider_max(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_max, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_min", bundle: ..., traitCollection: ...)`
    static func slider_min(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_min, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_thumb", bundle: ..., traitCollection: ...)`
    static func slider_thumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_thumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_b0", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_b0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_b0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_b1", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_b1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_b1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_b2", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_b2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_b2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_g0", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_g0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_g0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_g1", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_g1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_g1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_g2", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_g2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_g2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_k0", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_k0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_k0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smail_device_icon_s0", bundle: ..., traitCollection: ...)`
    static func smail_device_icon_s0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smail_device_icon_s0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "speak_tip_icon", bundle: ..., traitCollection: ...)`
    static func speak_tip_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_tip_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "textfield_clear_button", bundle: ..., traitCollection: ...)`
    static func textfield_clear_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.textfield_clear_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time_change_big", bundle: ..., traitCollection: ...)`
    static func time_change_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time_change_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time_change_smail", bundle: ..., traitCollection: ...)`
    static func time_change_smail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time_change_smail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "title_move_alert", bundle: ..., traitCollection: ...)`
    static func title_move_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.title_move_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toast_close", bundle: ..., traitCollection: ...)`
    static func toast_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toast_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_guide_1", bundle: ..., traitCollection: ...)`
    static func user_guide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_guide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_guide_2", bundle: ..., traitCollection: ...)`
    static func user_guide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_guide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_guide_3", bundle: ..., traitCollection: ...)`
    static func user_guide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_guide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_guide_4", bundle: ..., traitCollection: ...)`
    static func user_guide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_guide_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_login_bg", bundle: ..., traitCollection: ...)`
    static func user_login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_login_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_member_auto_pay", bundle: ..., traitCollection: ...)`
    static func user_member_auto_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_member_auto_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_add_members", bundle: ..., traitCollection: ...)`
    static func video_add_members(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_add_members, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_connect_access", bundle: ..., traitCollection: ...)`
    static func video_connect_access(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_connect_access, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_connect_device_offline", bundle: ..., traitCollection: ...)`
    static func video_connect_device_offline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_connect_device_offline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_connect_fail", bundle: ..., traitCollection: ...)`
    static func video_connect_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_connect_fail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_connect_network", bundle: ..., traitCollection: ...)`
    static func video_connect_network(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_connect_network, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_connect_time_out", bundle: ..., traitCollection: ...)`
    static func video_connect_time_out(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_connect_time_out, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_exit_full_screen", bundle: ..., traitCollection: ...)`
    static func video_exit_full_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_exit_full_screen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_feedback_dog", bundle: ..., traitCollection: ...)`
    static func video_feedback_dog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_feedback_dog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_feedback_no_tag", bundle: ..., traitCollection: ...)`
    static func video_feedback_no_tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_feedback_no_tag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_feedback_people", bundle: ..., traitCollection: ...)`
    static func video_feedback_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_feedback_people, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_feedback_selected", bundle: ..., traitCollection: ...)`
    static func video_feedback_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_feedback_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_full_bg", bundle: ..., traitCollection: ...)`
    static func video_full_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_full_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_full_screen", bundle: ..., traitCollection: ...)`
    static func video_full_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_full_screen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_input_feedback_selected", bundle: ..., traitCollection: ...)`
    static func video_input_feedback_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_input_feedback_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_live_screen_shot", bundle: ..., traitCollection: ...)`
    static func video_live_screen_shot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_live_screen_shot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_live_speak", bundle: ..., traitCollection: ...)`
    static func video_live_speak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_live_speak, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_live_volume", bundle: ..., traitCollection: ...)`
    static func video_live_volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_live_volume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_live_volume_mute", bundle: ..., traitCollection: ...)`
    static func video_live_volume_mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_live_volume_mute, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_live_warning", bundle: ..., traitCollection: ...)`
    static func video_live_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_live_warning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_loading_error", bundle: ..., traitCollection: ...)`
    static func video_loading_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_loading_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_members", bundle: ..., traitCollection: ...)`
    static func video_members(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_members, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_pause", bundle: ..., traitCollection: ...)`
    static func video_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_pause_smail", bundle: ..., traitCollection: ...)`
    static func video_pause_smail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_pause_smail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_play", bundle: ..., traitCollection: ...)`
    static func video_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_play_bottom_shard_bg", bundle: ..., traitCollection: ...)`
    static func video_play_bottom_shard_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_play_bottom_shard_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_play_smail", bundle: ..., traitCollection: ...)`
    static func video_play_smail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_play_smail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_play_top_share", bundle: ..., traitCollection: ...)`
    static func video_play_top_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_play_top_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_replay", bundle: ..., traitCollection: ...)`
    static func video_replay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_replay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_setting", bundle: ..., traitCollection: ...)`
    static func video_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_sharp_arrow", bundle: ..., traitCollection: ...)`
    static func video_sharp_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_sharp_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_volume", bundle: ..., traitCollection: ...)`
    static func video_volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_volume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video_volume_mute", bundle: ..., traitCollection: ...)`
    static func video_volume_mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_volume_mute, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wait_connect", bundle: ..., traitCollection: ...)`
    static func wait_connect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        debugPrint("------------> wait_connect:\(R.image.wait_connect)")
      return UIKit.UIImage(resource: R.image.wait_connect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "weak_wifi_warning", bundle: ..., traitCollection: ...)`
    static func weak_wifi_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weak_wifi_warning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "weak_wifi_warning_close", bundle: ..., traitCollection: ...)`
    static func weak_wifi_warning_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weak_wifi_warning_close, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 5 localization keys.
    struct infoPlist {
      /// en translation: Allow location permission to automatically fill in the Wi-Fi connected to your phone. The Wi-Fi information will be used for camera binding.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nsLocationWhenInUseUsageDescription = Rswift.StringResource(key: "NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If not permitted, you will not be able to get location automatically from your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nsLocationAlwaysAndWhenInUseUsageDescription = Rswift.StringResource(key: "NSLocationAlwaysAndWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If not permitted, you will not be able to save photos and videos to your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If not permitted, you will not be able to scan QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If not permitted, you will not be able to use Vicoo to make audio calls.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nsMicrophoneUsageDescription = Rswift.StringResource(key: "NSMicrophoneUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)

      /// en translation: Allow location permission to automatically fill in the Wi-Fi connected to your phone. The Wi-Fi information will be used for camera binding.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nsLocationWhenInUseUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSLocationWhenInUseUsageDescription"
        }

        return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: If not permitted, you will not be able to get location automatically from your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nsLocationAlwaysAndWhenInUseUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSLocationAlwaysAndWhenInUseUsageDescription", tableName: "InfoPlist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSLocationAlwaysAndWhenInUseUsageDescription"
        }

        return NSLocalizedString("NSLocationAlwaysAndWhenInUseUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: If not permitted, you will not be able to save photos and videos to your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nsPhotoLibraryUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSPhotoLibraryUsageDescription"
        }

        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: If not permitted, you will not be able to scan QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: If not permitted, you will not be able to use Vicoo to make audio calls.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nsMicrophoneUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSMicrophoneUsageDescription", tableName: "InfoPlist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSMicrophoneUsageDescription"
        }

        return NSLocalizedString("NSMicrophoneUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 1322 localization keys.
    struct localizable {
      /// en translation: "Ding Dong Ding Dong"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ding_dong = Rswift.StringResource(key: "ding_dong", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: "Night Vision Setting -> Night Vision Mode", and select "White light mode" >
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let how_to_open_nightvision = Rswift.StringResource(key: "how_to_open_nightvision", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_current_vip = Rswift.StringResource(key: "payment_current_vip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let system_album_name = Rswift.StringResource(key: "system_album_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ (%@) invited you to view the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_result_scuess = Rswift.StringResource(key: "bind_result_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_cloud_save = Rswift.StringResource(key: "payment_cloud_save", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let value_added_services = Rswift.StringResource(key: "value_added_services", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness Basic
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let awarenessbasic = Rswift.StringResource(key: "awarenessbasic", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness Introduction
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let smart_service_desc = Rswift.StringResource(key: "smart_service_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness Plus
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let awarenessplus = Rswift.StringResource(key: "awarenessplus", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness Plus
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_payment_title = Rswift.StringResource(key: "dialog_payment_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness Plus free trial
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let free_30d_plus = Rswift.StringResource(key: "free_30d_plus", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness Pro
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let awarenesspro = Rswift.StringResource(key: "awarenesspro", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness feature
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let vip_activity_zone_warning = Rswift.StringResource(key: "vip_activity_zone_warning", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness has expired, please repurchase.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let user_account_in_protection = Rswift.StringResource(key: "user_account_in_protection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Awareness payment successful. Please go to the personal center to check the function permission.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let pay_scuess = Rswift.StringResource(key: "pay_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_g0_default_name = Rswift.StringResource(key: "device_g0_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_g1_default_name = Rswift.StringResource(key: "device_g1_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_g2_default_name = Rswift.StringResource(key: "device_g2_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart Box Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_s0_default_name = Rswift.StringResource(key: "device_s0_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart Card Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_k0_default_name = Rswift.StringResource(key: "device_k0_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_b0_default_name = Rswift.StringResource(key: "device_b0_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_b1_default_name = Rswift.StringResource(key: "device_b1_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_b2_default_name = Rswift.StringResource(key: "device_b2_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Would Like to Access the %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission_dialog_title = Rswift.StringResource(key: "permission_dialog_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ activity zones
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let number_az = Rswift.StringResource(key: "number_az", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ app
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let invite_info_des_key_point = Rswift.StringResource(key: "invite_info_des_key_point", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ cameras that can be quickly connected, please click to start connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let quick_connect_tips = Rswift.StringResource(key: "quick_connect_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ events found.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let found_event2 = Rswift.StringResource(key: "found_event2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ has expired, you will lose the AI function and the cloud recording will be changed to the 7-day on %@. Please upgrade a new %@ Awareness If necessary.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let membership_tip = Rswift.StringResource(key: "membership_tip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ is in low battery level, please charge your camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let low_battery_warning = Rswift.StringResource(key: "low_battery_warning", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ is verifying…
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_verifying = Rswift.StringResource(key: "payment_verifying", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ more events
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let more_event = Rswift.StringResource(key: "more_event", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ payment failed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let apaymntt_fail = Rswift.StringResource(key: "apaymntt_fail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ payment is not detected, please confirm that the payment channel is available before purchasing again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let other_payment_not_detected = Rswift.StringResource(key: "other_payment_not_detected", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ payment successful
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let apayment_success = Rswift.StringResource(key: "apayment_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ sensitivity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let level_sensitivity = Rswift.StringResource(key: "level_sensitivity", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ switched resolution.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_resolution = Rswift.StringResource(key: "live_resolution", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ triggered camera alarm.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_alarm = Rswift.StringResource(key: "live_alarm", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ turned on white light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_white_light = Rswift.StringResource(key: "live_white_light", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ update to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let upgrage_to_plan = Rswift.StringResource(key: "upgrage_to_plan", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ will change to %@ after %@ days.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_notification = Rswift.StringResource(key: "change_notification", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ will expire after %@ days.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let expired_notification = Rswift.StringResource(key: "expired_notification", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ will not receive data from %@ anymore.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let remove_share_device_des = Rswift.StringResource(key: "remove_share_device_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@Cloud storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_cloud_size = Rswift.StringResource(key: "get_cloud_size", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %@ Smart Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_default_name = Rswift.StringResource(key: "device_default_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %d cameras occupy this location. Please change the location of the occupied camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let n_device_use_this_location = Rswift.StringResource(key: "n_device_use_this_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %d cameras occupy this location. Please change the location of the occupied camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let tip_bind_device_alert_des = Rswift.StringResource(key: "tip_bind_device_alert_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %d days
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let day = Rswift.StringResource(key: "day", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %d%%
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let downloading_progress = Rswift.StringResource(key: "downloading_progress", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %d/%d Downloading …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let download_position = Rswift.StringResource(key: "download_position", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: %u more notifications
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let push_group_tips = Rswift.StringResource(key: "push_group_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: (For indoor use, this function is not recommended)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let indoor_motion_alarm = Rswift.StringResource(key: "Indoor_motion_alarm", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: (If you are under 14 years old, you need to notify your guardian to read it together.)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guardian_read = Rswift.StringResource(key: "guardian_read", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: (No data is involved here, please rest assured to use)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let send_log_tips = Rswift.StringResource(key: "send_log_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: (before offline)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let before_offline = Rswift.StringResource(key: "before_offline", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: (≤%dGB)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let save_gb = Rswift.StringResource(key: "save_gb", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: * %@ Awareness only takes effect in the camera admin’s rights, and the shared users will use it with the admin’s rights.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let buy_desc = Rswift.StringResource(key: "buy_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: *Select one AI test object at least.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_one_ai = Rswift.StringResource(key: "select_one_ai", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: *Sorry, the system has detected problems in the following activity zone, which may cause inaccurate detection. Please delete and add again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wrong_az_tips = Rswift.StringResource(key: "wrong_az_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: -Payment: confirm your purchase and pay into your iTunes account. -Cancel auto-renewal: To cancel the automatic renewal, please manually turn off the automatic renewal function in iTunes / Apple ID settings at least 24 hours prior to the expiration time of your subscription. If you cancel within 24 hours prior to the expiration, the subscription fee for the next subscription period will still be charged and the subscription will end at the end of the next subscription period. -Renewal: iTunes account will be charged automatically within 24 hours prior to the expiration time of your subscription. If the renewal is successful, the subscription will be extended by one subscription period. -By purchasing the service from %@, you agree to the Privacy Policy, Awareness Service Agreement, and Continuous Subscription Service Agreement.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let renewal_clause = Rswift.StringResource(key: "renewal_clause", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 0 activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_use = Rswift.StringResource(key: "not_use", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 1 Find %@ in the settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bluetooth_tips1 = Rswift.StringResource(key: "bluetooth_tips1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 1 activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let one_az = Rswift.StringResource(key: "one_az", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 1 event found.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let found_event1 = Rswift.StringResource(key: "found_event1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 1. The account is safe
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_title_1 = Rswift.StringResource(key: "delete_notice_title_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 12 hours
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let h12 = Rswift.StringResource(key: "h12", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 2 Allow %@ to access Bluetooth
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bluetooth_tips2 = Rswift.StringResource(key: "bluetooth_tips2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 2 hours
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let h1 = Rswift.StringResource(key: "h1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 2. No longer follow the camera associated with this account
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_title_2 = Rswift.StringResource(key: "delete_notice_title_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 2.4GHz
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ghz24 = Rswift.StringResource(key: "Ghz2.4", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 3. All personal data will be deleted
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_title_3 = Rswift.StringResource(key: "delete_notice_title_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 30 minutes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let min30 = Rswift.StringResource(key: "min30", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 4. Cancel the automatic renewal of the %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_title_4 = Rswift.StringResource(key: "delete_notice_title_4", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 5GHz
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ghz5 = Rswift.StringResource(key: "Ghz5", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 6-12 inches
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let distance = Rswift.StringResource(key: "distance", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: <![CDATA[ <font>u3000u3000In order to cooperate with relevant policies and provide better services to users in China, VicoHome App changed to <strong>全橙看家</strong> App on <font color="#5AC4A7">%@</font>.</font><br /> <font>u3000u3000VicoHome APP can no longer be usable. Please download <strong>全橙看家</strong> in time. You can sign in to <strong>全橙看家</strong> directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it. <u><font color="#007AFF"> Learn more >></font></u></font><br /> ]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let app_transfer_content_logout = Rswift.StringResource(key: "app_transfer_content_logout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: <![CDATA[ <font>u3000u3000In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to <strong>全橙看家</strong> App on <font color="#5AC4A7">%@</font>. <br /> <font>u3000u3000Please download <strong>全橙看家</strong> in time. You can sign in to <strong>全橙看家</strong> directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it. </font><br /> <font>u3000u3000After the expiration date, VicoHome APP will no longer be usable. <u><font color="#007AFF"> Learn more >></font></u></font><br />]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let app_transfer_content = Rswift.StringResource(key: "app_transfer_content", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: <![CDATA[<font color=#333333">%1$d days</font><br><font color="#999999">(≤%2$dGB)</font>]]>"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cloud_storage_params = Rswift.StringResource(key: "cloud_storage_params", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: <![CDATA[<font><small>%@</small></font> <font><big>%.2f</big></font>]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_price = Rswift.StringResource(key: "payment_price", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: <![CDATA[In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to <strong>全橙看家</strong> App on <font color="#5AC4A7">%@</font>. Please download <strong>全橙看家</strong> and sign up your account. Thank you very much for your cooperation.]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_7_android = Rswift.StringResource(key: "migration_statement_7_android", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: <![CDATA[We apologize for the inconvenience, <strong>全橙看家</strong> will guard safety for you! ]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_3_android = Rswift.StringResource(key: "migration_statement_3_android", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: <b>%@</b> will not receive messages from<b>%@</b> any more.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_message_cancel_share = Rswift.StringResource(key: "dialog_message_cancel_share", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: @string/appName
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: A verification code is required after too many times wrong the password.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verificatio_code_require = Rswift.StringResource(key: "verificatio_code_require", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: APP Change Statement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let migration_statement_1 = Rswift.StringResource(key: "migration_statement_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: APP Language
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let language = Rswift.StringResource(key: "language", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: APP Version
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let app_version = Rswift.StringResource(key: "app_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: About %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let about = Rswift.StringResource(key: "about", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: About %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let about_evaeye = Rswift.StringResource(key: "about_evaeye", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: About %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let about_vicoo = Rswift.StringResource(key: "about_vicoo", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let accept = Rswift.StringResource(key: "accept", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Access this camera failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_no_access = Rswift.StringResource(key: "device_no_access", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Account Deletion Notice
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_title_0 = Rswift.StringResource(key: "delete_notice_title_0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Account Settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let account_settings = Rswift.StringResource(key: "account_settings", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Account deletion Failed to, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_account_failed = Rswift.StringResource(key: "delete_account_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Account password login
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let login_way_password = Rswift.StringResource(key: "login_way_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Action Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let action_tracking = Rswift.StringResource(key: "action_tracking", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Activate Alarm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alert = Rswift.StringResource(key: "alert", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Activation date
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_start = Rswift.StringResource(key: "sleep_start", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let activity_zones = Rswift.StringResource(key: "activity_zones", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cloud_area = Rswift.StringResource(key: "cloud_area", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let user_guide_4 = Rswift.StringResource(key: "user_guide_4", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add Camera Now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_camera_now = Rswift.StringResource(key: "add_camera_now", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add Friend's Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let join_friend_device = Rswift.StringResource(key: "join_friend_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add a New Camera Now!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_new_camera_now = Rswift.StringResource(key: "add_new_camera_now", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add a new camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_new_camera = Rswift.StringResource(key: "add_new_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add a new camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_new_device = Rswift.StringResource(key: "add_new_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add a sleep plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_sleep_plan = Rswift.StringResource(key: "add_sleep_plan", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_activity_zone = Rswift.StringResource(key: "add_activity_zone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_camera_again = Rswift.StringResource(key: "add_camera_again", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Add camera timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_timeout = Rswift.StringResource(key: "add_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let address = Rswift.StringResource(key: "address", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Adjust the distance between the camera and QR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_notice_title2 = Rswift.StringResource(key: "scan_qr_code_notice_title2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Admin
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let admin = Rswift.StringResource(key: "admin", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Admin Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let admin_info = Rswift.StringResource(key: "admin_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Advanced Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let advanced_info = Rswift.StringResource(key: "advanced_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Alarm Flash is turned on, the camera will automatically light up the flash when the motion detection is triggered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_white_tips = Rswift.StringResource(key: "camera_white_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Alarm Siren is turned on, the camera will automatically sound the alarm siren when the motion detection is triggered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let siren_des = Rswift.StringResource(key: "siren_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Anti-Flicker is turned on, the camera will offset the strobe frequency of the alternating current. Solve the flicker of the video screen.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let anti_flicker_tips = Rswift.StringResource(key: "anti_flicker_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Classification is turned on, the video will analyze the content of the video. At present, the main recognition categories include person, pet, vehicle, and package.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ai_filter_des = Rswift.StringResource(key: "ai_filter_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Classification is turned on, the video will analyze the content of the video. At present, the main recognition categories include person, pet.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ai_filter_des2 = Rswift.StringResource(key: "ai_filter_des2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Motion Detection is turned on, the camera can be triggered by the moving objects and record video, helping you to detect environmental changes at all times.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let motion_detection_des = Rswift.StringResource(key: "motion_detection_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Motion Tracking is turned on, the camera will automatically follow the recording after detecting motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let motion_tracking_open = Rswift.StringResource(key: "motion_tracking_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Night Vision is turned on, the camera will support night viewing. Improve camera shooting performance in dark environments.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let night_version_tips = Rswift.StringResource(key: "night_version_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Notification is turned on, the camera will push the trigger recording of abnormal activities.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_des = Rswift.StringResource(key: "notification_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After Schedule is turned on, the camera will automatically enter sleep mode within the specified time.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let auto_sleep_prompt = Rswift.StringResource(key: "auto_sleep_prompt", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After adding Activity Zone, the camera will still record all videos, but will only push abnormal activities in the activity zones.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let activity_zone_tips = Rswift.StringResource(key: "activity_zone_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After camera enters Sleep mode, the surveillance area cannot be viewed in real time, and functions such as motion detection, intercom and alarm will be suspended.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_prompt = Rswift.StringResource(key: "sleep_prompt", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After clicking confirm to send the verification code, your mailbox will receive the verification code email within 60 seconds.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason1 = Rswift.StringResource(key: "cannot_receive_code_reason1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After expiration, you will:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_sec = Rswift.StringResource(key: "notification_sec", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After long pressing the reset button, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_power_key_reset_next = Rswift.StringResource(key: "double_click_power_key_reset_next", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After plugging in the camera, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_long_press_power_tips_s0 = Rswift.StringResource(key: "guide_long_press_power_tips_s0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After the Indicator Light is turned on, the camera informs the current working status through the indicator light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let indicator_des = Rswift.StringResource(key: "indicator_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After the camera finishes rotating, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_b0_step0_desc = Rswift.StringResource(key: "bind_device_b0_step0_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After the connection is successful, it will automatically jump to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_skip = Rswift.StringResource(key: "bind_device_skip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After the expiration date, VicoHome APP will no longer be usable. Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let migration_statement_2_3 = Rswift.StringResource(key: "migration_statement_2_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: After the product function is optimized, the record video switch is removed. In order not to affect your usage habits, the motion detection switch is temporarily turned off. If necessary, please turn it on again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let close_motion_detection_tip = Rswift.StringResource(key: "close_motion_detection_tip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Agree
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let agree = Rswift.StringResource(key: "agree", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Agree and continue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let agree_and_continue = Rswift.StringResource(key: "agree_and_continue", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Alarm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_alarm = Rswift.StringResource(key: "camera_alarm", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Alarm Flash
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let flash_light_item = Rswift.StringResource(key: "flash_light_item", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Alarm Siren
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alert_buttom = Rswift.StringResource(key: "alert_buttom", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Alarm Volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alarm_volume = Rswift.StringResource(key: "alarm_volume", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Alarm Volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let volume = Rswift.StringResource(key: "volume", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Alarmed successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sent_alarm_successfully = Rswift.StringResource(key: "sent_alarm_successfully", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Align QR code within the frame to scan.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alignqr = Rswift.StringResource(key: "alignqr", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: All camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let all_device = Rswift.StringResource(key: "all_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: All data on this SD card will be deleted, are you sure to format it?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_card_format_remind = Rswift.StringResource(key: "sd_card_format_remind", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: All motion
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let all_alerts = Rswift.StringResource(key: "all_alerts", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: All personal data related to this account, including library information, will be permanently deleted and cannot be recovered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_content_3 = Rswift.StringResource(key: "delete_notice_content_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: All screen
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let all_screen = Rswift.StringResource(key: "all_screen", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: All the data from this camera will not be received anymore.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let remove_device_des = Rswift.StringResource(key: "remove_device_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow = Rswift.StringResource(key: "allow", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow "Bluetooth" permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_bluetooth_permission = Rswift.StringResource(key: "allow_bluetooth_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow "location" permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_location_permission_title = Rswift.StringResource(key: "allow_location_permission_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow Bluetooth permission, quickly bind the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bluetooth_permission = Rswift.StringResource(key: "bluetooth_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow Location Permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let grant_location_permission = Rswift.StringResource(key: "grant_location_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow bluetooth permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_bluetooth_permission_button = Rswift.StringResource(key: "allow_bluetooth_permission_button", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow camera access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_permission = Rswift.StringResource(key: "camera_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow camera access in the phone system "Settings" to scan QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_permission_tips = Rswift.StringResource(key: "camera_permission_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow camera permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allowa_camera_permission = Rswift.StringResource(key: "allowa_camera_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow location access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_permission = Rswift.StringResource(key: "location_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow location access in the phone system "Settings" to get a nearby Wi-Fi list.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_permission_tips = Rswift.StringResource(key: "location_permission_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow location access in the phone system "Settings" to help camera adding.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_permission_help_adding = Rswift.StringResource(key: "location_permission_help_adding", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow location permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_location_permission = Rswift.StringResource(key: "allow_location_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow location permission, automatically obtain the current Wi-Fi name (SSID) of the phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_location_permission_get_wifi = Rswift.StringResource(key: "allow_location_permission_get_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow location permission, automatically obtain the current Wi-Fi name and configure it to the camera (recommended) or manually enter the Wi-Fi name (case sensitive).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_location_permission_for_camera = Rswift.StringResource(key: "allow_location_permission_for_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow microphone access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let microphone_permission = Rswift.StringResource(key: "microphone_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow microphone access in the phone system "Settings" to make voice calls.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let microphone_permission_tips = Rswift.StringResource(key: "microphone_permission_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow mobile phone camera permission, scan the QR code on the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_camera_permission = Rswift.StringResource(key: "allow_camera_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow notifications access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notifications_permission = Rswift.StringResource(key: "notifications_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow notifications access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let push_permission = Rswift.StringResource(key: "push_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow photos access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let photos_permission = Rswift.StringResource(key: "photos_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Allow photos access in phone system "Settings" to store media files.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let photos_permission_tips = Rswift.StringResource(key: "photos_permission_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Alter location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alter_location = Rswift.StringResource(key: "alter_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: An account with this email already exists. Try logging in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mail_registered = Rswift.StringResource(key: "mail_registered", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Anti-Flicker
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let anti_flicker = Rswift.StringResource(key: "anti_flicker", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Anti-Flicker
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let anti_flicker_setting = Rswift.StringResource(key: "anti_flicker_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: App Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let app_update = Rswift.StringResource(key: "app_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Apply for storage access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let storage_space_access = Rswift.StringResource(key: "storage_space_access", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Apr.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_4 = Rswift.StringResource(key: "month_4", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure to delete this location?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_location_desc = Rswift.StringResource(key: "delete_location_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure to drop out adding process?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_drop_out = Rswift.StringResource(key: "sure_to_drop_out", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure to turn off the speakers?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_speaker_1 = Rswift.StringResource(key: "confirm_speaker_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure you want to delete the sleep schedule time?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_sleep_time = Rswift.StringResource(key: "delete_sleep_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure you want to delete this account?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let remove_share_device_title = Rswift.StringResource(key: "remove_share_device_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure you want to delete this network?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_wifi = Rswift.StringResource(key: "delete_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure you want to remove this camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let remove_device_title = Rswift.StringResource(key: "remove_device_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure you want to sign out?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let logout_des = Rswift.StringResource(key: "logout_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Are you sure you want to turn the alarm on?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turn_alern = Rswift.StringResource(key: "turn_alern", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Area detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let detection_area = Rswift.StringResource(key: "detection_area", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Askari has initiated debit of %@ from your MoMo account. Enter phone number:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mtn_momo_payment_title = Rswift.StringResource(key: "mtn_momo_payment_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: At the same time, we also support humanoid tracking.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let tracking_guide = Rswift.StringResource(key: "tracking_guide", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Audio Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let audio_setting = Rswift.StringResource(key: "audio_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Aug.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_8 = Rswift.StringResource(key: "month_8", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Auto
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let auto = Rswift.StringResource(key: "auto", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Auto
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ratio_auto = Rswift.StringResource(key: "ratio_auto", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Auto subscribe
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_auto_pay = Rswift.StringResource(key: "payment_auto_pay", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Available 2.4GHz Wi-Fi networks are as follows.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let available_2_4g_are_follows = Rswift.StringResource(key: "available_2_4g_are_follows", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Available Fireware
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let available_fireware = Rswift.StringResource(key: "available_fireware", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Awareness Service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let awareness_service = Rswift.StringResource(key: "awareness_service", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Awareness Service Agreement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let renewal_clause_key_terms = Rswift.StringResource(key: "renewal_clause_key_terms", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Back door
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let back_door = Rswift.StringResource(key: "back_door", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Basic
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let plan_basic = Rswift.StringResource(key: "plan_basic", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Battery Level
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let battery_level = Rswift.StringResource(key: "battery_level", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Battery camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let battery_camera = Rswift.StringResource(key: "battery_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Battery issue/hardware issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let battery_issue = Rswift.StringResource(key: "battery_issue", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Because %@ Awareness uses third-party chargeback, your account cancellation is not related to automatic renewal. To avoid unnecessary deductions, please cancel automatic renewal.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_content_4_ios = Rswift.StringResource(key: "delete_notice_content_4_ios", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Because the account will not be restored after the deletion. Before you submit the application, please ensure the security of your account, and confirm the following information:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_content_0 = Rswift.StringResource(key: "delete_notice_content_0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Bedroom
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bed_room = Rswift.StringResource(key: "bed_room", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Before binding, you need to enter the password to verify the user's identity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verify_identity_desc_1 = Rswift.StringResource(key: "verify_identity_desc_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Before rebinding, you need to enter the password to verify the user's identity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verify_user_rebind = Rswift.StringResource(key: "verify_user_rebind", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Bind now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_to_bind = Rswift.StringResource(key: "go_to_bind", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Bound email ID successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_bind_success = Rswift.StringResource(key: "email_bind_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Bound phone number successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_number_bind_success = Rswift.StringResource(key: "phone_number_bind_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Build Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let app_build_info = Rswift.StringResource(key: "app_build_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: BuildENV
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let build_env = Rswift.StringResource(key: "build_env", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Buy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let buy = Rswift.StringResource(key: "buy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Buy now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_buy = Rswift.StringResource(key: "go_buy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera = Rswift.StringResource(key: "camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device = Rswift.StringResource(key: "device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission_name_camera = Rswift.StringResource(key: "permission_name_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera IP
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_ip = Rswift.StringResource(key: "device_ip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_info = Rswift.StringResource(key: "device_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera Management
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_manager = Rswift.StringResource(key: "device_manager", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera Management
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_title_1 = Rswift.StringResource(key: "guide_title_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera Name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_name = Rswift.StringResource(key: "device_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_settings = Rswift.StringResource(key: "device_settings", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera finished rotating.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hear_device_power_on_b0 = Rswift.StringResource(key: "hear_device_power_on_b0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera found
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_find_device = Rswift.StringResource(key: "connect_find_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera is offline
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_is_offline = Rswift.StringResource(key: "camera_is_offline", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera is offline, please reconnect it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let offline_reconnect = Rswift.StringResource(key: "offline_reconnect", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera is sleeping
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_sleep = Rswift.StringResource(key: "camera_sleep", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera not responding
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_response = Rswift.StringResource(key: "no_response", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera position and distance
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_guide_one = Rswift.StringResource(key: "package_guide_one", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera serial number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_serial_number = Rswift.StringResource(key: "camera_serial_number", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let invite = Rswift.StringResource(key: "invite", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Camera view
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_guide_three = Rswift.StringResource(key: "package_guide_three", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Can't receive the verification code?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code = Rswift.StringResource(key: "cannot_receive_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cancel_setup = Rswift.StringResource(key: "cancel_setup", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_pay_cancel = Rswift.StringResource(key: "payment_pay_cancel", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Canceled
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_user_cancel = Rswift.StringResource(key: "payment_user_cancel", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Canceled mark successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let marked_cancle = Rswift.StringResource(key: "marked_cancle", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot change resolution during video recording.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_switch = Rswift.StringResource(key: "cannot_switch", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot connect to the camera, please check the network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let may_be_connection = Rswift.StringResource(key: "may_be_connection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot find Wi-Fi information?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_no_wifi = Rswift.StringResource(key: "connect_no_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot find the QR code on the camera body?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let can_not_find_camera_qr_code = Rswift.StringResource(key: "can_not_find_camera_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot find the admin’s QR code?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let can_not_find_qr_code = Rswift.StringResource(key: "can_not_find_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot find the reset button?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let can_not_find_reset = Rswift.StringResource(key: "can_not_find_reset", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot finish scanning?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_failed = Rswift.StringResource(key: "scan_qr_code_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot take pictures during video recording.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_take_screenshot = Rswift.StringResource(key: "cannot_take_screenshot", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cannot turn on?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let can_not_power_up = Rswift.StringResource(key: "can_not_power_up", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Change Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_email = Rswift.StringResource(key: "change_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_password = Rswift.StringResource(key: "change_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Change Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_wifi = Rswift.StringResource(key: "change_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Change Wi-Fi Network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_wifi_network = Rswift.StringResource(key: "change_wifi_network", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Change now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change = Rswift.StringResource(key: "change", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Change phone number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_phone = Rswift.StringResource(key: "change_phone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Change the language  successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let toast_change_language = Rswift.StringResource(key: "toast_change_language", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Changed password successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_password_success = Rswift.StringResource(key: "change_password_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Changes are not saved yet. Do you  want to save now?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let changed_not_saved = Rswift.StringResource(key: "changed_not_saved", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Charg completed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let charging_completed = Rswift.StringResource(key: "charging_completed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Charging
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let charging = Rswift.StringResource(key: "charging", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Chat with us or leave us a message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let iosAnswer_botCellTextInactivity_get_in_touch_message = Rswift.StringResource(key: "ios.answer_bot.cell.text.inactivity_get_in_touch_message", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Check Firmware Updates
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_for_update_version = Rswift.StringResource(key: "check_for_update_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Check For Updates
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_update_version = Rswift.StringResource(key: "check_update_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Check Wi-Fi signal strength …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_wifi_1 = Rswift.StringResource(key: "check_wifi_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Check it under the catalog of shared cameras.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_result_scuess_check = Rswift.StringResource(key: "bind_result_scuess_check", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Check now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_buy_2 = Rswift.StringResource(key: "go_buy_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Check now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_to_see = Rswift.StringResource(key: "go_to_see", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Check the Live stream, playback video clips.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let invite_title_des = Rswift.StringResource(key: "invite_title_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Choose
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let choose = Rswift.StringResource(key: "choose", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Choose Firmware Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let choose_firmware_update = Rswift.StringResource(key: "choose_firmware_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Choose now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_to_choose_item = Rswift.StringResource(key: "notification_to_choose_item", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Choose other Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let choose_other_wifi = Rswift.StringResource(key: "choose_other_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: City
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let city = Rswift.StringResource(key: "city", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: City
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_district = Rswift.StringResource(key: "select_district", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Classification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ai_filter = Rswift.StringResource(key: "ai_filter", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Clear Cache
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let clear_cache = Rswift.StringResource(key: "clear_cache", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Clearing cache does not affect the operation of %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let clear_cache_not_affect_download_media = Rswift.StringResource(key: "clear_cache_not_affect_download_media", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Closed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Cloud Recording
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cloud_strorage = Rswift.StringResource(key: "cloud_strorage", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_open = Rswift.StringResource(key: "confirm_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm New Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_new_password = Rswift.StringResource(key: "confirm_new_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_password = Rswift.StringResource(key: "confirm_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_reinput_password = Rswift.StringResource(key: "please_reinput_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm that the camera enters the scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_scan_state = Rswift.StringResource(key: "confirm_scan_state", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm that the camera is turned on and in the code scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_notice_title1 = Rswift.StringResource(key: "scan_qr_code_notice_title1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm that the camera makes a sound or sees the indicator light flashes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_guide_confirm = Rswift.StringResource(key: "bind_device_guide_confirm", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm the camera is turned on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_camera_on = Rswift.StringResource(key: "confirm_camera_on", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm whether the camera is emitting a beeping sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_scanning_sound = Rswift.StringResource(key: "confirm_scanning_sound", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm whether the device is in the scanning state (scanning sound).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let issue_1 = Rswift.StringResource(key: "issue_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Confirm your Wi-Fi signal strength:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_wifi_2 = Rswift.StringResource(key: "check_wifi_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Congratulations Please Add a Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let congratulation_add_camera = Rswift.StringResource(key: "congratulation_add_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Congratulations, you have obtained "%@"%@ months of access. During this period, you can use the following services:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_coupon_sec = Rswift.StringResource(key: "get_coupon_sec", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connect the camera to Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_to_wifi = Rswift.StringResource(key: "connect_to_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connect the supply to turn on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let long_press_the_power_key_b0 = Rswift.StringResource(key: "long_press_the_power_key_b0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connect to Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_wifi = Rswift.StringResource(key: "connect_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connect to Wi-Fi network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verify_network = Rswift.StringResource(key: "verify_network", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connecting to server...
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_server = Rswift.StringResource(key: "connect_server", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connecting …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connecting = Rswift.StringResource(key: "connecting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connection succeeded
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_success = Rswift.StringResource(key: "connect_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Connection to server timed out
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_sever_timeout = Rswift.StringResource(key: "connect_sever_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Contact
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let questions_contact = Rswift.StringResource(key: "questions_contact", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Contact help service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_scan_failed_2 = Rswift.StringResource(key: "bind_device_scan_failed_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Contact the admin to set the activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let contact_admin_set_az = Rswift.StringResource(key: "contact_admin_set_az", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_on = Rswift.StringResource(key: "go_on", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Continuous Subscription Service Agreement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let renewal_clause_key_clause = Rswift.StringResource(key: "renewal_clause_key_clause", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Copyright © 2021 Photon Sail Tech All rights reserved
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let copyright = Rswift.StringResource(key: "copyright", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let country = Rswift.StringResource(key: "country", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Country/Region
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let country_region = Rswift.StringResource(key: "country_region", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Country/Region State/Province City
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_address_des = Rswift.StringResource(key: "location_address_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Create a new location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let create_location = Rswift.StringResource(key: "create_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Created location successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_create_success = Rswift.StringResource(key: "location_create_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Crying
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let crying_tag = Rswift.StringResource(key: "crying_tag", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Crying detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let crying_detection = Rswift.StringResource(key: "crying_detection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Current Location:%@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let current_location = Rswift.StringResource(key: "current_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Currently 5GHz Wi-Fi and enterprise Wi-Fi are not supported.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_ap_3 = Rswift.StringResource(key: "connect_error_ap_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Currently 5GHz Wi-Fi and enterprise Wi-Fi are not supported.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_password_2 = Rswift.StringResource(key: "connect_error_password_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Currently only supports 2.4GHz Wi-Fi. You can proceed to the next step after connecting.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verify_network_des = Rswift.StringResource(key: "verify_network_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Custom Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let gif_ad_3 = Rswift.StringResource(key: "gif_ad_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Data acquisition failed, please restart the APP.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let data_acquisition_failed = Rswift.StringResource(key: "data_acquisition_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Dec.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_12 = Rswift.StringResource(key: "month_12", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Default
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let default_common = Rswift.StringResource(key: "default_common", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_account = Rswift.StringResource(key: "delete_account", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Delete Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_this_location = Rswift.StringResource(key: "delete_this_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Delete successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_success = Rswift.StringResource(key: "delete_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Delete successfully. New position can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let position_deleted = Rswift.StringResource(key: "position_deleted", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Delete this network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_delete = Rswift.StringResource(key: "bind_device_delete", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Deselect all
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let deselect_all = Rswift.StringResource(key: "deselect_all", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Detailed Address
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let detail_location = Rswift.StringResource(key: "detail_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Detailed address (optional)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let street_address_2 = Rswift.StringResource(key: "street_address_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Detailed address, such as apartment, house number, etc.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let address2_placeholder = Rswift.StringResource(key: "address2_placeholder", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Detailed address, such as apartment, house number, etc.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let street_address_2_place_holder = Rswift.StringResource(key: "street_address_2_place_holder", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Detected an ongoing formatting task, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_card_formatting = Rswift.StringResource(key: "sd_card_formatting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Detection Sensitivity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let detection_sensitivity = Rswift.StringResource(key: "detection_sensitivity", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Deutsche(German)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_ge = Rswift.StringResource(key: "device_language_ge", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Did you hear"Scan QR code"?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let is_heard_scan_qr_code = Rswift.StringResource(key: "is_heard_scan_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Did you hear"Scan QR code"?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let is_listen_qr_code = Rswift.StringResource(key: "is_listen_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Didn't hear a beeping sound?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let did_not_hear_scanning_sound = Rswift.StringResource(key: "did_not_hear_scanning_sound", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Disable
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let disable = Rswift.StringResource(key: "disable", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Disagree
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let disagree = Rswift.StringResource(key: "disagree", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: District/County
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let district_country = Rswift.StringResource(key: "district_country", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do not disturb
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let do_not_disturb = Rswift.StringResource(key: "do_not_disturb", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do not disturb messages is turned on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turned_on_donot_disturb = Rswift.StringResource(key: "turned_on_donot_disturb", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do not disturb within 15 minutes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let do_not_disturb_15min = Rswift.StringResource(key: "do_not_disturb_15min", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do not open
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_open_now = Rswift.StringResource(key: "not_open_now", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do not show this again today
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_tip = Rswift.StringResource(key: "no_tip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do not update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let do_not_update = Rswift.StringResource(key: "do_not_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do not update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let later = Rswift.StringResource(key: "later", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm remove this camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_remove_device = Rswift.StringResource(key: "sure_to_remove_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to clear cache?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_clear_cache = Rswift.StringResource(key: "sure_to_clear_cache", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to delete %d items from the cloud?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_title_del_multi = Rswift.StringResource(key: "dialog_title_del_multi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to delete this account?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_cancel_share = Rswift.StringResource(key: "sure_to_cancel_share", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to delete this activity zone?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_delete_zone = Rswift.StringResource(key: "sure_to_delete_zone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to delete this address?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_delete_location = Rswift.StringResource(key: "sure_to_delete_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to delete this item?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_title_del_one = Rswift.StringResource(key: "dialog_title_del_one", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to sign out?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_log_out = Rswift.StringResource(key: "sure_to_log_out", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to turn off the  motion detection?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_turn_off_detection = Rswift.StringResource(key: "sure_to_turn_off_detection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you confirm to turn  the alarm on?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sure_to_turn_alarm_on = Rswift.StringResource(key: "sure_to_turn_alarm_on", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you want to continue using data in a non-WiFi environment?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wlan_enable_play = Rswift.StringResource(key: "wlan_enable_play", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Do you want to save the changes?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_not_save = Rswift.StringResource(key: "change_not_save", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Don't show again
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_show_tips_any_more = Rswift.StringResource(key: "not_show_tips_any_more", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Double click the button and place the QR code on your phone about 6-12inches in front of the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_power_key_2 = Rswift.StringResource(key: "double_click_power_key_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Double click the button to scan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_power_key = Rswift.StringResource(key: "double_click_power_key", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Double click the power button
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_power = Rswift.StringResource(key: "double_click_power", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Double click the power button after the camera is turned on. Then the camera will enter the scanning state when you hear the scanning sound or see the flashing light,
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_power_directions = Rswift.StringResource(key: "double_click_power_directions", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Double-click the button on the camera to enter internet connection mode. When the LED light is blinking blue, you’re ready.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_net_device_power_des = Rswift.StringResource(key: "change_net_device_power_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Download
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let download = Rswift.StringResource(key: "download", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Download Error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let download_error = Rswift.StringResource(key: "download_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Download now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_download_it = Rswift.StringResource(key: "payment_download_it", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Downloading …%d%%
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let downloading_progress2 = Rswift.StringResource(key: "downloading_progress2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Drop out
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let drop_out = Rswift.StringResource(key: "drop_out", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Duration
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_duration = Rswift.StringResource(key: "video_duration", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: During the formatting process, the SD card cannot be used.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let formatting_cannot_use = Rswift.StringResource(key: "formatting_cannot_use", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: During the upgrade process, the camera may restart several times, please do not cut off the power or turn off the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_restarted_update = Rswift.StringResource(key: "device_restarted_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: During this period, you will not receive any motion detection messages, but all events will still be recorded.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let do_not_disturb_describ = Rswift.StringResource(key: "do_not_disturb_describ", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let edit = Rswift.StringResource(key: "edit", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let edit2 = Rswift.StringResource(key: "edit2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_address = Rswift.StringResource(key: "email_address", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let enter_email_name = Rswift.StringResource(key: "enter_email_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_email = Rswift.StringResource(key: "input_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Email ID is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_email_format = Rswift.StringResource(key: "error_email_format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Enable
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let enabled = Rswift.StringResource(key: "enabled", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: End
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let end = Rswift.StringResource(key: "End", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: End do not disturb mode?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let end_do_not_disturb = Rswift.StringResource(key: "end_do_not_disturb", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: End time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_end_time = Rswift.StringResource(key: "sleep_end_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: English(English)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_en = Rswift.StringResource(key: "device_language_en", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Enter New Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_phone_number_new = Rswift.StringResource(key: "input_phone_number_new", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Enter Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_phone_number_simple = Rswift.StringResource(key: "input_phone_number_simple", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Enter a name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let name_required = Rswift.StringResource(key: "name_required", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Error message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_message = Rswift.StringResource(key: "error_message", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Español(Spanish)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_es = Rswift.StringResource(key: "device_language_es", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Expired QR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let expired_code = Rswift.StringResource(key: "expired_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Explore
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let explore = Rswift.StringResource(key: "explore", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Extended to 30 days of cloud recordings(no more than 5GB) to create the most secure video storage, so you never miss any critical moment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_payment_cloud_content = Rswift.StringResource(key: "dialog_payment_cloud_content", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Extended up to 60 days and 10GB cloud recording(3 types of awareness plans) to create the most secure video storage, so you will never miss any critical moment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let service_cloud_desc = Rswift.StringResource(key: "service_cloud_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Extra Cloud Recording Storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let gif_ad_1 = Rswift.StringResource(key: "gif_ad_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: F
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let friday = Rswift.StringResource(key: "friday", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: FAQ
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let help_center = Rswift.StringResource(key: "help_center", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to access the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_2002_short = Rswift.StringResource(key: "error_2002_short", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to access the camera. Please confirm whether this camera is on your list.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_2002 = Rswift.StringResource(key: "error_2002", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to change the password, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_password_failed = Rswift.StringResource(key: "change_password_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to connect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connection_failed = Rswift.StringResource(key: "connection_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to connect live stream.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_network_timeout = Rswift.StringResource(key: "live_network_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to delete, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let failed_to_delete_and_try = Rswift.StringResource(key: "failed_to_delete_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to download, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let download_faild_and_try = Rswift.StringResource(key: "download_faild_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to download, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let download_file_fail_and_try = Rswift.StringResource(key: "download_file_fail_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to format, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_card_format_failed = Rswift.StringResource(key: "sd_card_format_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to get SD card video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let faied_get_sdvideo = Rswift.StringResource(key: "faied_get_sdvideo", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to get a live stream.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_live_url_error = Rswift.StringResource(key: "get_live_url_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to get information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let failed_information = Rswift.StringResource(key: "failed_information", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to get information.(%d)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let failed_get_infomation = Rswift.StringResource(key: "failed_get_infomation", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to get the location.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_location_failed = Rswift.StringResource(key: "get_location_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to load
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let loading_failed = Rswift.StringResource(key: "loading_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to load video.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let load_message_error = Rswift.StringResource(key: "load_message_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to mark, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let marked_fail = Rswift.StringResource(key: "marked_fail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to record, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let record_failed = Rswift.StringResource(key: "record_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to restore.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let failed_restore = Rswift.StringResource(key: "failed_restore", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to save, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let save_failed_and_try = Rswift.StringResource(key: "save_failed_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to send alarm, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sent_alarm_failed = Rswift.StringResource(key: "sent_alarm_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to set position, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let failed_to_add_location = Rswift.StringResource(key: "failed_to_add_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to shot.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shot_fail = Rswift.StringResource(key: "shot_fail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to update firmware, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let firmware_update_fail = Rswift.StringResource(key: "firmware_update_fail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to update, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let fireware_update_failed = Rswift.StringResource(key: "fireware_update_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Failed to voice, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let voice_talk_failed_and_retry = Rswift.StringResource(key: "voice_talk_failed_and_retry", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Feb.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_2 = Rswift.StringResource(key: "month_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Feedback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let feedback = Rswift.StringResource(key: "feedback", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Feedback is not complete, do you want to abandon submission?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let library_feedback_not_complete = Rswift.StringResource(key: "library_feedback_not_complete", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Feedback successful, thank you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let library_feedback_success = Rswift.StringResource(key: "library_feedback_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Feedback successful. Thank you for your participation!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let feedback_submit_success = Rswift.StringResource(key: "feedback_submit_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let filter = Rswift.StringResource(key: "filter", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Filter data to get valid information
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_content_3 = Rswift.StringResource(key: "guide_content_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Find Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let p_location = Rswift.StringResource(key: "p_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Find the hole of reboot button, long-press it with the tool for 3 seconds to restart the camera. If it does not restart, you need to long-press the power supply for 3 seconds to turn on until you hear the power-up sound or see the light on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let long_press_reboot_directions = Rswift.StringResource(key: "long_press_reboot_directions", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let firmware_info = Rswift.StringResource(key: "firmware_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let fireware_update = Rswift.StringResource(key: "fireware_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware is installing …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_installing = Rswift.StringResource(key: "device_installing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware is up to date.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_update_scuess = Rswift.StringResource(key: "device_update_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware is upgrading, please wait.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let fireware_is_updating = Rswift.StringResource(key: "fireware_is_updating", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware is upgrading…
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_is_updating = Rswift.StringResource(key: "device_is_updating", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware upgraded successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let firmware_upgraded_successfully = Rswift.StringResource(key: "firmware_upgraded_successfully", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware upgraded timeout, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let firmware_update_timeout = Rswift.StringResource(key: "firmware_update_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware version (%@) is required to be updated for a better experience!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let fireware_need_update_tips = Rswift.StringResource(key: "fireware_need_update_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware version (%@) is required to be updated for a better experience!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let forck_update = Rswift.StringResource(key: "forck_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Firmware version (%@) is required to be updated. Please contact this camera's admin.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let forck_update_share = Rswift.StringResource(key: "forck_update_share", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Fix the camera to the desired location. You can directly place the camera on a flat surface or fix the bracket to the wall or ceiling by screws, and then screw the camera to the fixed base.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let install_bracket_2 = Rswift.StringResource(key: "install_bracket_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Flicker Rate
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let flicker_rate = Rswift.StringResource(key: "flicker_rate", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Follow the instruction and retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let follow_instruction_retry = Rswift.StringResource(key: "follow_instruction_retry", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Follow the steps and retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let follow_step_retry = Rswift.StringResource(key: "follow_step_retry", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: For a better experience, please update to the latest version.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let fireware_need_force_update_tips = Rswift.StringResource(key: "fireware_need_force_update_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: For battery cameras
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let for_battery_cameras = Rswift.StringResource(key: "for_battery_cameras", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: For plug-in cameras
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let for_plugin_cameras = Rswift.StringResource(key: "for_plugin_cameras", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: For your safety, the password must contain at least one uppercase letter, one lowercase letter, and have a minimum length of 8 characters.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let password_setting_tips = Rswift.StringResource(key: "password_setting_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: For your safety, the password must contain at least one uppercase letter, one lowercase letter, one number and has a minimum length of 8 characters.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_password_tips = Rswift.StringResource(key: "change_password_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Forgot password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let forgot_password_btn = Rswift.StringResource(key: "forgot_password_btn", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Forgot password?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let forgot_password_ = Rswift.StringResource(key: "forgot_password_", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Format
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let format = Rswift.StringResource(key: "format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Format SD card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let common_format = Rswift.StringResource(key: "common_format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Formatted SD card successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_card_format_success = Rswift.StringResource(key: "sd_card_format_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Français(French)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_fr = Rswift.StringResource(key: "device_language_fr", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Free 7-day cloud storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let free_info = Rswift.StringResource(key: "free_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Free trial for 30 days
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let free_30d = Rswift.StringResource(key: "free_30d", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: From
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let from_time = Rswift.StringResource(key: "from_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Front door
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let front_door = Rswift.StringResource(key: "front_door", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Garden
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let garden = Rswift.StringResource(key: "garden", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get Access to Friend's Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let join_new_device = Rswift.StringResource(key: "join_new_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get Awareness Service to use this function
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_pay_vip_first_2 = Rswift.StringResource(key: "please_pay_vip_first_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get Start!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_started = Rswift.StringResource(key: "get_started", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get a list of nearby Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let to_get_wifi_list_nearby = Rswift.StringResource(key: "to_get_wifi_list_nearby", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get location automatically from your phone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_location_static = Rswift.StringResource(key: "get_location_static", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get new pushes as soon as possible
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_new_pushes = Rswift.StringResource(key: "get_new_pushes", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_now = Rswift.StringResource(key: "get_now", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get redeem code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_coupon_bottom = Rswift.StringResource(key: "get_coupon_bottom", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get rid of unnecessary distractions
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_content_4 = Rswift.StringResource(key: "guide_content_4", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get the current Wi-Fi of your phone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let to_get_phone_wifi = Rswift.StringResource(key: "to_get_phone_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get video list error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let videolist_error = Rswift.StringResource(key: "videolist_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Get video list timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let videolist_timeout = Rswift.StringResource(key: "videolist_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Go live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_live = Rswift.StringResource(key: "go_live", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Go system settings >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_location_wifi_link = Rswift.StringResource(key: "open_location_wifi_link", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Go to system settings >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_system_settings = Rswift.StringResource(key: "go_system_settings", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Go to the APP homepage and click on the "+" sign in the upper right corner, and select "Add Friends' Camera”.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let how_to_add_friend_camera = Rswift.StringResource(key: "how_to_add_friend_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Got failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let receive_fail = Rswift.StringResource(key: "receive_fail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Got it
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let got_it = Rswift.StringResource(key: "got_it", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Got it
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let i_know = Rswift.StringResource(key: "i_know", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Got it, buy now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_to_buy = Rswift.StringResource(key: "go_to_buy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Got successfully, start using now!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let receive_scuess = Rswift.StringResource(key: "receive_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Guest
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guest = Rswift.StringResource(key: "guest", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Guest Request
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guest_request = Rswift.StringResource(key: "guest_request", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: HD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_hb = Rswift.StringResource(key: "video_hb", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: HD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_resolution_1080p = Rswift.StringResource(key: "video_resolution_1080p", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Having problems?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let have_problem = Rswift.StringResource(key: "have_problem", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let help = Rswift.StringResource(key: "help", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Help & Feedback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let help_feedback = Rswift.StringResource(key: "help_feedback", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: High
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let high = Rswift.StringResource(key: "high", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Hold and speak
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hold_speak = Rswift.StringResource(key: "hold_speak", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Hold the QR Code in front of your camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hold_qr_code_in_front = Rswift.StringResource(key: "hold_qr_code_in_front", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Hot
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hot = Rswift.StringResource(key: "hot", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Hot Country
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hot_country = Rswift.StringResource(key: "hot_country", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: How to add shared cameras?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hao_to_invite = Rswift.StringResource(key: "hao_to_invite", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: How to find the QR code on the camera body:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let find_qrcode_way = Rswift.StringResource(key: "find_qrcode_way", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: How to make package detection more accurate?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_guide = Rswift.StringResource(key: "package_guide", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: How would you like to name this %@ Camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let like_device_name = Rswift.StringResource(key: "like_device_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Humanoid Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let human_tracking = Rswift.StringResource(key: "human_tracking", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I Saw the Blue Light
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let say_green_light = Rswift.StringResource(key: "say_green_light", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I agree to send feedback issues and the original video (including all personal information) to help %@ perform analysis of the data. Please refer to the Privacy Policy.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_feedback_agree = Rswift.StringResource(key: "video_feedback_agree", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I did not hear "Scan QR code".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let unheard_scan_qr_code = Rswift.StringResource(key: "unheard_scan_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I did not hear anything.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_wifi_no_voice_error = Rswift.StringResource(key: "connect_wifi_no_voice_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I didn't hear "Scan QR code".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_hear_scan_qr_code = Rswift.StringResource(key: "not_hear_scan_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I didn’t hear "Scan QR code".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_no_qr_button = Rswift.StringResource(key: "scan_no_qr_button", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I didn’t saw the blue light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dont_say_green_light = Rswift.StringResource(key: "dont_say_green_light", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I filled in Wi-Fi information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_step_wifi_finish = Rswift.StringResource(key: "bind_step_wifi_finish", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I have read and agree with all the above contents.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let i_have_read_above_content = Rswift.StringResource(key: "i_have_read_above_content", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I hear a beeping sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let heard_scaning_sound = Rswift.StringResource(key: "heard_scaning_sound", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I hear a sound or see the light on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hear_beep = Rswift.StringResource(key: "hear_beep", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Authentication error"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_other = Rswift.StringResource(key: "connect_error_other", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Cloud service connection fail"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_no_voice = Rswift.StringResource(key: "connect_error_no_voice", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Other error".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_wifi_unkonw_error = Rswift.StringResource(key: "connect_wifi_unkonw_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Power Up".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hear_device_power_on = Rswift.StringResource(key: "hear_device_power_on", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Retrieving IP timeout"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_ip = Rswift.StringResource(key: "connect_error_ip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Scan QR Code"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let heard_scan_qr_code = Rswift.StringResource(key: "heard_scan_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Scan success"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let heard_qr_code = Rswift.StringResource(key: "heard_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Scan success"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let heard_scan_finished_other = Rswift.StringResource(key: "heard_scan_finished_other", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Scan success/finished"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let heard_scan_finished = Rswift.StringResource(key: "heard_scan_finished", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Wi-Fi SSID not found"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_wifi_net = Rswift.StringResource(key: "connect_error_wifi_net", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard "Wi-Fi password error"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_wifi = Rswift.StringResource(key: "connect_error_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard a failure message.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_heard_failed = Rswift.StringResource(key: "connect_heard_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I heard  the sound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hear_device_voice = Rswift.StringResource(key: "hear_device_voice", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I plugged in the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hear_device_power_on_s0 = Rswift.StringResource(key: "hear_device_power_on_s0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I pressed the reset button.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let already_long_press = Rswift.StringResource(key: "already_long_press", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: I understand and agree with
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let understanc_agree = Rswift.StringResource(key: "understanc_agree", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let id = Rswift.StringResource(key: "id", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If necessary, please contact the admin to wake up the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let admin_wakeup_camera = Rswift.StringResource(key: "admin_wakeup_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If necessary, please renew Awareness Service or download the video.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let renewal_download_tips = Rswift.StringResource(key: "renewal_download_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If no classification object is selected, this function will be invalid. Please select at least one item.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_no_item_choose = Rswift.StringResource(key: "notification_no_item_choose", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If not allowed to access, you will not be able to scan the QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission_dialog_message_get_camera = Rswift.StringResource(key: "permission_dialog_message_get_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If not allowed to access, you will not be able to use VicoHome to make audio calls.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission_dialog_message_get_mircrophone = Rswift.StringResource(key: "permission_dialog_message_get_mircrophone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the QR code is not found on the body shell and rubber plug. Please disassemble the movable shell to check whether there is a QR code on the inner body and the movable shell.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let qrcode_way3 = Rswift.StringResource(key: "qrcode_way3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the QR code is not found on the body shell. Please disassemble the rubber plug of the fuselage and check whether there is a QR code under the rubber plug.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let qrcode_way2 = Rswift.StringResource(key: "qrcode_way2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the camera is a little far away from the baby (eg 2 or 3 meters), it is recommended to use a medium sensitivity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let crying_detection_mid = Rswift.StringResource(key: "crying_detection_mid", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the camera is far away from the baby, such as 3 meters or longer, it is recommended to use high sensitivity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let crying_detection_high = Rswift.StringResource(key: "crying_detection_high", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the camera is very close to the baby, for example about 1 meter, it is recommended to use a low sensitivity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let crying_detection_low = Rswift.StringResource(key: "crying_detection_low", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the network condition is unstable, please wait patiently for up to 5 minutes.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason2 = Rswift.StringResource(key: "cannot_receive_code_reason2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the verification code email is not found in the trash box, it may be because we cannot send the verification code to your current email address. Please change to <![CDATA[<b>a normal international email address such as Gmail and Yahoo</b>]]> to receive Verification email.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason4 = Rswift.StringResource(key: "cannot_receive_code_reason4", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the verification code email is not found in the trash box, it may be because we cannot send the verification code to your current email address. Please change to a normal international email address such as Gmail and Yahoo to receive Verification email.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason6 = Rswift.StringResource(key: "cannot_receive_code_reason6", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If the video analysis result is wrong, please select the issues you want to report from the following options (multiple choices are available):
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let library_tag_contains = Rswift.StringResource(key: "library_tag_contains", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If you are the admin of the camera, you will lose the viewing and setting rights of this camera after deletion. If you are the shared person of the camera, you will lose the viewing right of this camera after deletion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_content_2 = Rswift.StringResource(key: "delete_notice_content_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If you do not continue to purchase after the current %@ Awareness expires, it will automatically change to the next one.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let other_plans_des = Rswift.StringResource(key: "other_plans_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If you encounter a situation where the live stream cannot be played, please upload the player log to help us find the problem.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let send_log = Rswift.StringResource(key: "send_log", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If you need the white light illumination function at night, please go to
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let white_tips = Rswift.StringResource(key: "white_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If you still do not receive the verification code after 5 minutes, <![CDATA[<b>please check it in the trash box of the receiving mailbox.</b>]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason3 = Rswift.StringResource(key: "cannot_receive_code_reason3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If you still do not receive the verification code after 5 minutes, please check it in the trash box of the receiving mailbox.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason5 = Rswift.StringResource(key: "cannot_receive_code_reason5", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If you want to share the camera, please make sure both the camera admin and shared user are registered in the same country.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let registrationsharing = Rswift.StringResource(key: "registrationsharing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: If not allowed to access, you will not be able to automatically fill in the Wi-Fi connection to your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission_dialog_message_get_location = Rswift.StringResource(key: "permission_dialog_message_get_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Ignore the error.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_3013 = Rswift.StringResource(key: "error_3013", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Ignored
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let already_ignore = Rswift.StringResource(key: "already_ignore", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Improper format
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_format_error = Rswift.StringResource(key: "sd_format_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: In order to cooperate with relevant policies and provide better services to users in China, VicoHome App changed to 全橙看家 App on %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_6_1 = Rswift.StringResource(key: "migration_statement_6_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to 全橙看家 App on %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_2_1 = Rswift.StringResource(key: "migration_statement_2_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to 全橙看家 App on %@. Please download 全橙看家 and sign up for your account. Thank you very much for your cooperation.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_7 = Rswift.StringResource(key: "migration_statement_7", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: In order to ensure that the received pictures, videos and other content can be browsed normally, you need to allow %@ to use the mobile phone storage access.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let if_storage_not_access = Rswift.StringResource(key: "if_storage_not_access", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: In order to protect your rights effectively, we have made the following updates in accordance with the latest legal rules and regulatory requirements:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_policy_desc = Rswift.StringResource(key: "get_policy_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Indicator light
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let indicator = Rswift.StringResource(key: "indicator", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Infrared illuminates the environment, showing a clearer black and white picture
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let infrared_des = Rswift.StringResource(key: "infrared_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Infrared mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let night_mode_red = Rswift.StringResource(key: "night_mode_red", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Initialize the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_initialize = Rswift.StringResource(key: "connect_initialize", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Install the bracket
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let install_bracket_1 = Rswift.StringResource(key: "install_bracket_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Install the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let install_the_camera = Rswift.StringResource(key: "install_the_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Installation Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let installation_settings = Rswift.StringResource(key: "installation_settings", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Installation guide
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let installation_guide = Rswift.StringResource(key: "installation_guide", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Installation suggestions
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let installation_suggestions = Rswift.StringResource(key: "installation_suggestions", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Installing…
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let installing = Rswift.StringResource(key: "installing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Intelligent Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_payment_ling_title = Rswift.StringResource(key: "dialog_payment_ling_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Intelligent Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let gif_ad_2 = Rswift.StringResource(key: "gif_ad_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Intelligent Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_title_3 = Rswift.StringResource(key: "guide_title_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Intelligent Recognition
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let intelligent_recognition = Rswift.StringResource(key: "intelligent_recognition", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Invalid QR code, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shared_invalid_qr_code = Rswift.StringResource(key: "shared_invalid_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Invalid QR code, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shared_qr_code_expired = Rswift.StringResource(key: "shared_qr_code_expired", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Invalid login credentials, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_no_register = Rswift.StringResource(key: "error_no_register", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Invalid request
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_3011 = Rswift.StringResource(key: "error_3011", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Invalid request
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let invalid_request = Rswift.StringResource(key: "invalid_request", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Issue feedback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let question_reply = Rswift.StringResource(key: "question_reply", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: It Requires Play Store to complete payment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_install_playstore = Rswift.StringResource(key: "please_install_playstore", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: It is recommended to place your camera at a height of about 8 inches and tilt it so that you can clearly see your doorway and the area where the package is located.  At the same time, the distance between the camera and the package should not exceed 10 inches.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_guide_two = Rswift.StringResource(key: "package_guide_two", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: It takes effect when the camera is online.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_scuess_offline = Rswift.StringResource(key: "notification_scuess_offline", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Italiano(Italian)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_it = Rswift.StringResource(key: "device_language_it", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Jan.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_1 = Rswift.StringResource(key: "month_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Jul.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_7 = Rswift.StringResource(key: "month_7", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Jun.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_6 = Rswift.StringResource(key: "month_6", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Keep the camera as close as possible to the router.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let issue_2 = Rswift.StringResource(key: "issue_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Keep your router and camera close
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let keep_router = Rswift.StringResource(key: "keep_router", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Last update %@at %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update_time_string = Rswift.StringResource(key: "update_time_string", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Learn how to use
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let learn_how_use = Rswift.StringResource(key: "learn_how_use", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let learn_more = Rswift.StringResource(key: "learn_more", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let learn_more_2 = Rswift.StringResource(key: "learn_more_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Leave a message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let iosZDKRequestsCreateRequestLeaveAMessageTitle = Rswift.StringResource(key: "ios.ZDKRequests.createRequest.leaveAMessage.title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Library
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let gallery = Rswift.StringResource(key: "gallery", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Library
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let library = Rswift.StringResource(key: "library", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Light Sensitivity Level
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sensitivity_level = Rswift.StringResource(key: "sensitivity_level", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Lighting Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let light_setting = Rswift.StringResource(key: "light_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live = Rswift.StringResource(key: "live", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live Stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_title_2 = Rswift.StringResource(key: "guide_title_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_feed = Rswift.StringResource(key: "live_feed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_play = Rswift.StringResource(key: "live_play", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let playback_is_living_now = Rswift.StringResource(key: "playback_is_living_now", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream and voice interaction at any time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_content_2 = Rswift.StringResource(key: "guide_content_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_stream_error = Rswift.StringResource(key: "live_stream_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream hasn't started yet.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_not_start = Rswift.StringResource(key: "live_not_start", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_stream_timeout = Rswift.StringResource(key: "live_stream_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live stream viewers have reached the limit, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_viewers_limit = Rswift.StringResource(key: "live_viewers_limit", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Live view error/offline issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_issue = Rswift.StringResource(key: "live_issue", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Living room
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let livingroom = Rswift.StringResource(key: "livingroom", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Load more data
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let more_data = Rswift.StringResource(key: "more_data", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Loading …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Locating …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let locating = Rswift.StringResource(key: "locating", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location = Rswift.StringResource(key: "location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_2 = Rswift.StringResource(key: "location_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_setting = Rswift.StringResource(key: "location_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location Management
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_management = Rswift.StringResource(key: "location_management", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location Name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_name = Rswift.StringResource(key: "location_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location Selection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_selection = Rswift.StringResource(key: "location_selection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location Services
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_service = Rswift.StringResource(key: "location_service", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location info error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_error = Rswift.StringResource(key: "location_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location name cannot be empty.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_not_ = Rswift.StringResource(key: "location_not_", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Location name required
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_name_required = Rswift.StringResource(key: "location_name_required", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Long press the button to turn on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_device_long_press = Rswift.StringResource(key: "add_device_long_press", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Long press the power button for 3s until you hear the power-up sound or see the light on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turn_on_camera_directions = Rswift.StringResource(key: "turn_on_camera_directions", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Long press the reboot button for 3 seconds and restart the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let long_press_reboot = Rswift.StringResource(key: "long_press_reboot", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Long press the reset button to scan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_power_key_reset = Rswift.StringResource(key: "double_click_power_key_reset", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Loss of all AI functions (Activity Zone, Intelligent Notification)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let loss_aifunction = Rswift.StringResource(key: "loss_aifunction", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Low
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let low = Rswift.StringResource(key: "low", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Low battery, unable to upgrade. Please charge the battery to at least 20% and retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let batter_low_upgrade = Rswift.StringResource(key: "batter_low_upgrade", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Low battery, unable to upgrade. Please charge the battery to at least 20% and retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ota_failed_low_power = Rswift.StringResource(key: "ota_failed_low_power", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: M
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let monday = Rswift.StringResource(key: "monday", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: M-PESA Pay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mtn_mpesa_payment = Rswift.StringResource(key: "mtn_mpesa_payment", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: MCU Version
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mcu_version = Rswift.StringResource(key: "mcu_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Mac Address
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mac_address = Rswift.StringResource(key: "mac_address", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Manage multiple cameras more easily
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let user_guide_desc_1 = Rswift.StringResource(key: "user_guide_desc_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Manual
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let manual_f = Rswift.StringResource(key: "manual_f", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Manual input
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let manual_input = Rswift.StringResource(key: "manual_input", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Mar.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_3 = Rswift.StringResource(key: "month_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Mark
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mark = Rswift.StringResource(key: "mark", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Mark
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let marked_f = Rswift.StringResource(key: "marked_f", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Marked successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let marked_success = Rswift.StringResource(key: "marked_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: May
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_5 = Rswift.StringResource(key: "month_5", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Medium
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let good = Rswift.StringResource(key: "good", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Medium
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let medium = Rswift.StringResource(key: "medium", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Microphone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let microphone = Rswift.StringResource(key: "microphone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Microphone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission_name_microphone = Rswift.StringResource(key: "permission_name_microphone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: MoMo Pay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let momo_payment = Rswift.StringResource(key: "momo_payment", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Model Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let model_number = Rswift.StringResource(key: "model_number", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: More
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let more = Rswift.StringResource(key: "more", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: More info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let more_info = Rswift.StringResource(key: "more_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: More options
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let more_selection = Rswift.StringResource(key: "more_selection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Motion Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let motion_detection = Rswift.StringResource(key: "motion_detection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Motion Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let motion_tracking = Rswift.StringResource(key: "motion_tracking", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Motion Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sport_auto = Rswift.StringResource(key: "sport_auto", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Motion detection issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let motion_issue = Rswift.StringResource(key: "motion_issue", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Move to the following locations
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let can_move_this_location = Rswift.StringResource(key: "can_move_this_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: My Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let my_device = Rswift.StringResource(key: "my_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: My House
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let my_house = Rswift.StringResource(key: "my_house", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Network Connection Timed Out.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let network_timeout = Rswift.StringResource(key: "network_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Network Error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let network_error = Rswift.StringResource(key: "network_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Network connection is unstable, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let network_low = Rswift.StringResource(key: "network_low", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Network searching
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_scanning = Rswift.StringResource(key: "wifi_scanning", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_email_new = Rswift.StringResource(key: "input_email_new", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_email = Rswift.StringResource(key: "new_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Feature：
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_feature = Rswift.StringResource(key: "new_feature", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_location = Rswift.StringResource(key: "new_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let num_new_message = Rswift.StringResource(key: "num_new_message", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_password = Rswift.StringResource(key: "new_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_phone = Rswift.StringResource(key: "new_phone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New Version：
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_version = Rswift.StringResource(key: "new_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_device = Rswift.StringResource(key: "new_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: New position
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let pre_position_add = Rswift.StringResource(key: "pre_position_add", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Next Step
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Next day
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nest_day = Rswift.StringResource(key: "nest_day", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Night Vision
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let night_version = Rswift.StringResource(key: "night_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Night Vision Mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let config_night_mode = Rswift.StringResource(key: "config_night_mode", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Night Vision Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let night_version_setting = Rswift.StringResource(key: "night_version_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_network = Rswift.StringResource(key: "no_network", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let common_service = Rswift.StringResource(key: "common_service", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_plan = Rswift.StringResource(key: "no_plan", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let plan_common = Rswift.StringResource(key: "plan_common", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let plan_no = Rswift.StringResource(key: "plan_no", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Plan VS %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let smart_common_contrast = Rswift.StringResource(key: "smart_common_contrast", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Signal
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_wifi_signal = Rswift.StringResource(key: "no_wifi_signal", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No Wi-Fi network available nearby.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_wifi_nearby = Rswift.StringResource(key: "no_wifi_nearby", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No access to this camera, please add it again or apply for permission to use.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_access = Rswift.StringResource(key: "no_access", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No available network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_no_net = Rswift.StringResource(key: "error_no_net", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No available network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nodata_no_wifi_tip = Rswift.StringResource(key: "nodata_no_wifi_tip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No available network connection. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let network_unavailable_and_try = Rswift.StringResource(key: "network_unavailable_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_camera = Rswift.StringResource(key: "no_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No camera permission, please retry after setting >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_camera_auth = Rswift.StringResource(key: "no_camera_auth", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No data
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nodata_tip = Rswift.StringResource(key: "nodata_tip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No data recorded for this day.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let nodata_libary_tip = Rswift.StringResource(key: "nodata_libary_tip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No item selected
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_item_selected = Rswift.StringResource(key: "no_item_selected", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No location information
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_locations = Rswift.StringResource(key: "no_locations", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No more video in SD card.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sdcard_no_more_video = Rswift.StringResource(key: "sdcard_no_more_video", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No network available. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let toast_network_unavailable_and_try = Rswift.StringResource(key: "toast_network_unavailable_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No permission to operate this camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_auth_limitation = Rswift.StringResource(key: "device_auth_limitation", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No resumable orders
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_resumable_order = Rswift.StringResource(key: "no_resumable_order", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No time zone selected.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_select_timezone = Rswift.StringResource(key: "no_select_timezone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No video at this time.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_no_data_date = Rswift.StringResource(key: "sd_no_data_date", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: No video in SD card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sdcard_has_no_video = Rswift.StringResource(key: "sdcard_has_no_video", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Not allowed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_allow = Rswift.StringResource(key: "not_allow", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Not playing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let toast_zone_not_playing = Rswift.StringResource(key: "toast_zone_not_playing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Not sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_logged_in = Rswift.StringResource(key: "not_logged_in", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Not sure which camera to choose？
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_other_device = Rswift.StringResource(key: "device_other_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Notification Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_setting = Rswift.StringResource(key: "notification_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Nov
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_11 = Rswift.StringResource(key: "month_11", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_know_it = Rswift.StringResource(key: "payment_know_it", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: OK. I will find someone who can help with your query.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let iosConversationUiChatWelcome_messageHandover = Rswift.StringResource(key: "ios.conversation.ui.chat.welcome_message.handover", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Obtain the current Wi-Fi name of the phone automatically through location services (recommended) or manually enter the Wi-Fi name (case sensitive).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_location_wifi = Rswift.StringResource(key: "open_location_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Oct.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_10 = Rswift.StringResource(key: "month_10", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Off
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let close_led = Rswift.StringResource(key: "close_led", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Off
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_open = Rswift.StringResource(key: "not_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Office
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let office = Rswift.StringResource(key: "office", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Offline
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let offline = Rswift.StringResource(key: "offline", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Old Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let old_password = Rswift.StringResource(key: "old_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: On
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_led = Rswift.StringResource(key: "open_led", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: On
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let opened = Rswift.StringResource(key: "opened", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Online
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let online = Rswift.StringResource(key: "online", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Only %d positions can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let more_pre_location = Rswift.StringResource(key: "more_pre_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Only five positions can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let pre_location_max_5 = Rswift.StringResource(key: "pre_location_max_5", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Only three activity zones can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let toast_add_zone_total_3 = Rswift.StringResource(key: "toast_add_zone_total_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Open Location Services
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_location_service = Rswift.StringResource(key: "open_location_service", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Open Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_wifi = Rswift.StringResource(key: "open_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Open now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_open = Rswift.StringResource(key: "go_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Open the admin's APP Camera Setting / Share / Camera Sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_info_des = Rswift.StringResource(key: "scan_info_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Optional, we will contact you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hint_feedback_contact = Rswift.StringResource(key: "hint_feedback_contact", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Options detail
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let service_detail = Rswift.StringResource(key: "service_detail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let other = Rswift.StringResource(key: "other", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Other %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let other_plans = Rswift.StringResource(key: "other_plans", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Other problems / No sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_other_error = Rswift.StringResource(key: "add_other_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Other, click to fill in the error description.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_feedback_cell_other = Rswift.StringResource(key: "video_feedback_cell_other", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let others = Rswift.StringResource(key: "others", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Package (Beta)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_tag = Rswift.StringResource(key: "package_tag", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Package Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let detection_parcel = Rswift.StringResource(key: "detection_parcel", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Package delivered
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_down = Rswift.StringResource(key: "package_down", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Package picked up
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_up = Rswift.StringResource(key: "package_up", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Package stranded
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_detained = Rswift.StringResource(key: "package_detained", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let enter_password = Rswift.StringResource(key: "enter_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_requirements = Rswift.StringResource(key: "check_requirements", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_password_input_format = Rswift.StringResource(key: "error_password_input_format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password is wrong.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let pwd_error = Rswift.StringResource(key: "pwd_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password not filled
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_password = Rswift.StringResource(key: "no_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password or verification code is wrong.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let password_code_error = Rswift.StringResource(key: "password_code_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Password:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_password = Rswift.StringResource(key: "wifi_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_generate_order = Rswift.StringResource(key: "payment_generate_order", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pay Order
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_pay = Rswift.StringResource(key: "payment_pay", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pay now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_to_buy = Rswift.StringResource(key: "payment_to_buy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Payment canceled
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let apple_cancle = Rswift.StringResource(key: "apple_cancle", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Payment failed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_pay_failed_totally = Rswift.StringResource(key: "payment_pay_failed_totally", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Payment failed, please go to Play Store to check your login status.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_play_store_fail = Rswift.StringResource(key: "payment_play_store_fail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Payment failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_pay_failed = Rswift.StringResource(key: "payment_pay_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Payment successful
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_pay_success = Rswift.StringResource(key: "payment_pay_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission = Rswift.StringResource(key: "permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Person
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_detection_people = Rswift.StringResource(key: "notification_detection_people", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Person
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let person = Rswift.StringResource(key: "person", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Person
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let person_alerts = Rswift.StringResource(key: "person_alerts", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Person Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let detection_pedestrian = Rswift.StringResource(key: "detection_pedestrian", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Person Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let detection_person = Rswift.StringResource(key: "detection_person", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pet
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ai_pet = Rswift.StringResource(key: "ai_pet", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pet
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let pet = Rswift.StringResource(key: "pet", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_number = Rswift.StringResource(key: "phone_number", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Phone Number/Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_or_phone_number = Rswift.StringResource(key: "email_or_phone_number", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Phone Number/Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_phone_address = Rswift.StringResource(key: "email_phone_address", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Phone number/Email ID is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_phone_email_format = Rswift.StringResource(key: "error_phone_email_format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Photos
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let photos = Rswift.StringResource(key: "photos", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pictures (optional, upload a screenshot of this problem)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let image_and_screen_shot = Rswift.StringResource(key: "image_and_screen_shot", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pictures (optional, upload a screenshot of this problem)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let questions_pictures = Rswift.StringResource(key: "questions_pictures", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Place the QR code on your phone about 6-12 inches in front of the camera to scan, and complete the scan after hearing the sound of successful scanning.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_scan = Rswift.StringResource(key: "bind_device_scan", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Place the QR code on your phone about 6-12inches in front of the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_des = Rswift.StringResource(key: "scan_qr_code_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Place the camera 6-12inches in front of the QR code. If it has not been scanned for a long time, please move it back and forth. You can refer to the figure on the previous page.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_notice2 = Rswift.StringResource(key: "scan_qr_code_notice2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Play SD card video error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sdvideo_error = Rswift.StringResource(key: "sdvideo_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Play SD card video timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sdvideo_timeout = Rswift.StringResource(key: "sdvideo_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Playback video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let playback_video = Rswift.StringResource(key: "playback_video", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please Select
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_select = Rswift.StringResource(key: "please_select", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please allow location access to help you automatically fill in Wi-Fi info.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_permission_word = Rswift.StringResource(key: "location_permission_word", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please allow photos access in phone settings.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let allow_libary = Rswift.StringResource(key: "allow_libary", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please change another email ID.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let same_email = Rswift.StringResource(key: "same_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please change another phone number.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let same_phone = Rswift.StringResource(key: "same_phone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please check if your router is connected to an available network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_failed_1 = Rswift.StringResource(key: "connect_error_failed_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please check whether you have selected or entered the correct Wi-Fi name (SSID).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_ap_1 = Rswift.StringResource(key: "connect_error_ap_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please check your network and try again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_net_config = Rswift.StringResource(key: "check_net_config", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please check your network and try again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let join_device_timeout = Rswift.StringResource(key: "join_device_timeout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please choose from the following question types
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let choose_question_type = Rswift.StringResource(key: "choose_question_type", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please choose the item first
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_choose_vip_item_first = Rswift.StringResource(key: "payment_choose_vip_item_first", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please describe your issue and tell us your camera model first. (You can find your camera model on the label affixed to the camera. Or you can take off the shell of the camera or open the rubber cover of the camera to find your camera model. The camera model is G0, CGXX(for example CG1), CBXX(for example CB1), JXJ-FA01, etc. )
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let iosAnswer_botTextLabelAsk_a_question = Rswift.StringResource(key: "ios.answer_bot.text.label.ask_a_question", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please don’t forget to select the package in Notification Settings / Classification.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_guide_five = Rswift.StringResource(key: "package_guide_five", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please double click the power button to make the camera enter the scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_power_button = Rswift.StringResource(key: "double_click_power_button", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please double-check the format requirements.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let password_or_code_invalid = Rswift.StringResource(key: "password_or_code_invalid", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please download 全橙看家 in time. You can sign in to 全橙看家 directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_2_2 = Rswift.StringResource(key: "migration_statement_2_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: Please enable the microphone in phone settings.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reject_audio = Rswift.StringResource(key: "reject_audio", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter a phone number you want to bind.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let forgot_password_not_login_account = Rswift.StringResource(key: "forgot_password_not_login_account", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter a phone number/email ID in the correct format.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_phone_number_invalid_tips = Rswift.StringResource(key: "email_phone_number_invalid_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter a valid Wi-Fi name (SSID).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let tips_ssid_empty = Rswift.StringResource(key: "tips_ssid_empty", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter a valid camera name.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_name_invalid_tips = Rswift.StringResource(key: "device_name_invalid_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter a valid email ID.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_invalid_tips = Rswift.StringResource(key: "email_invalid_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter a valid password.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let tips_wifi_password_empty = Rswift.StringResource(key: "tips_wifi_password_empty", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter an email ID you want to bind, We will send the verification code to you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_email_send = Rswift.StringResource(key: "input_email_send", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter an email ID you want to bind, We will send the verification code to you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_email_you_bind = Rswift.StringResource(key: "input_email_you_bind", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the account you want to reset password, and we’ll send a verification code to you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let forgot_password_tips = Rswift.StringResource(key: "forgot_password_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the camera name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let enter_device_name = Rswift.StringResource(key: "enter_device_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the network name (SSID) and password to be connected to the camera. Currently 5GHz Wi-Fi and enterprise Wi-Fi are not supported. Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_wifi_tips = Rswift.StringResource(key: "connect_wifi_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the new email address you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_new_email = Rswift.StringResource(key: "input_new_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the new phone number you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_new_phone = Rswift.StringResource(key: "input_new_phone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the phone number in the correct format.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_number_invalid_tips = Rswift.StringResource(key: "phone_number_invalid_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the phone number you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_phone_number_you_bind = Rswift.StringResource(key: "input_phone_number_you_bind", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the phone number you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_phone_send = Rswift.StringResource(key: "input_phone_send", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter the redeem code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let enter_coupon = Rswift.StringResource(key: "enter_coupon", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter your email ID and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sign_up_tips = Rswift.StringResource(key: "sign_up_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter your mobile phone number/email ID, we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mail_phone_register_des = Rswift.StringResource(key: "mail_phone_register_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please enter your mobile phone number/email ID, we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sign_up_tips_phone_email = Rswift.StringResource(key: "sign_up_tips_phone_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please fill in a more than 10 words statement so that we can provide better help.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let hint_feedback = Rswift.StringResource(key: "hint_feedback", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please fill in a more than 10 words statement.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let questions_statement_error = Rswift.StringResource(key: "questions_statement_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please go to MoMo to pay for the order. If the payment has been completed, please wait.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mtn_go_momo_or_wait = Rswift.StringResource(key: "mtn_go_momo_or_wait", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please long press the power button 3s until you hear a sound from the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let battery_camera_tips = Rswift.StringResource(key: "battery_camera_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please long press the reset button for 3s to make the camera enter the scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let long_press_reset_button = Rswift.StringResource(key: "long_press_reset_button", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please make sure that the Wifi password you entered is correct and it is case sensitive.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_password_1 = Rswift.StringResource(key: "connect_error_password_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please make sure that the package is clearly visible on the camera view and is not obscured by other objects.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_guide_four_tips = Rswift.StringResource(key: "package_guide_four_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please make sure that your Wi-Fi network is not an enterprise network connection method, and the camera only supports networks with a security level below WPA-2.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_method = Rswift.StringResource(key: "connect_error_method", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please make sure your phone is connected to a valid network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let to_coninue_please_check_internet = Rswift.StringResource(key: "to_coninue_please_check_internet", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please open  Location Services" in your phone system settings."
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_open_location_service = Rswift.StringResource(key: "please_open_location_service", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please pay attention to data in a non-WiFi environment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let pay_attention_data = Rswift.StringResource(key: "pay_attention_data", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please place the camera near the Wi-Fi router and make sure the router is connected to a power source
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_ap_2 = Rswift.StringResource(key: "connect_error_ap_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please place the camera where you need to install the camera and check the strength of the Wi-Fi signal.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_wifi_0 = Rswift.StringResource(key: "check_wifi_0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please plug in a power source until you hear a sound from the camera and complete the rotation.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let plugin_camera_tips = Rswift.StringResource(key: "plugin_camera_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please press the power button or connect a power source until you hear a sound or see the light on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let make_sure_cemera_on = Rswift.StringResource(key: "make_sure_cemera_on", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please read it carefully and click Agree and Continue" to indicate that you have read and agreed to all the terms."
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_read_policy_and_agree = Rswift.StringResource(key: "please_read_policy_and_agree", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please reconfirm whether your Wi-Fi name (SSID) and Password are correct (case sensitive).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_confim = Rswift.StringResource(key: "wifi_confim", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please reconnect to the previous Wi-Fi in the phone system settings, and return to this page after the operation is complete to check the camera's binding result.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reconnect_wifi = Rswift.StringResource(key: "reconnect_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please rotate the body to check if there is a QR code on the body shell.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let qrcode_way1 = Rswift.StringResource(key: "qrcode_way1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please scan the QR code first
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_scan_qr_code_first = Rswift.StringResource(key: "please_scan_qr_code_first", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please scan the QR code of the camera admin
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let share_scan_qr_content = Rswift.StringResource(key: "share_scan_qr_content", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please select the User Agreement and Privacy Policy.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_terms = Rswift.StringResource(key: "select_terms", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please select the error message you hear
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let choose_error_msg = Rswift.StringResource(key: "choose_error_msg", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please select the issues you want to report from the following options (multiple choices are available):
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let library_no_tag = Rswift.StringResource(key: "library_no_tag", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please select the relevant terms.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_feedback_check = Rswift.StringResource(key: "video_feedback_check", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please try another Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_failed_3 = Rswift.StringResource(key: "connect_error_failed_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please try another Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_ip_3 = Rswift.StringResource(key: "connect_error_ip_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please try to restart the router and reconnect.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_failed_2 = Rswift.StringResource(key: "connect_error_failed_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please try to restart the router and reconnect.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_ip_2 = Rswift.StringResource(key: "connect_error_ip_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please turn on Wi-Fi access in phone settings.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_turn_on_wifi_setting = Rswift.StringResource(key: "please_turn_on_wifi_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please turn on the floating window switch.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_open_permission = Rswift.StringResource(key: "please_open_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Please use %@ APP to scan the QR code below to add a camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let use_app_scan = Rswift.StringResource(key: "use_app_scan", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Plug-in camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let plugin_camera = Rswift.StringResource(key: "plugin_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Plugin
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_device_plugin = Rswift.StringResource(key: "add_device_plugin", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Plus
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let plan_plus = Rswift.StringResource(key: "plan_plus", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Position
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let preset_location = Rswift.StringResource(key: "preset_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Position added successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_preset_scuess = Rswift.StringResource(key: "add_preset_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Postal Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let postal_code = Rswift.StringResource(key: "postal_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Power saving
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep = Rswift.StringResource(key: "sleep", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Press again to exit %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let double_click_exit = Rswift.StringResource(key: "double_click_exit", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let privacy_policy = Rswift.StringResource(key: "privacy_policy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let privacy_policy_2 = Rswift.StringResource(key: "privacy_policy_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pro
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let plan_pro = Rswift.StringResource(key: "plan_pro", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Processed successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let handler_success = Rswift.StringResource(key: "handler_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Prompt
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let prompt = Rswift.StringResource(key: "prompt", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Push Button
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_device_push_button = Rswift.StringResource(key: "add_device_push_button", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Push Notifications
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_push = Rswift.StringResource(key: "notification_push", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Pусский(Russian)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_ru = Rswift.StringResource(key: "device_language_ru", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: QR code can be found under the path
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_info_title = Rswift.StringResource(key: "scan_info_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: QR code is wrong
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wrong_code = Rswift.StringResource(key: "wrong_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: QR code was not found, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_qr_code = Rswift.StringResource(key: "no_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: QR code was not found, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let qr_code_not_found = Rswift.StringResource(key: "qr_code_not_found", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: QR code will expire at %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let qr_expire = Rswift.StringResource(key: "qr_expire", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Question type
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let question_type = Rswift.StringResource(key: "question_type", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Questions and Comments
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let problem_and_feedback = Rswift.StringResource(key: "problem_and_feedback", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Quick connect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let quick_connect = Rswift.StringResource(key: "quick_connect", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Recognition people, pet, and vehicle in the video and analyze their actions to get a smarter notification.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_payment_ling_content = Rswift.StringResource(key: "dialog_payment_ling_content", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Recognition people, pet, and vehicle in the video and analyze their actions to get a smarter notification.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let service_ai_notify_desc = Rswift.StringResource(key: "service_ai_notify_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reconnect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reconnect = Rswift.StringResource(key: "reconnect", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reconnect Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reconnect_wifi_camera = Rswift.StringResource(key: "reconnect_wifi_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reconnect to Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reconnect_wifi_button = Rswift.StringResource(key: "reconnect_wifi_button", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Record Video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let record_video = Rswift.StringResource(key: "record_video", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Redeem Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let coupon = Rswift.StringResource(key: "coupon", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Redeem code has been used.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let coupon_used = Rswift.StringResource(key: "coupon_used", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Redeem code has expired.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let coupon_expire = Rswift.StringResource(key: "coupon_expire", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reference operation instruction to find the power button
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reference_instruction_power = Rswift.StringResource(key: "reference_instruction_power", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reference operation instructions to find the reboot buttonhole.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reference_instruction_reboot = Rswift.StringResource(key: "reference_instruction_reboot", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Refresh
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let refresh = Rswift.StringResource(key: "refresh", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Register to the cloud service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_register = Rswift.StringResource(key: "connect_register", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reject
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reject = Rswift.StringResource(key: "reject", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Release to refresh
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let load_more_title = Rswift.StringResource(key: "load_more_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Release to stop
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let release_stop = Rswift.StringResource(key: "release_stop", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Remember Wi-Fi name and password after successful connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_save_wifi = Rswift.StringResource(key: "bind_device_save_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Remember password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let remember_password = Rswift.StringResource(key: "remember_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Remind me next time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let migration_statement_5 = Rswift.StringResource(key: "migration_statement_5", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Remove Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let remove_device = Rswift.StringResource(key: "remove_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Removed camera successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let remove_device_success = Rswift.StringResource(key: "remove_device_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Replace Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let replace_wifi = Rswift.StringResource(key: "replace_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Replaced email ID successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_change_success = Rswift.StringResource(key: "email_change_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Replaced phone number successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_number_change_success = Rswift.StringResource(key: "phone_number_change_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Replay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let replay = Rswift.StringResource(key: "replay", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Request expired, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let request_expired = Rswift.StringResource(key: "request_expired", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Request is expired. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_3012 = Rswift.StringResource(key: "error_3012", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Request timed out, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let request_timeout_and_try = Rswift.StringResource(key: "request_timeout_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Resend
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let resent_verification_code = Rswift.StringResource(key: "resent_verification_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Resend after %@%@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let resend_after_tip_ios = Rswift.StringResource(key: "resend_after_tip_ios", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Resend after %ds
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let resend_after_tip = Rswift.StringResource(key: "resend_after_tip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reset
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reset = Rswift.StringResource(key: "reset", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Reset password successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reset_password_success = Rswift.StringResource(key: "reset_password_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Resolution
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_resolution = Rswift.StringResource(key: "video_resolution", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Restore purchase order
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let restore_purchase_record = Rswift.StringResource(key: "restore_purchase_record", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Restore successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let restore_successfully = Rswift.StringResource(key: "restore_successfully", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retrieve by email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let find_password_by_phone = Rswift.StringResource(key: "find_password_by_phone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retrieve by phone number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let find_password_by_email = Rswift.StringResource(key: "find_password_by_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_retry = Rswift.StringResource(key: "please_retry", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let retry = Rswift.StringResource(key: "retry", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let retry2 = Rswift.StringResource(key: "retry2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retry after troubleshooting the following problems or use scan code adding
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let troubleshooting_issue = Rswift.StringResource(key: "troubleshooting_issue", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retry connecting camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reconnect_camera = Rswift.StringResource(key: "reconnect_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Retry later
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let try_later = Rswift.StringResource(key: "try_later", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Rotate Image
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let rotate_image = Rswift.StringResource(key: "rotate_image", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: S
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let saturday = Rswift.StringResource(key: "saturday", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: S
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sunday = Rswift.StringResource(key: "sunday", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: S/N
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let serial_number = Rswift.StringResource(key: "serial_number", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ratio_720p = Rswift.StringResource(key: "ratio_720p", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_resolution_720p = Rswift.StringResource(key: "video_resolution_720p", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD Card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_card = Rswift.StringResource(key: "sd_card", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD Card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_management = Rswift.StringResource(key: "sd_management", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD Card Video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sdcard_7_24 = Rswift.StringResource(key: "sdcard_7_24", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_strorage = Rswift.StringResource(key: "sd_strorage", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card format is improper, format it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_error = Rswift.StringResource(key: "sd_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card format is incorrect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sdcard_need_format = Rswift.StringResource(key: "sdcard_need_format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card format is incorrect, please contact the admin to format.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sdcard_need_format_shared = Rswift.StringResource(key: "sdcard_need_format_shared", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card is formatting …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_card_formating = Rswift.StringResource(key: "sd_card_formating", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card is formatting, please wait.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_is_formatting = Rswift.StringResource(key: "sd_is_formatting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card not detected
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_card_not_exist = Rswift.StringResource(key: "sd_card_not_exist", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card not support
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_supper = Rswift.StringResource(key: "sd_supper", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card video play completed.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let live_play_finish = Rswift.StringResource(key: "live_play_finish", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SD card video viewers have reached the limit, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sDcard_video_viewers_limit = Rswift.StringResource(key: "SDcard_video_viewers_limit", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: SM
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_smooth = Rswift.StringResource(key: "video_smooth", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Save current location information?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_not_save = Rswift.StringResource(key: "location_not_save", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Save to phone album
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let save_album = Rswift.StringResource(key: "save_album", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Save to phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let record_success = Rswift.StringResource(key: "record_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Save to phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let save_to_evaeye_album = Rswift.StringResource(key: "save_to_evaeye_album", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Save to phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shot_success = Rswift.StringResource(key: "shot_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Saved Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_saved = Rswift.StringResource(key: "bind_device_saved", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Saved location successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_save_success = Rswift.StringResource(key: "location_save_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Saved successfully
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let saved_success = Rswift.StringResource(key: "saved_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan QR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_camera_qr_code = Rswift.StringResource(key: "scan_camera_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan QR code to connect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_the_qr_code = Rswift.StringResource(key: "scan_the_qr_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan QR code with the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_title = Rswift.StringResource(key: "scan_qr_code_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan the QR code about 6-12inches in front of the camera after hearing the scanning sound or seeing the flashing light, and complete scanning when you hear another sound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_directions = Rswift.StringResource(key: "scan_qr_code_directions", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan the QR code about 6-12inches in front of the camera. Complete scanning when you hear another sound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_QR_code_directions = Rswift.StringResource(key: "scan_QR_code_directions", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan the QR code on the camera with your mobile phone to confirm the model number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_model_number = Rswift.StringResource(key: "confirm_model_number", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan the QR code with the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_QR_code = Rswift.StringResource(key: "scan_QR_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scan the QR code with your phone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qrcode_by_phone = Rswift.StringResource(key: "scan_qrcode_by_phone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scanned successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let qr_scurss = Rswift.StringResource(key: "qr_scurss", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Scene Settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scene = Rswift.StringResource(key: "scene", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let auto_sleep = Rswift.StringResource(key: "auto_sleep", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Schedule Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let schedule_time = Rswift.StringResource(key: "schedule_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Screen
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let screenshots = Rswift.StringResource(key: "screenshots", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Screenshot sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let screenshot_sharing = Rswift.StringResource(key: "screenshot_sharing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Searching for nearby bluetooth devices
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let search_buletooth = Rswift.StringResource(key: "search_buletooth", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select Items
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_items = Rswift.StringResource(key: "select_items", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select Wi-Fi for the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_wifi_title = Rswift.StringResource(key: "select_wifi_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select a good spot for your camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_spot_1 = Rswift.StringResource(key: "select_spot_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select a good spot for your camera, please install the camera in a position where its view is not blocked and ensure that it is within the coverage of the Wi-Fi network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let selcet_spot_2 = Rswift.StringResource(key: "selcet_spot_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select all
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_all = Rswift.StringResource(key: "select_all", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select duration
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_choose_buy_time = Rswift.StringResource(key: "payment_choose_buy_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_network = Rswift.StringResource(key: "select_network", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select package
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_guide_four = Rswift.StringResource(key: "package_guide_four", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select the camera to add
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_camera = Rswift.StringResource(key: "select_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Select the camera to be added
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_camera_add = Rswift.StringResource(key: "select_camera_add", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_phone_verify_code = Rswift.StringResource(key: "get_phone_verify_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sending verification code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sendingcode = Rswift.StringResource(key: "sendingcode", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sep.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let month_9 = Rswift.StringResource(key: "month_9", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Server Error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let server_error = Rswift.StringResource(key: "server_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Server error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let system_maintenance = Rswift.StringResource(key: "system_maintenance", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Server timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let network_error_our_server = Rswift.StringResource(key: "network_error_our_server", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Service Center
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let service_center = Rswift.StringResource(key: "service_center", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let set = Rswift.StringResource(key: "set", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set New Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let create_new_password = Rswift.StringResource(key: "create_new_password", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let create_your_account = Rswift.StringResource(key: "create_your_account", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set a camera name and location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let new_bind_device_name = Rswift.StringResource(key: "new_bind_device_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let set_az = Rswift.StringResource(key: "set_az", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set frequently watched positions, you can find frequently watched positions with one key at any time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let position_tips = Rswift.StringResource(key: "position_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_set = Rswift.StringResource(key: "go_set", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set successfully
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let setup_success = Rswift.StringResource(key: "setup_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set the activity zone, only push the trigger message at the precise location, and filter out the rest of the information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_payment_zone_content = Rswift.StringResource(key: "dialog_payment_zone_content", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set the activity zone, only push the trigger message at the precise location, and filter out the rest of the information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let service_area_desc = Rswift.StringResource(key: "service_area_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set the time period to make the camera automatically go to sleep
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_period_etting = Rswift.StringResource(key: "sleep_period_etting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Set up humanoid tracking >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let tracking_guide_2 = Rswift.StringResource(key: "tracking_guide_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Setting failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_fail_retry = Rswift.StringResource(key: "open_fail_retry", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let share = Rswift.StringResource(key: "share", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Share failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let share_error = Rswift.StringResource(key: "share_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Shared By
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shared_by = Rswift.StringResource(key: "shared_by", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Shared by %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shared_by_ = Rswift.StringResource(key: "shared_by_", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Shared cameras
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shared_devices = Rswift.StringResource(key: "shared_devices", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Shared to:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let share_to = Rswift.StringResource(key: "share_to", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sharing = Rswift.StringResource(key: "sharing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let has_account_and_login = Rswift.StringResource(key: "has_account_and_login", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let resign_in = Rswift.StringResource(key: "resign_in", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sign_in = Rswift.StringResource(key: "sign_in", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sign_in_little = Rswift.StringResource(key: "sign_in_little", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sign out
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sign_up_register = Rswift.StringResource(key: "sign_up_register", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sign up for a New Account
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sign_up = Rswift.StringResource(key: "sign_up", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Size：
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let size = Rswift.StringResource(key: "size", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let skip = Rswift.StringResource(key: "skip", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sleep
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_mode = Rswift.StringResource(key: "sleep_mode", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sleep Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_setting = Rswift.StringResource(key: "sleep_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sleep period
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_period = Rswift.StringResource(key: "sleep_period", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sleep plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_plan = Rswift.StringResource(key: "sleep_plan", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sleeping
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleeping = Rswift.StringResource(key: "sleeping", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sleeping time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_time = Rswift.StringResource(key: "sleep_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_new_device_g = Rswift.StringResource(key: "add_new_device_g", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_new_device_b = Rswift.StringResource(key: "add_new_device_b", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sorry, failed to feedback, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let feedback_failed = Rswift.StringResource(key: "feedback_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sorry, failed to feedback. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let library_feedback_failed = Rswift.StringResource(key: "library_feedback_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sound = Rswift.StringResource(key: "sound", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Sound Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sound_setting = Rswift.StringResource(key: "sound_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Source
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let source = Rswift.StringResource(key: "source", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Speaker
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let speaker = Rswift.StringResource(key: "speaker", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Speaker volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let speaker_volume = Rswift.StringResource(key: "speaker_volume", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Split Screen
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let split_screen = Rswift.StringResource(key: "split_screen", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Start time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_start_time = Rswift.StringResource(key: "sleep_start_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: State/Province/Region
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let province_region = Rswift.StringResource(key: "province_region", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Status LED
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let status_led = Rswift.StringResource(key: "status_led", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Status:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_state_ios = Rswift.StringResource(key: "device_state_ios", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Status: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_state = Rswift.StringResource(key: "device_state", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Stay on this page
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let stay_this_page = Rswift.StringResource(key: "stay_this_page", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let storage = Rswift.StringResource(key: "storage", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Storage access is required to use the app.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let permission_dialog_message_get_storage = Rswift.StringResource(key: "permission_dialog_message_get_storage", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Street
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let select_street = Rswift.StringResource(key: "select_street", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Street and number, P.O. box, c/o.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let address1_placeholder = Rswift.StringResource(key: "address1_placeholder", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Street and number, P.O. box, c/o.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let street_address_1 = Rswift.StringResource(key: "street_address_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Street and number, P.O. box, c/o.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let street_address_1_place_holder = Rswift.StringResource(key: "street_address_1_place_holder", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Strong
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let strong = Rswift.StringResource(key: "strong", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let submit = Rswift.StringResource(key: "submit", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Submit Deletion
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let submit_deletion = Rswift.StringResource(key: "submit_deletion", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Subscribe %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let go_buy_plus = Rswift.StringResource(key: "go_buy_plus", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Subscribe now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cloud_service_buy = Rswift.StringResource(key: "cloud_service_buy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Suomi(Finnish)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_fi = Rswift.StringResource(key: "device_language_fi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: System Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let system_update = Rswift.StringResource(key: "system_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: System Version
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let system_version = Rswift.StringResource(key: "system_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let other_error_with_code = Rswift.StringResource(key: "other_error_with_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let other_errors = Rswift.StringResource(key: "other_errors", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let unknown_error_ios = Rswift.StringResource(key: "unknown_error_ios", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let unkonw_error = Rswift.StringResource(key: "unkonw_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: T
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let thursday = Rswift.StringResource(key: "thursday", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: T
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let tuesday = Rswift.StringResource(key: "tuesday", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Tansfer to staff service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let iosConversationUiChatHandoverMessageSelection = Rswift.StringResource(key: "ios.conversation.ui.chat.handover.message.selection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The Bluetooth of this phone is turned off. Turn on the Bluetooth to add the camera faster.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_bluetooth_help_adding = Rswift.StringResource(key: "open_bluetooth_help_adding", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The QR code on the camera is on a paper sticker, often located inside the outer cases or under the rubber plug. This QR code contains the serial number and type number, usually next to a line of text starting with "S/N".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let where_is_qrcode = Rswift.StringResource(key: "where_is_qrcode", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The SD card was detected to be inserted, but the format is incorrect. You need to format it before you can use it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sd_error_format_sure = Rswift.StringResource(key: "sd_error_format_sure", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The Wi-Fi strength of the current camera is weak, it is recommended to change the location or change the Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let weak_wifi_notation = Rswift.StringResource(key: "weak_wifi_notation", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The account is already bound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let account_had_been_bind = Rswift.StringResource(key: "account_had_been_bind", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The account of the camera admin and the sharing user must be in the same country and cannot be shared across countries.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let admin_sharing_in_same_country = Rswift.StringResource(key: "admin_sharing_in_same_country", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The alarm is ringing.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alarm_playing = Rswift.StringResource(key: "alarm_playing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The alarm volume cannot be set below 10.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alarm_no = Rswift.StringResource(key: "alarm_no", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The cache is temporary data generated during use. Clearing the cache will not affect the normal use of the application.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let clear_cache_des = Rswift.StringResource(key: "clear_cache_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera already moved to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alerdy_move_location = Rswift.StringResource(key: "alerdy_move_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera has been moved to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_has_move_to = Rswift.StringResource(key: "device_has_move_to", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is busy, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_line_busy = Rswift.StringResource(key: "camera_line_busy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is connecting, please keep the camera and mobile phone close.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let keep_phone_camera_close = Rswift.StringResource(key: "keep_phone_camera_close", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is offline and cannot be set for now.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_network_cannot_set = Rswift.StringResource(key: "no_network_cannot_set", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is offline, please check whether the camera is turned on and is connected to Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_poor_network = Rswift.StringResource(key: "camera_poor_network", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is offline.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_poor_network_short = Rswift.StringResource(key: "camera_poor_network_short", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is power down at %@ due to low battery, please charge it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_off_low_battery = Rswift.StringResource(key: "camera_off_low_battery", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is power down, please turn it on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_off = Rswift.StringResource(key: "camera_off", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is sleeping, need to wake up before setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_tips = Rswift.StringResource(key: "sleep_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera is unavailable before the firmware upgrade is complete.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let unavailable_before_upgrade = Rswift.StringResource(key: "unavailable_before_upgrade", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera will enter the scanning state automatically, and you will hear the scanning sound or see the flashing light. If the camera has not entered the scanning state, you need to double click the power button to make it enter the scanning state.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_scan_state_directions = Rswift.StringResource(key: "confirm_scan_state_directions", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera will no longer emit sound reminders
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_speaker_2 = Rswift.StringResource(key: "confirm_speaker_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera will not record, alarm, or push notifications.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_will_not_record = Rswift.StringResource(key: "camera_will_not_record", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera will send you a notification when it detects any movement. In this mode, notifications will be sent to your phone quickly, but the frequency may be too high.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_warm_des = Rswift.StringResource(key: "notification_warm_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera will send you a notification when the package is detected, and some useless information will be filtered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let detection_parcel_desc = Rswift.StringResource(key: "detection_parcel_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The camera will turn on tomorrow at %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_sleep_open = Rswift.StringResource(key: "camera_sleep_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The cloud storage space is reduced to %@ (the total capacity is not greater than %@GB)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cloud_size_change = Rswift.StringResource(key: "cloud_size_change", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The current location is not recommended to mount the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_wifi_4 = Rswift.StringResource(key: "check_wifi_4", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The current location is recommended to mount the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_wifi_3 = Rswift.StringResource(key: "check_wifi_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The current mobile phone is not connected to Wi-Fi, please connect to Wi-Fi for your phone or manually enter Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let g4_change_wifi = Rswift.StringResource(key: "g4_change_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The current mobile phone is not connected to Wi-Fi, please connect to Wi-Fi for your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let g4_change_wifi_tips = Rswift.StringResource(key: "g4_change_wifi_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The device is not bound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_not_bound = Rswift.StringResource(key: "device_not_bound", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The event is not over, please view the full video in library later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notication_no_end = Rswift.StringResource(key: "notication_no_end", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The firmware is being installed …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let fireware_is_installing = Rswift.StringResource(key: "fireware_is_installing", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The firmware is downloading …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let fireware_is_downloading = Rswift.StringResource(key: "fireware_is_downloading", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The image has been saved to the phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let image_save_to_ablum = Rswift.StringResource(key: "image_save_to_ablum", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The indicator light should be in the blinking blue light state when scanning the code. If it is in the state of other indicator lights, please double-click the power button after powering on, and the camera will enter the scanning state of the blinking blue light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_qr_code_notice1 = Rswift.StringResource(key: "scan_qr_code_notice1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The invitee needs to download and install %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let invite_info_des = Rswift.StringResource(key: "invite_info_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The max number of the live stream has been reached.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let reach_max_live_num = Rswift.StringResource(key: "reach_max_live_num", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The order is verifying, please wait
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verificting_error = Rswift.StringResource(key: "verificting_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The password is incorrect, please confirm the password.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let password_incorrect = Rswift.StringResource(key: "password_incorrect", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The phone network is unavailable, please check phone network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let failed_to_get_information_and_try = Rswift.StringResource(key: "failed_to_get_information_and_try", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The phone network is unavailable, please check the phone network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_weak_network = Rswift.StringResource(key: "phone_weak_network", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The phone network is unavailable.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_weak_network_short = Rswift.StringResource(key: "phone_weak_network_short", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The recognition accuracy of the package is not good now, and the function is continuously optimized. It is recommended to be used in a standard scene with an obliquely downward viewing angle from about 2.1m(7 feet) to the ground.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_scenes = Rswift.StringResource(key: "package_scenes", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The stick is unavailable when motion tracking is on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let motion_sport_auto_is_open = Rswift.StringResource(key: "motion_sport_auto_is_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The system is busy, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let system_error_try_again = Rswift.StringResource(key: "system_error_try_again", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The two passwords you typed do not match.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_two_passwork_match = Rswift.StringResource(key: "error_two_passwork_match", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The video has been saved to the phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_saved_to_ablum = Rswift.StringResource(key: "video_saved_to_ablum", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: The video should be within 20M.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_max_below_20m = Rswift.StringResource(key: "video_max_below_20m", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: There are %@ events for this day.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let total_event2 = Rswift.StringResource(key: "total_event2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: There are 1 event for this day.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let total_event1 = Rswift.StringResource(key: "total_event1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: There are too many cameras connected to the router, so you cannot connect more cameras. Please delete some unused cameras to clear out expired unconnected cameras. You may need to contact the router admin.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let connect_error_ip_1 = Rswift.StringResource(key: "connect_error_ip_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: There have been no unusual behaviors such as number theft or remote registration, etc. And the deletion of the account is on yourself operation.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_content_1 = Rswift.StringResource(key: "delete_notice_content_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: There is no Wi-Fi signal at the current location, please move the camera near the wireless router.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_wifi_no = Rswift.StringResource(key: "check_wifi_no", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: There is no position, please contact the admin to add.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_position = Rswift.StringResource(key: "no_position", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: There may be security risks on a rooted phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let root_warning_title = Rswift.StringResource(key: "root_warning_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: These items can be deleted by admin only.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let toast_del_all_are_guest = Rswift.StringResource(key: "toast_del_all_are_guest", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: These items will be deleted immediately. You can’t undo this action.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_message_del_multi_without_guest = Rswift.StringResource(key: "dialog_message_del_multi_without_guest", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This account already exists. Please change another email.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_binding_email = Rswift.StringResource(key: "change_binding_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This account already exists. Please change another phone number.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_binding_phone = Rswift.StringResource(key: "change_binding_phone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This account already exists. Try to sign in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_exists = Rswift.StringResource(key: "email_exists", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This account has been signed in on another mobile phone. If you do not operate it, we recommend that you change your password after sign in again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let login_other_device = Rswift.StringResource(key: "login_other_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This account is not registered in your selected country.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let email_unregister_tips = Rswift.StringResource(key: "email_unregister_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This account is not registered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let account_no_registered = Rswift.StringResource(key: "account_no_registered", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This camera has been bound by another account. Please contact the admin for help.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_2111 = Rswift.StringResource(key: "error_2111", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This camera has been bounded to another account. Please contact the admin for help.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_already_bind_by_other = Rswift.StringResource(key: "device_already_bind_by_other", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This camera has been deleted.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_deleted = Rswift.StringResource(key: "camera_deleted", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This camera is already on your list.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let shared_self_error = Rswift.StringResource(key: "shared_self_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This camera is offline.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let udp_awake_failed = Rswift.StringResource(key: "udp_awake_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This camera only supports 2.4GHz Wi-Fi. Your current connection is 5GHz.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let supper_net_work = Rswift.StringResource(key: "supper_net_work", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This camera only supports 2.4GHz Wi-Fi. Your current network is 5GHz.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_support_5g = Rswift.StringResource(key: "not_support_5g", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This email ID already exists. Try to sign in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let already_register = Rswift.StringResource(key: "already_register", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This formatting task will be performed after the current task.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let next_format = Rswift.StringResource(key: "next_format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This is the last position.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let is_last_location = Rswift.StringResource(key: "is_last_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This item can be deleted by admin only.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let toast_del_one_is_guest = Rswift.StringResource(key: "toast_del_one_is_guest", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This item doesn’t exist.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_product_not_exist = Rswift.StringResource(key: "payment_product_not_exist", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This item has been removed.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let noProduct = Rswift.StringResource(key: "noProduct", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This item will be deleted immediately. You can’t undo this action.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_one_dialog_message = Rswift.StringResource(key: "delete_one_dialog_message", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This location name already exists, please edit and try again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_name_exist = Rswift.StringResource(key: "location_name_exist", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This page does not exist or has other problems.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let not_found = Rswift.StringResource(key: "not_found", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This page has expired, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let page_expired = Rswift.StringResource(key: "page_expired", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This phone does not support the purchase.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let apple_reject = Rswift.StringResource(key: "apple_reject", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This phone number already exists. Try to sign in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_already_register = Rswift.StringResource(key: "phone_already_register", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: This video has expired
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_over_day = Rswift.StringResource(key: "video_over_day", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Time Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let time_zone = Rswift.StringResource(key: "time_zone", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Tips
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_tips = Rswift.StringResource(key: "wifi_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: To
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let to_time = Rswift.StringResource(key: "to_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: To keep your account safe before account cancellation. Please enter the password to verify the user's identity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let enter_pwd_tips_for_del_account = Rswift.StringResource(key: "enter_pwd_tips_for_del_account", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: To manage your cameras better, please choose a location.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let choose_location = Rswift.StringResource(key: "choose_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: To use this function, you need to purchase Awareness Service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_pay_vip_first = Rswift.StringResource(key: "please_pay_vip_first", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: To use this function, you need to turn on Motion Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let please_turn_on_motion_detection = Rswift.StringResource(key: "please_turn_on_motion_detection", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Too many requests, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let request_frequent = Rswift.StringResource(key: "request_frequent", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Too many requests, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verification_error_max_times = Rswift.StringResource(key: "verification_error_max_times", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Tracking mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let tracking_mode = Rswift.StringResource(key: "tracking_mode", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Try %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_smart = Rswift.StringResource(key: "open_smart", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Try again after troubleshooting the following issues
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let troubleshooting_issue2 = Rswift.StringResource(key: "troubleshooting_issue2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Try rebooting your Wi-Fi router. If that does not help, try to reconnect to Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_offline_desc = Rswift.StringResource(key: "camera_offline_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let alarm_on = Rswift.StringResource(key: "alarm_on", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on "Bluetooth" in the system control center
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bluetooth_system_center = Rswift.StringResource(key: "bluetooth_system_center", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on "Location Info" to help you automatically fill in Wi-Fi info.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_location_Info = Rswift.StringResource(key: "open_location_Info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on "Location Services" in "Settings-Privacy"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turn_on_location_services_title = Rswift.StringResource(key: "turn_on_location_services_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on "Location Services" to allow "VicoHome" to use your location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turn_on_location_services = Rswift.StringResource(key: "turn_on_location_services", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on "Wi-Fi" to help you search for available networks nearby.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_WiFi_word = Rswift.StringResource(key: "open_WiFi_word", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on Bluetooth to add the camera faster.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_bluetooth = Rswift.StringResource(key: "open_bluetooth", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on Bluetooth to allow "%@" to connect, quickly bind the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let open_bluetooth_bonding = Rswift.StringResource(key: "open_bluetooth_bonding", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on location service, automatically get the current Wi-Fi name (SSID) of the phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turn_on_location_services_get_wifi = Rswift.StringResource(key: "turn_on_location_services_get_wifi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on the alarm and the camera will ring.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let do_alarm_tips = Rswift.StringResource(key: "do_alarm_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turn_on_camera = Rswift.StringResource(key: "turn_on_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on the camera according to the camera body guide
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_guide = Rswift.StringResource(key: "bind_device_guide", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on the “Rotate Image” function, the sensitivity of motion detection may be affected.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let rotate_image_open = Rswift.StringResource(key: "rotate_image_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on your camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_device_power_title = Rswift.StringResource(key: "add_device_power_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Turn on your camera and scan theQR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let turn_on_camera_scanQR = Rswift.StringResource(key: "turn_on_camera_scanQR", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unable to get the Wi-Fi name (SSID)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let can_not_get_ssid_short = Rswift.StringResource(key: "can_not_get_ssid_short", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unable to get the Wi-Fi name (SSID), please change a Wi-Fi for your phone or manually enter a Wi-Fi name (SSID).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let can_not_get_ssid = Rswift.StringResource(key: "can_not_get_ssid", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unable to load image
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let unable_to_load_image = Rswift.StringResource(key: "unable_to_load_image", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unknown camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_not_activated_short = Rswift.StringResource(key: "camera_not_activated_short", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unknown camera, please contact the retailer.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_not_activated = Rswift.StringResource(key: "camera_not_activated", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unknown device, please contact retailer.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_unactivated = Rswift.StringResource(key: "device_unactivated", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unknown request error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_unknown = Rswift.StringResource(key: "error_unknown", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unread
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let missed = Rswift.StringResource(key: "missed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Unsuccessful connection, please click here
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_scan_failed = Rswift.StringResource(key: "bind_device_scan_failed", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Until %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let terminated_day = Rswift.StringResource(key: "terminated_day", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Up to date
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let latest_version = Rswift.StringResource(key: "latest_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update = Rswift.StringResource(key: "update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Update Now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update_now = Rswift.StringResource(key: "update_now", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Update location successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update_location_scuess = Rswift.StringResource(key: "update_location_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Update to the latest version %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update_the_latest_version = Rswift.StringResource(key: "update_the_latest_version", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Updated camera name successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update_device_name_scuess = Rswift.StringResource(key: "update_device_name_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Updated timezone successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update_timezone_scuess = Rswift.StringResource(key: "update_timezone_scuess", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Updated user name successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let update_user_name_success = Rswift.StringResource(key: "update_user_name_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Updating …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let updating = Rswift.StringResource(key: "updating", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Upgrade
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_vip_update = Rswift.StringResource(key: "payment_vip_update", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Upload failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let uploaded_fail = Rswift.StringResource(key: "uploaded_fail", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Uploaded successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let uploaded_success = Rswift.StringResource(key: "uploaded_success", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Use %@ to scan the code to get permission.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let get_use_permission = Rswift.StringResource(key: "get_use_permission", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Use scan code adding
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let scan_camera_way = Rswift.StringResource(key: "scan_camera_way", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Use your mobile phone to scan the QR code of the fuselage to obtain the camera model. The QR code of the fuselage is often found in the casing or under the rubber plug. This QR code contains the serial number and product model information, usually with a string beginning with "S/N" next to it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let choose_camera_type = Rswift.StringResource(key: "choose_camera_type", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let mine = Rswift.StringResource(key: "mine", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User Agreement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let user_agreement = Rswift.StringResource(key: "user_agreement", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User Agreement & Privacy Policy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let vicoo_policy = Rswift.StringResource(key: "vicoo_policy", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let user_name = Rswift.StringResource(key: "user_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User guides
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let user_guide_package = Rswift.StringResource(key: "user_guide_package", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User has to be authenticated to proceed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let unauthorized = Rswift.StringResource(key: "unauthorized", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User is not allowed to proceed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let forbidden = Rswift.StringResource(key: "forbidden", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User name is already in use.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let username_inuse = Rswift.StringResource(key: "Username_inuse", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: User name is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let username_noncompliance = Rswift.StringResource(key: "username_noncompliance", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Vehicle
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let ai_car = Rswift.StringResource(key: "ai_car", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Vehicle
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let vehicle = Rswift.StringResource(key: "vehicle", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Vehicle approaching
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let vehicle_approaching = Rswift.StringResource(key: "vehicle_approaching", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Vehicle leaving
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let vehicle_leaving = Rswift.StringResource(key: "vehicle_leaving", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Vehicle parked
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let vehicle_parked = Rswift.StringResource(key: "vehicle_parked", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_your_inbox = Rswift.StringResource(key: "check_your_inbox", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let input_need_verify_code = Rswift.StringResource(key: "input_need_verify_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let login_verify_code = Rswift.StringResource(key: "login_verify_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verify_code = Rswift.StringResource(key: "verify_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification code expired.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verification_code_expired = Rswift.StringResource(key: "verification_code_expired", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification code is wrong.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let error_vaild_code = Rswift.StringResource(key: "error_vaild_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification code login
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let login_way_verify_code = Rswift.StringResource(key: "login_way_verify_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verification code not correct.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verification_code_not_right = Rswift.StringResource(key: "verification_code_not_right", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Verify Identity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verify_user_info = Rswift.StringResource(key: "verify_user_info", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: VicoHome APP can no longer be usable. Please download 全橙看家 in time. You can sign in to 全橙看家 directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it. Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_6_2 = Rswift.StringResource(key: "migration_statement_6_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: Video Tag
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_tag = Rswift.StringResource(key: "video_tag", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Video is saving …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let video_saving = Rswift.StringResource(key: "video_saving", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: View help >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let help_guide = Rswift.StringResource(key: "help_guide", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Voice Language
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language = Rswift.StringResource(key: "device_language", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Voice Volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let prompt_volume = Rswift.StringResource(key: "prompt_volume", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: W
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wednesday = Rswift.StringResource(key: "wednesday", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Waiting for Permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let request_permission_title = Rswift.StringResource(key: "request_permission_title", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wake up
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_wake_up = Rswift.StringResource(key: "camera_wake_up", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wake up the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wakeup_camera = Rswift.StringResource(key: "wakeup_camera", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Watch the live stream and view the playback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let pem_des = Rswift.StringResource(key: "pem_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: We apologize for the inconvenience, 全橙看家 will guard safety for you!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let migration_statement_3 = Rswift.StringResource(key: "migration_statement_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: We are glad to tell you that we have released a new app %@, which is an upgraded version of Vicoo. And Vicoo will not be updated any more. Please switch to our new app %@, and we believe it will give you a much better user experience.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_statement_1 = Rswift.StringResource(key: "change_statement_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: We can't wait to start a new journey with you in the %@ app and you are welcome to tell us any feedbacks!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_statement_5 = Rswift.StringResource(key: "change_statement_5", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: We just send a verification code to your email ID %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_inbox_des = Rswift.StringResource(key: "check_inbox_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: We just send a verification code to your email ID %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verification_code_sent_tips = Rswift.StringResource(key: "verification_code_sent_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: We just sent a verification code to your  phone number %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let verify_send_code = Rswift.StringResource(key: "verify_send_code", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Weak
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let weak = Rswift.StringResource(key: "weak", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Welcome to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let log_in_tips = Rswift.StringResource(key: "log_in_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Welcome to Camera Binding Help Center! Online staff service open hours: Singapore time 10AM-10PM (PST 6PM-6AM).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let iosAnswer_botTextLabelHi = Rswift.StringResource(key: "ios.answer_bot.text.label.hi", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Welcome to Camera Binding Help Center! Online staff service open hours: Singapore time 10AM-10PM (PST 6PM-6AM). Please describe your issue and tell us your camera model first. (You can find your camera model on the label affixed to the camera. Or you can take off the shell of the camera or open the rubber cover of the camera to find your camera model. The camera model is G0, CGXX(for example CG1), CBXX(for example CB1), JXJ-FA01, etc. )
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let iosAnswer_botTextLabelDisabled = Rswift.StringResource(key: "ios.answer_bot.text.label.disabled", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: What you only need to click the "Go to download" button below to jump to the Google Play Store or search and install "%@" directly in the Google Play Store,  then install the new app and sign in it with your Vicoo account. Please rest assured that everything (your cameras, your data, your settings) will keep the same.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_statement_2 = Rswift.StringResource(key: "change_statement_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When motion is detected, the camera will automatically sound an alarm.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let motion_alarm = Rswift.StringResource(key: "motion_alarm", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When motion is detected, the camera will automatically track the motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let action_tracing_open = Rswift.StringResource(key: "action_tracing_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When someone moves, the camera will track the person's movement.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let human_tracking_2 = Rswift.StringResource(key: "human_tracking_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When the camera detects that the package has been picked up and put down, it will send you a message.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let package_tips = Rswift.StringResource(key: "package_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When the “Crying Detection" function is enabled, you will be notified if crying is detected in your baby's room.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let crying_detection_on = Rswift.StringResource(key: "crying_detection_on", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear "Power up", you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_long_press_power_tips = Rswift.StringResource(key: "guide_long_press_power_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear "Scan QR code", you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_device_power_double_des = Rswift.StringResource(key: "add_device_power_double_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear a power-up sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_g_step0_desc = Rswift.StringResource(key: "bind_device_g_step0_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear a power-up sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_device_k0_step0_desc = Rswift.StringResource(key: "bind_device_k0_step0_desc", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear a scanning sound or see the light flashing, you can scan the QR code about  6-12inches in front of the camera. If not, please double-click the power button to enter the scan mode. You will hear a sound when the camera successfully scans the QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let bind_111 = Rswift.StringResource(key: "bind_111", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear the scanning sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_bind_heared_common_voice = Rswift.StringResource(key: "device_bind_heared_common_voice", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear the sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_long_press_power_tips_b0 = Rswift.StringResource(key: "guide_long_press_power_tips_b0", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you hear the sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let guide_long_press_power_tips_g1 = Rswift.StringResource(key: "guide_long_press_power_tips_g1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you turn on "Alarm" or "Flashlight", the camera will automatically warn when it detects motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_alarm_white_tips = Rswift.StringResource(key: "camera_alarm_white_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you turn on "Alarm", the camera will automatically sound an alarm when it detects motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_alarm_tips = Rswift.StringResource(key: "camera_alarm_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you turn on Video Record feature, the camera will record video automatically when it detects motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let record_video_tips = Rswift.StringResource(key: "record_video_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: When you turn on the "Speaker" function, the camera will provide sound feedback in time so that you can understand the status of the camera more clearly.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let confirm_speaker_open = Rswift.StringResource(key: "confirm_speaker_open", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Where would you like to put this camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let camera_location = Rswift.StringResource(key: "camera_location", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: While Using
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let while_using = Rswift.StringResource(key: "while_using", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: White light
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let white_light = Rswift.StringResource(key: "white_light", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: White light illuminates the environment, try to restore the color picture at night
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let whitelight_des = Rswift.StringResource(key: "whitelight_des", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: White light mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let night_mode_white = Rswift.StringResource(key: "night_mode_white", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi Channel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_channel = Rswift.StringResource(key: "wifi_channel", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi Connection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_connect = Rswift.StringResource(key: "wifi_connect", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi Name:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_name = Rswift.StringResource(key: "wifi_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi Strength
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let signal_strength = Rswift.StringResource(key: "signal_strength", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi name (SSID)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let network_name = Rswift.StringResource(key: "network_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi set up issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_issue = Rswift.StringResource(key: "wifi_issue", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_setting = Rswift.StringResource(key: "wifi_setting", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi strength:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_state_ios = Rswift.StringResource(key: "wifi_state_ios", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Wi-Fi strength: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wifi_state = Rswift.StringResource(key: "wifi_state", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Within 15 minutes, you will not receive any motion detection messages, but all events will still be recorded.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let do_not_disturb_15min_describ = Rswift.StringResource(key: "do_not_disturb_15min_describ", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Working time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sleep_work_time = Rswift.StringResource(key: "sleep_work_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: You can place the camera on a shelf or other surfaces to use, or you can install it on a wall to use.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let install_on_shelf = Rswift.StringResource(key: "Install_on_shelf", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: You can't undo this action. %d item from friends' camera cannot be deleted.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let dialog_message_del_multi_with_guest = Rswift.StringResource(key: "dialog_message_del_multi_with_guest", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: You have already purchased a %@ Awareness option, please don't order again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_product_already_paid = Rswift.StringResource(key: "payment_product_already_paid", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: You have already updated to the latest version.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let app_is_update_to_date = Rswift.StringResource(key: "app_is_update_to_date", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: You only need to click the "Go to download" button below to jump to the app store or search and install "%@" directly in the app store, and then re-register your account to use it. If you have any questions, please contact support@vicoo.tech .
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_statement_2_email = Rswift.StringResource(key: "change_statement_2_email", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: You will get the service of %@ on %@. Please download the videos if necessary.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let membership_expire = Rswift.StringResource(key: "membership_expire", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: You will receive a “Someone was detected" notification on person events exclusively. Notification is more specific and less frequent but could be slightly delayed.
      ///
      /// Locales: en, zh-Hans, de, fr, ru, it, es, fi-FI
      static let person_alter_tips = Rswift.StringResource(key: "person_alter_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Your Wi-Fi may be 5GHz Wi-Fi that the camera cannot support. Please reconfirm if you are using 2.4GHz Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let no_supper_5g = Rswift.StringResource(key: "no_supper_5g", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Your application was sent to the admin successfully. Please wait for permission.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let wait_for_permission_tips = Rswift.StringResource(key: "wait_for_permission_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Your camera can let you know when it notices activity. Choose the notifications you'd like to get.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_des_tips = Rswift.StringResource(key: "notification_des_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Your camera will notify you when detecting motion. Choose the notifications you'd like to get.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let notification_setting_tips = Rswift.StringResource(key: "notification_setting_tips", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Your login has expired, please sign in.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let login_expired = Rswift.StringResource(key: "login_expired", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Your phone has no network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let phone_no_net = Rswift.StringResource(key: "phone_no_net", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Your phone network connection is poor.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_no_replied = Rswift.StringResource(key: "device_no_replied", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Zone %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let zone_with_args = Rswift.StringResource(key: "zone_with_args", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Zone 1
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let zone_1 = Rswift.StringResource(key: "zone_1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Zone 2
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let zone_2 = Rswift.StringResource(key: "zone_2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: Zone 3
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let zone_3 = Rswift.StringResource(key: "zone_3", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: a normal international email address such as Gmail and Yahoo
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason_bold2 = Rswift.StringResource(key: "cannot_receive_code_reason_bold2", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: add
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_sleep = Rswift.StringResource(key: "add_sleep", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: alarm duration
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let duration_alarm = Rswift.StringResource(key: "duration_alarm", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: and
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let and = Rswift.StringResource(key: "and", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: camera Offline
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_offline = Rswift.StringResource(key: "device_offline", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: cancel automatic renewal
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let delete_notice_content_4_ios_link = Rswift.StringResource(key: "delete_notice_content_4_ios_link", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: choose a usage mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let payment_please_choose_time = Rswift.StringResource(key: "payment_please_choose_time", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: dd/MM/yyyy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let terminated_format = Rswift.StringResource(key: "terminated_format", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: double click
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let change_net_device_power_des_key_point = Rswift.StringResource(key: "change_net_device_power_des_key_point", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: download is complete
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let download_done = Rswift.StringResource(key: "download_done", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: includes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let options_include = Rswift.StringResource(key: "options_include", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: invited you to view the Camera。
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let invited_join_device = Rswift.StringResource(key: "invited_join_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: live video play error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let player_error = Rswift.StringResource(key: "player_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: location name format error.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let location_name_error = Rswift.StringResource(key: "location_name_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: long press
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let add_device_power_des_key_point = Rswift.StringResource(key: "add_device_power_des_key_point", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: open timer unit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let timer_unit = Rswift.StringResource(key: "timer_unit", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: or
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let or = Rswift.StringResource(key: "or", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: please check it in the trash box of the receiving mailbox.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let cannot_receive_code_reason_bold1 = Rswift.StringResource(key: "cannot_receive_code_reason_bold1", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: request error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let request_error = Rswift.StringResource(key: "request_error", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: s
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let seconds = Rswift.StringResource(key: "seconds", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: today
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let today = Rswift.StringResource(key: "today", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: xx@xx.xx
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let check_email_sample = Rswift.StringResource(key: "check_email_sample", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: you have not added any camera yet.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let have_no_device = Rswift.StringResource(key: "have_no_device", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: —
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let sepvalue = Rswift.StringResource(key: "sepvalue", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 全橙看家
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static let move_app_name = Rswift.StringResource(key: "move_app_name", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es"], comment: nil)
      /// en translation: 日本語(Japanese)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_ja = Rswift.StringResource(key: "device_language_ja", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)
      /// en translation: 汉语(Chinese)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static let device_language_cn = Rswift.StringResource(key: "device_language_cn", tableName: "Localizable", bundle: R.hostingBundle ?? R.hostingBundle_defalut, locales: ["en", "zh-Hans", "ja", "de", "fr", "ru", "it", "es", "fi-FI"], comment: nil)

      /// en translation: "Ding Dong Ding Dong"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ding_dong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ding_dong", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ding_dong"
        }

        return NSLocalizedString("ding_dong", bundle: bundle, comment: "")
      }

      /// en translation: "Night Vision Setting -> Night Vision Mode", and select "White light mode" >
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func how_to_open_nightvision(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("how_to_open_nightvision", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "how_to_open_nightvision"
        }

        return NSLocalizedString("how_to_open_nightvision", bundle: bundle, comment: "")
      }

      /// en translation: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_current_vip(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("payment_current_vip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_current_vip"
        }

        let format = NSLocalizedString("payment_current_vip", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func system_album_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("system_album_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "system_album_name"
        }

        let format = NSLocalizedString("system_album_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ (%@) invited you to view the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_result_scuess(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("bind_result_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_result_scuess"
        }

        let format = NSLocalizedString("bind_result_scuess", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_cloud_save(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("payment_cloud_save", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_cloud_save"
        }

        let format = NSLocalizedString("payment_cloud_save", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func value_added_services(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("value_added_services", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "value_added_services"
        }

        let format = NSLocalizedString("value_added_services", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness Basic
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func awarenessbasic(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("awarenessbasic", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "awarenessbasic"
        }

        let format = NSLocalizedString("awarenessbasic", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness Introduction
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func smart_service_desc(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_service_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_service_desc"
        }

        let format = NSLocalizedString("smart_service_desc", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness Plus
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func awarenessplus(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("awarenessplus", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "awarenessplus"
        }

        let format = NSLocalizedString("awarenessplus", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness Plus
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_payment_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("dialog_payment_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_payment_title"
        }

        let format = NSLocalizedString("dialog_payment_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness Plus free trial
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func free_30d_plus(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("free_30d_plus", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "free_30d_plus"
        }

        let format = NSLocalizedString("free_30d_plus", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness Pro
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func awarenesspro(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("awarenesspro", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "awarenesspro"
        }

        let format = NSLocalizedString("awarenesspro", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness feature
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func vip_activity_zone_warning(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("vip_activity_zone_warning", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vip_activity_zone_warning"
        }

        let format = NSLocalizedString("vip_activity_zone_warning", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness has expired, please repurchase.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func user_account_in_protection(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("user_account_in_protection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_account_in_protection"
        }

        let format = NSLocalizedString("user_account_in_protection", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Awareness payment successful. Please go to the personal center to check the function permission.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func pay_scuess(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("pay_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pay_scuess"
        }

        let format = NSLocalizedString("pay_scuess", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_g0_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_g0_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_g0_default_name"
        }

        let format = NSLocalizedString("device_g0_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_g1_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_g1_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_g1_default_name"
        }

        let format = NSLocalizedString("device_g1_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_g2_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_g2_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_g2_default_name"
        }

        let format = NSLocalizedString("device_g2_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart Box Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_s0_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_s0_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_s0_default_name"
        }

        let format = NSLocalizedString("device_s0_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart Card Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_k0_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_k0_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_k0_default_name"
        }

        let format = NSLocalizedString("device_k0_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_b0_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_b0_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_b0_default_name"
        }

        let format = NSLocalizedString("device_b0_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_b1_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_b1_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_b1_default_name"
        }

        let format = NSLocalizedString("device_b1_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_b2_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_b2_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_b2_default_name"
        }

        let format = NSLocalizedString("device_b2_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Would Like to Access the %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission_dialog_title(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("permission_dialog_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_dialog_title"
        }

        let format = NSLocalizedString("permission_dialog_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %@ activity zones
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func number_az(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("number_az", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "number_az"
        }

        let format = NSLocalizedString("number_az", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ app
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func invite_info_des_key_point(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("invite_info_des_key_point", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invite_info_des_key_point"
        }

        let format = NSLocalizedString("invite_info_des_key_point", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ cameras that can be quickly connected, please click to start connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func quick_connect_tips(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("quick_connect_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "quick_connect_tips"
        }

        let format = NSLocalizedString("quick_connect_tips", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ events found.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func found_event2(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("found_event2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "found_event2"
        }

        let format = NSLocalizedString("found_event2", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ has expired, you will lose the AI function and the cloud recording will be changed to the 7-day on %@. Please upgrade a new %@ Awareness If necessary.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func membership_tip(_ value1: String, _ value2: String, _ value3: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("membership_tip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "membership_tip"
        }

        let format = NSLocalizedString("membership_tip", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// en translation: %@ is in low battery level, please charge your camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func low_battery_warning(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("low_battery_warning", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "low_battery_warning"
        }

        let format = NSLocalizedString("low_battery_warning", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ is verifying…
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_verifying(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("payment_verifying", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_verifying"
        }

        let format = NSLocalizedString("payment_verifying", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ more events
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func more_event(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("more_event", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "more_event"
        }

        let format = NSLocalizedString("more_event", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ payment failed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func apaymntt_fail(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("apaymntt_fail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apaymntt_fail"
        }

        let format = NSLocalizedString("apaymntt_fail", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ payment is not detected, please confirm that the payment channel is available before purchasing again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func other_payment_not_detected(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("other_payment_not_detected", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other_payment_not_detected"
        }

        let format = NSLocalizedString("other_payment_not_detected", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ payment successful
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func apayment_success(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("apayment_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apayment_success"
        }

        let format = NSLocalizedString("apayment_success", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ sensitivity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func level_sensitivity(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("level_sensitivity", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "level_sensitivity"
        }

        let format = NSLocalizedString("level_sensitivity", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ switched resolution.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_resolution(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("live_resolution", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_resolution"
        }

        let format = NSLocalizedString("live_resolution", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ triggered camera alarm.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_alarm(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("live_alarm", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_alarm"
        }

        let format = NSLocalizedString("live_alarm", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ turned on white light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_white_light(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("live_white_light", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_white_light"
        }

        let format = NSLocalizedString("live_white_light", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ update to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func upgrage_to_plan(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("upgrage_to_plan", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "upgrage_to_plan"
        }

        let format = NSLocalizedString("upgrage_to_plan", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %@ will change to %@ after %@ days.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_notification(_ value1: String, _ value2: String, _ value3: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("change_notification", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_notification"
        }

        let format = NSLocalizedString("change_notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// en translation: %@ will expire after %@ days.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func expired_notification(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("expired_notification", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expired_notification"
        }

        let format = NSLocalizedString("expired_notification", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %@ will not receive data from %@ anymore.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func remove_share_device_des(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("remove_share_device_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove_share_device_des"
        }

        let format = NSLocalizedString("remove_share_device_des", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %@Cloud storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_cloud_size(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("get_cloud_size", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_cloud_size"
        }

        let format = NSLocalizedString("get_cloud_size", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Smart Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_default_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_default_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_default_name"
        }

        let format = NSLocalizedString("device_default_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d cameras occupy this location. Please change the location of the occupied camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func n_device_use_this_location(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n_device_use_this_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "n_device_use_this_location"
        }

        let format = NSLocalizedString("n_device_use_this_location", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d cameras occupy this location. Please change the location of the occupied camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func tip_bind_device_alert_des(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("tip_bind_device_alert_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tip_bind_device_alert_des"
        }

        let format = NSLocalizedString("tip_bind_device_alert_des", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d days
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func day(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("day", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day"
        }

        let format = NSLocalizedString("day", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d%%
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func downloading_progress(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("downloading_progress", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "downloading_progress"
        }

        let format = NSLocalizedString("downloading_progress", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d/%d Downloading …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func download_position(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("download_position", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "download_position"
        }

        let format = NSLocalizedString("download_position", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %u more notifications
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func push_group_tips(_ value1: UInt, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("push_group_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "push_group_tips"
        }

        let format = NSLocalizedString("push_group_tips", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: (For indoor use, this function is not recommended)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func indoor_motion_alarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Indoor_motion_alarm", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Indoor_motion_alarm"
        }

        return NSLocalizedString("Indoor_motion_alarm", bundle: bundle, comment: "")
      }

      /// en translation: (If you are under 14 years old, you need to notify your guardian to read it together.)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guardian_read(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guardian_read", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guardian_read"
        }

        return NSLocalizedString("guardian_read", bundle: bundle, comment: "")
      }

      /// en translation: (No data is involved here, please rest assured to use)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func send_log_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send_log_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send_log_tips"
        }

        return NSLocalizedString("send_log_tips", bundle: bundle, comment: "")
      }

      /// en translation: (before offline)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func before_offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("before_offline", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "before_offline"
        }

        return NSLocalizedString("before_offline", bundle: bundle, comment: "")
      }

      /// en translation: (≤%dGB)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func save_gb(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("save_gb", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save_gb"
        }

        let format = NSLocalizedString("save_gb", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: * %@ Awareness only takes effect in the camera admin’s rights, and the shared users will use it with the admin’s rights.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func buy_desc(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("buy_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buy_desc"
        }

        let format = NSLocalizedString("buy_desc", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: *Select one AI test object at least.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_one_ai(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_one_ai", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_one_ai"
        }

        return NSLocalizedString("select_one_ai", bundle: bundle, comment: "")
      }

      /// en translation: *Sorry, the system has detected problems in the following activity zone, which may cause inaccurate detection. Please delete and add again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wrong_az_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrong_az_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wrong_az_tips"
        }

        return NSLocalizedString("wrong_az_tips", bundle: bundle, comment: "")
      }

      /// en translation: -Payment: confirm your purchase and pay into your iTunes account. -Cancel auto-renewal: To cancel the automatic renewal, please manually turn off the automatic renewal function in iTunes / Apple ID settings at least 24 hours prior to the expiration time of your subscription. If you cancel within 24 hours prior to the expiration, the subscription fee for the next subscription period will still be charged and the subscription will end at the end of the next subscription period. -Renewal: iTunes account will be charged automatically within 24 hours prior to the expiration time of your subscription. If the renewal is successful, the subscription will be extended by one subscription period. -By purchasing the service from %@, you agree to the Privacy Policy, Awareness Service Agreement, and Continuous Subscription Service Agreement.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func renewal_clause(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("renewal_clause", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "renewal_clause"
        }

        let format = NSLocalizedString("renewal_clause", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 0 activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_use", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_use"
        }

        return NSLocalizedString("not_use", bundle: bundle, comment: "")
      }

      /// en translation: 1 Find %@ in the settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bluetooth_tips1(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("bluetooth_tips1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bluetooth_tips1"
        }

        let format = NSLocalizedString("bluetooth_tips1", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 1 activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func one_az(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("one_az", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "one_az"
        }

        return NSLocalizedString("one_az", bundle: bundle, comment: "")
      }

      /// en translation: 1 event found.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func found_event1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("found_event1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "found_event1"
        }

        return NSLocalizedString("found_event1", bundle: bundle, comment: "")
      }

      /// en translation: 1. The account is safe
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_title_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_title_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_title_1"
        }

        return NSLocalizedString("delete_notice_title_1", bundle: bundle, comment: "")
      }

      /// en translation: 12 hours
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func h12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h12", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "h12"
        }

        return NSLocalizedString("h12", bundle: bundle, comment: "")
      }

      /// en translation: 2 Allow %@ to access Bluetooth
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bluetooth_tips2(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("bluetooth_tips2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bluetooth_tips2"
        }

        let format = NSLocalizedString("bluetooth_tips2", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 2 hours
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func h1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "h1"
        }

        return NSLocalizedString("h1", bundle: bundle, comment: "")
      }

      /// en translation: 2. No longer follow the camera associated with this account
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_title_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_title_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_title_2"
        }

        return NSLocalizedString("delete_notice_title_2", bundle: bundle, comment: "")
      }

      /// en translation: 2.4GHz
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ghz24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ghz2.4", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ghz2.4"
        }

        return NSLocalizedString("Ghz2.4", bundle: bundle, comment: "")
      }

      /// en translation: 3. All personal data will be deleted
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_title_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_title_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_title_3"
        }

        return NSLocalizedString("delete_notice_title_3", bundle: bundle, comment: "")
      }

      /// en translation: 30 minutes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func min30(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("min30", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "min30"
        }

        return NSLocalizedString("min30", bundle: bundle, comment: "")
      }

      /// en translation: 4. Cancel the automatic renewal of the %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_title_4(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("delete_notice_title_4", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_title_4"
        }

        let format = NSLocalizedString("delete_notice_title_4", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 5GHz
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ghz5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ghz5", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ghz5"
        }

        return NSLocalizedString("Ghz5", bundle: bundle, comment: "")
      }

      /// en translation: 6-12 inches
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func distance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("distance", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "distance"
        }

        return NSLocalizedString("distance", bundle: bundle, comment: "")
      }

      /// en translation: <![CDATA[ <font>u3000u3000In order to cooperate with relevant policies and provide better services to users in China, VicoHome App changed to <strong>全橙看家</strong> App on <font color="#5AC4A7">%@</font>.</font><br /> <font>u3000u3000VicoHome APP can no longer be usable. Please download <strong>全橙看家</strong> in time. You can sign in to <strong>全橙看家</strong> directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it. <u><font color="#007AFF"> Learn more >></font></u></font><br /> ]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func app_transfer_content_logout(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("app_transfer_content_logout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_transfer_content_logout"
        }

        let format = NSLocalizedString("app_transfer_content_logout", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: <![CDATA[ <font>u3000u3000In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to <strong>全橙看家</strong> App on <font color="#5AC4A7">%@</font>. <br /> <font>u3000u3000Please download <strong>全橙看家</strong> in time. You can sign in to <strong>全橙看家</strong> directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it. </font><br /> <font>u3000u3000After the expiration date, VicoHome APP will no longer be usable. <u><font color="#007AFF"> Learn more >></font></u></font><br />]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func app_transfer_content(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("app_transfer_content", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_transfer_content"
        }

        let format = NSLocalizedString("app_transfer_content", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: <![CDATA[<font color=#333333">%1$d days</font><br><font color="#999999">(≤%2$dGB)</font>]]>"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cloud_storage_params(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("cloud_storage_params", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloud_storage_params"
        }

        let format = NSLocalizedString("cloud_storage_params", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: <![CDATA[<font><small>%@</small></font> <font><big>%.2f</big></font>]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_price(_ value1: String, _ value2: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("payment_price", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_price"
        }

        let format = NSLocalizedString("payment_price", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: <![CDATA[In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to <strong>全橙看家</strong> App on <font color="#5AC4A7">%@</font>. Please download <strong>全橙看家</strong> and sign up your account. Thank you very much for your cooperation.]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_7_android(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("migration_statement_7_android", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_7_android"
        }

        let format = NSLocalizedString("migration_statement_7_android", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: <![CDATA[We apologize for the inconvenience, <strong>全橙看家</strong> will guard safety for you! ]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_3_android(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("migration_statement_3_android", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_3_android"
        }

        return NSLocalizedString("migration_statement_3_android", bundle: bundle, comment: "")
      }

      /// en translation: <b>%@</b> will not receive messages from<b>%@</b> any more.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_message_cancel_share(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("dialog_message_cancel_share", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_message_cancel_share"
        }

        let format = NSLocalizedString("dialog_message_cancel_share", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: @string/appName
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func app_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_name"
        }

        return NSLocalizedString("app_name", bundle: bundle, comment: "")
      }

      /// en translation: A verification code is required after too many times wrong the password.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verificatio_code_require(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verificatio_code_require", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verificatio_code_require"
        }

        return NSLocalizedString("verificatio_code_require", bundle: bundle, comment: "")
      }

      /// en translation: APP Change Statement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func migration_statement_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("migration_statement_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_1"
        }

        return NSLocalizedString("migration_statement_1", bundle: bundle, comment: "")
      }

      /// en translation: APP Language
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("language", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "language"
        }

        return NSLocalizedString("language", bundle: bundle, comment: "")
      }

      /// en translation: APP Version
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func app_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_version"
        }

        return NSLocalizedString("app_version", bundle: bundle, comment: "")
      }

      /// en translation: About %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func about(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("about", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about"
        }

        let format = NSLocalizedString("about", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: About %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func about_evaeye(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("about_evaeye", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about_evaeye"
        }

        let format = NSLocalizedString("about_evaeye", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: About %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func about_vicoo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("about_vicoo", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about_vicoo"
        }

        let format = NSLocalizedString("about_vicoo", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Accept
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accept", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accept"
        }

        return NSLocalizedString("accept", bundle: bundle, comment: "")
      }

      /// en translation: Access this camera failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_no_access(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_no_access", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_no_access"
        }

        return NSLocalizedString("device_no_access", bundle: bundle, comment: "")
      }

      /// en translation: Account Deletion Notice
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_title_0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_title_0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_title_0"
        }

        return NSLocalizedString("delete_notice_title_0", bundle: bundle, comment: "")
      }

      /// en translation: Account Settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func account_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_settings", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account_settings"
        }

        return NSLocalizedString("account_settings", bundle: bundle, comment: "")
      }

      /// en translation: Account deletion Failed to, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_account_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_account_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_account_failed"
        }

        return NSLocalizedString("delete_account_failed", bundle: bundle, comment: "")
      }

      /// en translation: Account password login
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func login_way_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_way_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_way_password"
        }

        return NSLocalizedString("login_way_password", bundle: bundle, comment: "")
      }

      /// en translation: Action Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func action_tracking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_tracking", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_tracking"
        }

        return NSLocalizedString("action_tracking", bundle: bundle, comment: "")
      }

      /// en translation: Activate Alarm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert"
        }

        return NSLocalizedString("alert", bundle: bundle, comment: "")
      }

      /// en translation: Activation date
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_start", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_start"
        }

        return NSLocalizedString("sleep_start", bundle: bundle, comment: "")
      }

      /// en translation: Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func activity_zones(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity_zones", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity_zones"
        }

        return NSLocalizedString("activity_zones", bundle: bundle, comment: "")
      }

      /// en translation: Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cloud_area(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cloud_area", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloud_area"
        }

        return NSLocalizedString("cloud_area", bundle: bundle, comment: "")
      }

      /// en translation: Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func user_guide_4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_guide_4", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_guide_4"
        }

        return NSLocalizedString("user_guide_4", bundle: bundle, comment: "")
      }

      /// en translation: Add Camera Now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_camera_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_camera_now", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_camera_now"
        }

        return NSLocalizedString("add_camera_now", bundle: bundle, comment: "")
      }

      /// en translation: Add Friend's Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func join_friend_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("join_friend_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "join_friend_device"
        }

        return NSLocalizedString("join_friend_device", bundle: bundle, comment: "")
      }

      /// en translation: Add a New Camera Now!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_new_camera_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_new_camera_now", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_new_camera_now"
        }

        return NSLocalizedString("add_new_camera_now", bundle: bundle, comment: "")
      }

      /// en translation: Add a new camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_new_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_new_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_new_camera"
        }

        return NSLocalizedString("add_new_camera", bundle: bundle, comment: "")
      }

      /// en translation: Add a new camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_new_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_new_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_new_device"
        }

        return NSLocalizedString("add_new_device", bundle: bundle, comment: "")
      }

      /// en translation: Add a sleep plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_sleep_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_sleep_plan", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_sleep_plan"
        }

        return NSLocalizedString("add_sleep_plan", bundle: bundle, comment: "")
      }

      /// en translation: Add activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_activity_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_activity_zone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_activity_zone"
        }

        return NSLocalizedString("add_activity_zone", bundle: bundle, comment: "")
      }

      /// en translation: Add camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_camera_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_camera_again", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_camera_again"
        }

        return NSLocalizedString("add_camera_again", bundle: bundle, comment: "")
      }

      /// en translation: Add camera timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_timeout"
        }

        return NSLocalizedString("add_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address"
        }

        return NSLocalizedString("address", bundle: bundle, comment: "")
      }

      /// en translation: Adjust the distance between the camera and QR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_notice_title2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_notice_title2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_notice_title2"
        }

        return NSLocalizedString("scan_qr_code_notice_title2", bundle: bundle, comment: "")
      }

      /// en translation: Admin
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func admin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("admin", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "admin"
        }

        return NSLocalizedString("admin", bundle: bundle, comment: "")
      }

      /// en translation: Admin Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func admin_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("admin_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "admin_info"
        }

        return NSLocalizedString("admin_info", bundle: bundle, comment: "")
      }

      /// en translation: Advanced Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func advanced_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("advanced_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "advanced_info"
        }

        return NSLocalizedString("advanced_info", bundle: bundle, comment: "")
      }

      /// en translation: After Alarm Flash is turned on, the camera will automatically light up the flash when the motion detection is triggered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_white_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_white_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_white_tips"
        }

        return NSLocalizedString("camera_white_tips", bundle: bundle, comment: "")
      }

      /// en translation: After Alarm Siren is turned on, the camera will automatically sound the alarm siren when the motion detection is triggered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func siren_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("siren_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "siren_des"
        }

        return NSLocalizedString("siren_des", bundle: bundle, comment: "")
      }

      /// en translation: After Anti-Flicker is turned on, the camera will offset the strobe frequency of the alternating current. Solve the flicker of the video screen.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func anti_flicker_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("anti_flicker_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "anti_flicker_tips"
        }

        return NSLocalizedString("anti_flicker_tips", bundle: bundle, comment: "")
      }

      /// en translation: After Classification is turned on, the video will analyze the content of the video. At present, the main recognition categories include person, pet, vehicle, and package.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ai_filter_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ai_filter_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ai_filter_des"
        }

        return NSLocalizedString("ai_filter_des", bundle: bundle, comment: "")
      }

      /// en translation: After Classification is turned on, the video will analyze the content of the video. At present, the main recognition categories include person, pet.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ai_filter_des2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ai_filter_des2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ai_filter_des2"
        }

        return NSLocalizedString("ai_filter_des2", bundle: bundle, comment: "")
      }

      /// en translation: After Motion Detection is turned on, the camera can be triggered by the moving objects and record video, helping you to detect environmental changes at all times.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func motion_detection_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("motion_detection_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "motion_detection_des"
        }

        return NSLocalizedString("motion_detection_des", bundle: bundle, comment: "")
      }

      /// en translation: After Motion Tracking is turned on, the camera will automatically follow the recording after detecting motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func motion_tracking_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("motion_tracking_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "motion_tracking_open"
        }

        return NSLocalizedString("motion_tracking_open", bundle: bundle, comment: "")
      }

      /// en translation: After Night Vision is turned on, the camera will support night viewing. Improve camera shooting performance in dark environments.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func night_version_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("night_version_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "night_version_tips"
        }

        return NSLocalizedString("night_version_tips", bundle: bundle, comment: "")
      }

      /// en translation: After Notification is turned on, the camera will push the trigger recording of abnormal activities.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_des"
        }

        return NSLocalizedString("notification_des", bundle: bundle, comment: "")
      }

      /// en translation: After Schedule is turned on, the camera will automatically enter sleep mode within the specified time.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func auto_sleep_prompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto_sleep_prompt", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "auto_sleep_prompt"
        }

        return NSLocalizedString("auto_sleep_prompt", bundle: bundle, comment: "")
      }

      /// en translation: After adding Activity Zone, the camera will still record all videos, but will only push abnormal activities in the activity zones.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func activity_zone_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity_zone_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity_zone_tips"
        }

        return NSLocalizedString("activity_zone_tips", bundle: bundle, comment: "")
      }

      /// en translation: After camera enters Sleep mode, the surveillance area cannot be viewed in real time, and functions such as motion detection, intercom and alarm will be suspended.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_prompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_prompt", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_prompt"
        }

        return NSLocalizedString("sleep_prompt", bundle: bundle, comment: "")
      }

      /// en translation: After clicking confirm to send the verification code, your mailbox will receive the verification code email within 60 seconds.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason1"
        }

        return NSLocalizedString("cannot_receive_code_reason1", bundle: bundle, comment: "")
      }

      /// en translation: After expiration, you will:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_sec(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_sec", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_sec"
        }

        return NSLocalizedString("notification_sec", bundle: bundle, comment: "")
      }

      /// en translation: After long pressing the reset button, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_power_key_reset_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("double_click_power_key_reset_next", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_power_key_reset_next"
        }

        return NSLocalizedString("double_click_power_key_reset_next", bundle: bundle, comment: "")
      }

      /// en translation: After plugging in the camera, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_long_press_power_tips_s0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_long_press_power_tips_s0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_long_press_power_tips_s0"
        }

        return NSLocalizedString("guide_long_press_power_tips_s0", bundle: bundle, comment: "")
      }

      /// en translation: After the Indicator Light is turned on, the camera informs the current working status through the indicator light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func indicator_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("indicator_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "indicator_des"
        }

        return NSLocalizedString("indicator_des", bundle: bundle, comment: "")
      }

      /// en translation: After the camera finishes rotating, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_b0_step0_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_b0_step0_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_b0_step0_desc"
        }

        return NSLocalizedString("bind_device_b0_step0_desc", bundle: bundle, comment: "")
      }

      /// en translation: After the connection is successful, it will automatically jump to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_skip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_skip"
        }

        return NSLocalizedString("bind_device_skip", bundle: bundle, comment: "")
      }

      /// en translation: After the expiration date, VicoHome APP will no longer be usable. Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func migration_statement_2_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("migration_statement_2_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_2_3"
        }

        return NSLocalizedString("migration_statement_2_3", bundle: bundle, comment: "")
      }

      /// en translation: After the product function is optimized, the record video switch is removed. In order not to affect your usage habits, the motion detection switch is temporarily turned off. If necessary, please turn it on again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func close_motion_detection_tip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close_motion_detection_tip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close_motion_detection_tip"
        }

        return NSLocalizedString("close_motion_detection_tip", bundle: bundle, comment: "")
      }

      /// en translation: Agree
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func agree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agree", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agree"
        }

        return NSLocalizedString("agree", bundle: bundle, comment: "")
      }

      /// en translation: Agree and continue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func agree_and_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agree_and_continue", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agree_and_continue"
        }

        return NSLocalizedString("agree_and_continue", bundle: bundle, comment: "")
      }

      /// en translation: Alarm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_alarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_alarm", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_alarm"
        }

        return NSLocalizedString("camera_alarm", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Flash
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func flash_light_item(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("flash_light_item", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "flash_light_item"
        }

        return NSLocalizedString("flash_light_item", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Siren
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alert_buttom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_buttom", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_buttom"
        }

        return NSLocalizedString("alert_buttom", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alarm_volume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm_volume", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm_volume"
        }

        return NSLocalizedString("alarm_volume", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func volume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("volume", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "volume"
        }

        return NSLocalizedString("volume", bundle: bundle, comment: "")
      }

      /// en translation: Alarmed successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sent_alarm_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sent_alarm_successfully", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sent_alarm_successfully"
        }

        return NSLocalizedString("sent_alarm_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Align QR code within the frame to scan.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alignqr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alignqr", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alignqr"
        }

        return NSLocalizedString("alignqr", bundle: bundle, comment: "")
      }

      /// en translation: All camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func all_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "all_device"
        }

        return NSLocalizedString("all_device", bundle: bundle, comment: "")
      }

      /// en translation: All data on this SD card will be deleted, are you sure to format it?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_card_format_remind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_card_format_remind", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_card_format_remind"
        }

        return NSLocalizedString("sd_card_format_remind", bundle: bundle, comment: "")
      }

      /// en translation: All motion
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func all_alerts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all_alerts", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "all_alerts"
        }

        return NSLocalizedString("all_alerts", bundle: bundle, comment: "")
      }

      /// en translation: All personal data related to this account, including library information, will be permanently deleted and cannot be recovered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_content_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_content_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_content_3"
        }

        return NSLocalizedString("delete_notice_content_3", bundle: bundle, comment: "")
      }

      /// en translation: All screen
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func all_screen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all_screen", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "all_screen"
        }

        return NSLocalizedString("all_screen", bundle: bundle, comment: "")
      }

      /// en translation: All the data from this camera will not be received anymore.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func remove_device_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remove_device_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove_device_des"
        }

        return NSLocalizedString("remove_device_des", bundle: bundle, comment: "")
      }

      /// en translation: Allow
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow"
        }

        return NSLocalizedString("allow", bundle: bundle, comment: "")
      }

      /// en translation: Allow "Bluetooth" permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_bluetooth_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_bluetooth_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_bluetooth_permission"
        }

        return NSLocalizedString("allow_bluetooth_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow "location" permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_location_permission_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_location_permission_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_location_permission_title"
        }

        return NSLocalizedString("allow_location_permission_title", bundle: bundle, comment: "")
      }

      /// en translation: Allow Bluetooth permission, quickly bind the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bluetooth_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bluetooth_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bluetooth_permission"
        }

        return NSLocalizedString("bluetooth_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow Location Permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func grant_location_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("grant_location_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "grant_location_permission"
        }

        return NSLocalizedString("grant_location_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow bluetooth permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_bluetooth_permission_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_bluetooth_permission_button", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_bluetooth_permission_button"
        }

        return NSLocalizedString("allow_bluetooth_permission_button", bundle: bundle, comment: "")
      }

      /// en translation: Allow camera access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_permission"
        }

        return NSLocalizedString("camera_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow camera access in the phone system "Settings" to scan QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_permission_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_permission_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_permission_tips"
        }

        return NSLocalizedString("camera_permission_tips", bundle: bundle, comment: "")
      }

      /// en translation: Allow camera permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allowa_camera_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allowa_camera_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allowa_camera_permission"
        }

        return NSLocalizedString("allowa_camera_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow location access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_permission"
        }

        return NSLocalizedString("location_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow location access in the phone system "Settings" to get a nearby Wi-Fi list.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_permission_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_permission_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_permission_tips"
        }

        return NSLocalizedString("location_permission_tips", bundle: bundle, comment: "")
      }

      /// en translation: Allow location access in the phone system "Settings" to help camera adding.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_permission_help_adding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_permission_help_adding", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_permission_help_adding"
        }

        return NSLocalizedString("location_permission_help_adding", bundle: bundle, comment: "")
      }

      /// en translation: Allow location permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_location_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_location_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_location_permission"
        }

        return NSLocalizedString("allow_location_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow location permission, automatically obtain the current Wi-Fi name (SSID) of the phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_location_permission_get_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_location_permission_get_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_location_permission_get_wifi"
        }

        return NSLocalizedString("allow_location_permission_get_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Allow location permission, automatically obtain the current Wi-Fi name and configure it to the camera (recommended) or manually enter the Wi-Fi name (case sensitive).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_location_permission_for_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_location_permission_for_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_location_permission_for_camera"
        }

        return NSLocalizedString("allow_location_permission_for_camera", bundle: bundle, comment: "")
      }

      /// en translation: Allow microphone access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func microphone_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("microphone_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "microphone_permission"
        }

        return NSLocalizedString("microphone_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow microphone access in the phone system "Settings" to make voice calls.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func microphone_permission_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("microphone_permission_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "microphone_permission_tips"
        }

        return NSLocalizedString("microphone_permission_tips", bundle: bundle, comment: "")
      }

      /// en translation: Allow mobile phone camera permission, scan the QR code on the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_camera_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_camera_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_camera_permission"
        }

        return NSLocalizedString("allow_camera_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow notifications access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notifications_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifications_permission"
        }

        return NSLocalizedString("notifications_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow notifications access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func push_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("push_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "push_permission"
        }

        return NSLocalizedString("push_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow photos access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func photos_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photos_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photos_permission"
        }

        return NSLocalizedString("photos_permission", bundle: bundle, comment: "")
      }

      /// en translation: Allow photos access in phone system "Settings" to store media files.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func photos_permission_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photos_permission_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photos_permission_tips"
        }

        return NSLocalizedString("photos_permission_tips", bundle: bundle, comment: "")
      }

      /// en translation: Alter location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alter_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alter_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alter_location"
        }

        return NSLocalizedString("alter_location", bundle: bundle, comment: "")
      }

      /// en translation: An account with this email already exists. Try logging in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mail_registered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mail_registered", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mail_registered"
        }

        return NSLocalizedString("mail_registered", bundle: bundle, comment: "")
      }

      /// en translation: Anti-Flicker
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func anti_flicker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("anti_flicker", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "anti_flicker"
        }

        return NSLocalizedString("anti_flicker", bundle: bundle, comment: "")
      }

      /// en translation: Anti-Flicker
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func anti_flicker_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("anti_flicker_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "anti_flicker_setting"
        }

        return NSLocalizedString("anti_flicker_setting", bundle: bundle, comment: "")
      }

      /// en translation: App Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func app_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_update"
        }

        return NSLocalizedString("app_update", bundle: bundle, comment: "")
      }

      /// en translation: Apply for storage access
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func storage_space_access(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("storage_space_access", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "storage_space_access"
        }

        return NSLocalizedString("storage_space_access", bundle: bundle, comment: "")
      }

      /// en translation: Apr.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_4", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_4"
        }

        return NSLocalizedString("month_4", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to delete this location?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_location_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_location_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_location_desc"
        }

        return NSLocalizedString("delete_location_desc", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to drop out adding process?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_drop_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_drop_out", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_drop_out"
        }

        return NSLocalizedString("sure_to_drop_out", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to turn off the speakers?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_speaker_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_speaker_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_speaker_1"
        }

        return NSLocalizedString("confirm_speaker_1", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete the sleep schedule time?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_sleep_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_sleep_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_sleep_time"
        }

        return NSLocalizedString("delete_sleep_time", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this account?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func remove_share_device_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remove_share_device_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove_share_device_title"
        }

        return NSLocalizedString("remove_share_device_title", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this network?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_wifi"
        }

        return NSLocalizedString("delete_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to remove this camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func remove_device_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remove_device_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove_device_title"
        }

        return NSLocalizedString("remove_device_title", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to sign out?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func logout_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_des"
        }

        return NSLocalizedString("logout_des", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to turn the alarm on?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turn_alern(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_alern", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_alern"
        }

        return NSLocalizedString("turn_alern", bundle: bundle, comment: "")
      }

      /// en translation: Area detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func detection_area(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detection_area", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detection_area"
        }

        return NSLocalizedString("detection_area", bundle: bundle, comment: "")
      }

      /// en translation: Askari has initiated debit of %@ from your MoMo account. Enter phone number:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mtn_momo_payment_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("mtn_momo_payment_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mtn_momo_payment_title"
        }

        let format = NSLocalizedString("mtn_momo_payment_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: At the same time, we also support humanoid tracking.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func tracking_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tracking_guide", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tracking_guide"
        }

        return NSLocalizedString("tracking_guide", bundle: bundle, comment: "")
      }

      /// en translation: Audio Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func audio_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("audio_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "audio_setting"
        }

        return NSLocalizedString("audio_setting", bundle: bundle, comment: "")
      }

      /// en translation: Aug.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_8", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_8"
        }

        return NSLocalizedString("month_8", bundle: bundle, comment: "")
      }

      /// en translation: Auto
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func auto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "auto"
        }

        return NSLocalizedString("auto", bundle: bundle, comment: "")
      }

      /// en translation: Auto
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ratio_auto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ratio_auto", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ratio_auto"
        }

        return NSLocalizedString("ratio_auto", bundle: bundle, comment: "")
      }

      /// en translation: Auto subscribe
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_auto_pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_auto_pay", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_auto_pay"
        }

        return NSLocalizedString("payment_auto_pay", bundle: bundle, comment: "")
      }

      /// en translation: Available 2.4GHz Wi-Fi networks are as follows.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func available_2_4g_are_follows(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("available_2_4g_are_follows", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "available_2_4g_are_follows"
        }

        return NSLocalizedString("available_2_4g_are_follows", bundle: bundle, comment: "")
      }

      /// en translation: Available Fireware
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func available_fireware(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("available_fireware", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "available_fireware"
        }

        return NSLocalizedString("available_fireware", bundle: bundle, comment: "")
      }

      /// en translation: Awareness Service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func awareness_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("awareness_service", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "awareness_service"
        }

        return NSLocalizedString("awareness_service", bundle: bundle, comment: "")
      }

      /// en translation: Awareness Service Agreement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func renewal_clause_key_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("renewal_clause_key_terms", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "renewal_clause_key_terms"
        }

        return NSLocalizedString("renewal_clause_key_terms", bundle: bundle, comment: "")
      }

      /// en translation: Back door
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func back_door(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("back_door", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "back_door"
        }

        return NSLocalizedString("back_door", bundle: bundle, comment: "")
      }

      /// en translation: Basic
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func plan_basic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plan_basic", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plan_basic"
        }

        return NSLocalizedString("plan_basic", bundle: bundle, comment: "")
      }

      /// en translation: Battery Level
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func battery_level(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("battery_level", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "battery_level"
        }

        return NSLocalizedString("battery_level", bundle: bundle, comment: "")
      }

      /// en translation: Battery camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func battery_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("battery_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "battery_camera"
        }

        return NSLocalizedString("battery_camera", bundle: bundle, comment: "")
      }

      /// en translation: Battery issue/hardware issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func battery_issue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("battery_issue", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "battery_issue"
        }

        return NSLocalizedString("battery_issue", bundle: bundle, comment: "")
      }

      /// en translation: Because %@ Awareness uses third-party chargeback, your account cancellation is not related to automatic renewal. To avoid unnecessary deductions, please cancel automatic renewal.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_content_4_ios(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("delete_notice_content_4_ios", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_content_4_ios"
        }

        let format = NSLocalizedString("delete_notice_content_4_ios", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Because the account will not be restored after the deletion. Before you submit the application, please ensure the security of your account, and confirm the following information:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_content_0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_content_0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_content_0"
        }

        return NSLocalizedString("delete_notice_content_0", bundle: bundle, comment: "")
      }

      /// en translation: Bedroom
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bed_room(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bed_room", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bed_room"
        }

        return NSLocalizedString("bed_room", bundle: bundle, comment: "")
      }

      /// en translation: Before binding, you need to enter the password to verify the user's identity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verify_identity_desc_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_identity_desc_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_identity_desc_1"
        }

        return NSLocalizedString("verify_identity_desc_1", bundle: bundle, comment: "")
      }

      /// en translation: Before rebinding, you need to enter the password to verify the user's identity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verify_user_rebind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_user_rebind", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_user_rebind"
        }

        return NSLocalizedString("verify_user_rebind", bundle: bundle, comment: "")
      }

      /// en translation: Bind now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_to_bind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_to_bind", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_to_bind"
        }

        return NSLocalizedString("go_to_bind", bundle: bundle, comment: "")
      }

      /// en translation: Bound email ID successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_bind_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_bind_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_bind_success"
        }

        return NSLocalizedString("email_bind_success", bundle: bundle, comment: "")
      }

      /// en translation: Bound phone number successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_number_bind_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_number_bind_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_number_bind_success"
        }

        return NSLocalizedString("phone_number_bind_success", bundle: bundle, comment: "")
      }

      /// en translation: Build Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func app_build_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_build_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_build_info"
        }

        return NSLocalizedString("app_build_info", bundle: bundle, comment: "")
      }

      /// en translation: BuildENV
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func build_env(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("build_env", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "build_env"
        }

        return NSLocalizedString("build_env", bundle: bundle, comment: "")
      }

      /// en translation: Buy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buy"
        }

        return NSLocalizedString("buy", bundle: bundle, comment: "")
      }

      /// en translation: Buy now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_buy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_buy"
        }

        return NSLocalizedString("go_buy", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera"
        }

        return NSLocalizedString("camera", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device"
        }

        return NSLocalizedString("device", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission_name_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission_name_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_name_camera"
        }

        return NSLocalizedString("permission_name_camera", bundle: bundle, comment: "")
      }

      /// en translation: Camera IP
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_ip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_ip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_ip"
        }

        return NSLocalizedString("device_ip", bundle: bundle, comment: "")
      }

      /// en translation: Camera Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_info"
        }

        return NSLocalizedString("device_info", bundle: bundle, comment: "")
      }

      /// en translation: Camera Management
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_manager(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_manager", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_manager"
        }

        return NSLocalizedString("device_manager", bundle: bundle, comment: "")
      }

      /// en translation: Camera Management
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_title_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_title_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_title_1"
        }

        return NSLocalizedString("guide_title_1", bundle: bundle, comment: "")
      }

      /// en translation: Camera Name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_name"
        }

        return NSLocalizedString("device_name", bundle: bundle, comment: "")
      }

      /// en translation: Camera Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_settings", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_settings"
        }

        return NSLocalizedString("device_settings", bundle: bundle, comment: "")
      }

      /// en translation: Camera finished rotating.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hear_device_power_on_b0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hear_device_power_on_b0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hear_device_power_on_b0"
        }

        return NSLocalizedString("hear_device_power_on_b0", bundle: bundle, comment: "")
      }

      /// en translation: Camera found
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_find_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_find_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_find_device"
        }

        return NSLocalizedString("connect_find_device", bundle: bundle, comment: "")
      }

      /// en translation: Camera is offline
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_is_offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_is_offline", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_is_offline"
        }

        return NSLocalizedString("camera_is_offline", bundle: bundle, comment: "")
      }

      /// en translation: Camera is offline, please reconnect it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func offline_reconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("offline_reconnect", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "offline_reconnect"
        }

        return NSLocalizedString("offline_reconnect", bundle: bundle, comment: "")
      }

      /// en translation: Camera is sleeping
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_sleep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_sleep", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_sleep"
        }

        return NSLocalizedString("camera_sleep", bundle: bundle, comment: "")
      }

      /// en translation: Camera not responding
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_response(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_response", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_response"
        }

        return NSLocalizedString("no_response", bundle: bundle, comment: "")
      }

      /// en translation: Camera position and distance
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_guide_one(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_guide_one", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_guide_one"
        }

        return NSLocalizedString("package_guide_one", bundle: bundle, comment: "")
      }

      /// en translation: Camera serial number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_serial_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_serial_number", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_serial_number"
        }

        return NSLocalizedString("camera_serial_number", bundle: bundle, comment: "")
      }

      /// en translation: Camera sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func invite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invite", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invite"
        }

        return NSLocalizedString("invite", bundle: bundle, comment: "")
      }

      /// en translation: Camera view
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_guide_three(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_guide_three", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_guide_three"
        }

        return NSLocalizedString("package_guide_three", bundle: bundle, comment: "")
      }

      /// en translation: Can't receive the verification code?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code"
        }

        return NSLocalizedString("cannot_receive_code", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cancel_setup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel_setup", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel_setup"
        }

        return NSLocalizedString("cancel_setup", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_pay_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_pay_cancel", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_pay_cancel"
        }

        return NSLocalizedString("payment_pay_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Canceled
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_user_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_user_cancel", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_user_cancel"
        }

        return NSLocalizedString("payment_user_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Canceled mark successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func marked_cancle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("marked_cancle", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "marked_cancle"
        }

        return NSLocalizedString("marked_cancle", bundle: bundle, comment: "")
      }

      /// en translation: Cannot change resolution during video recording.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_switch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_switch", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_switch"
        }

        return NSLocalizedString("cannot_switch", bundle: bundle, comment: "")
      }

      /// en translation: Cannot connect to the camera, please check the network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func may_be_connection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("may_be_connection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "may_be_connection"
        }

        return NSLocalizedString("may_be_connection", bundle: bundle, comment: "")
      }

      /// en translation: Cannot find Wi-Fi information?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_no_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_no_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_no_wifi"
        }

        return NSLocalizedString("connect_no_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Cannot find the QR code on the camera body?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func can_not_find_camera_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can_not_find_camera_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can_not_find_camera_qr_code"
        }

        return NSLocalizedString("can_not_find_camera_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Cannot find the admin’s QR code?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func can_not_find_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can_not_find_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can_not_find_qr_code"
        }

        return NSLocalizedString("can_not_find_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Cannot find the reset button?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func can_not_find_reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can_not_find_reset", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can_not_find_reset"
        }

        return NSLocalizedString("can_not_find_reset", bundle: bundle, comment: "")
      }

      /// en translation: Cannot finish scanning?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_failed"
        }

        return NSLocalizedString("scan_qr_code_failed", bundle: bundle, comment: "")
      }

      /// en translation: Cannot take pictures during video recording.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_take_screenshot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_take_screenshot", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_take_screenshot"
        }

        return NSLocalizedString("cannot_take_screenshot", bundle: bundle, comment: "")
      }

      /// en translation: Cannot turn on?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func can_not_power_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can_not_power_up", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can_not_power_up"
        }

        return NSLocalizedString("can_not_power_up", bundle: bundle, comment: "")
      }

      /// en translation: Change Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_email"
        }

        return NSLocalizedString("change_email", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_password"
        }

        return NSLocalizedString("change_password", bundle: bundle, comment: "")
      }

      /// en translation: Change Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_wifi"
        }

        return NSLocalizedString("change_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Change Wi-Fi Network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_wifi_network(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_wifi_network", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_wifi_network"
        }

        return NSLocalizedString("change_wifi_network", bundle: bundle, comment: "")
      }

      /// en translation: Change now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change"
        }

        return NSLocalizedString("change", bundle: bundle, comment: "")
      }

      /// en translation: Change phone number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_phone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_phone"
        }

        return NSLocalizedString("change_phone", bundle: bundle, comment: "")
      }

      /// en translation: Change the language  successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func toast_change_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_change_language", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toast_change_language"
        }

        return NSLocalizedString("toast_change_language", bundle: bundle, comment: "")
      }

      /// en translation: Changed password successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_password_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_password_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_password_success"
        }

        return NSLocalizedString("change_password_success", bundle: bundle, comment: "")
      }

      /// en translation: Changes are not saved yet. Do you  want to save now?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func changed_not_saved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changed_not_saved", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changed_not_saved"
        }

        return NSLocalizedString("changed_not_saved", bundle: bundle, comment: "")
      }

      /// en translation: Charg completed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func charging_completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("charging_completed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "charging_completed"
        }

        return NSLocalizedString("charging_completed", bundle: bundle, comment: "")
      }

      /// en translation: Charging
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func charging(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("charging", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "charging"
        }

        return NSLocalizedString("charging", bundle: bundle, comment: "")
      }

      /// en translation: Chat with us or leave us a message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func iosAnswer_botCellTextInactivity_get_in_touch_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.answer_bot.cell.text.inactivity_get_in_touch_message", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.answer_bot.cell.text.inactivity_get_in_touch_message"
        }

        return NSLocalizedString("ios.answer_bot.cell.text.inactivity_get_in_touch_message", bundle: bundle, comment: "")
      }

      /// en translation: Check Firmware Updates
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_for_update_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_for_update_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_for_update_version"
        }

        return NSLocalizedString("check_for_update_version", bundle: bundle, comment: "")
      }

      /// en translation: Check For Updates
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_update_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_update_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_update_version"
        }

        return NSLocalizedString("check_update_version", bundle: bundle, comment: "")
      }

      /// en translation: Check Wi-Fi signal strength …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_wifi_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_wifi_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_wifi_1"
        }

        return NSLocalizedString("check_wifi_1", bundle: bundle, comment: "")
      }

      /// en translation: Check it under the catalog of shared cameras.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_result_scuess_check(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_result_scuess_check", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_result_scuess_check"
        }

        return NSLocalizedString("bind_result_scuess_check", bundle: bundle, comment: "")
      }

      /// en translation: Check now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_buy_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_buy_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_buy_2"
        }

        return NSLocalizedString("go_buy_2", bundle: bundle, comment: "")
      }

      /// en translation: Check now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_to_see(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_to_see", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_to_see"
        }

        return NSLocalizedString("go_to_see", bundle: bundle, comment: "")
      }

      /// en translation: Check the Live stream, playback video clips.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func invite_title_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invite_title_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invite_title_des"
        }

        return NSLocalizedString("invite_title_des", bundle: bundle, comment: "")
      }

      /// en translation: Choose
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func choose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose"
        }

        return NSLocalizedString("choose", bundle: bundle, comment: "")
      }

      /// en translation: Choose Firmware Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func choose_firmware_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_firmware_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_firmware_update"
        }

        return NSLocalizedString("choose_firmware_update", bundle: bundle, comment: "")
      }

      /// en translation: Choose now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_to_choose_item(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_to_choose_item", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_to_choose_item"
        }

        return NSLocalizedString("notification_to_choose_item", bundle: bundle, comment: "")
      }

      /// en translation: Choose other Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func choose_other_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_other_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_other_wifi"
        }

        return NSLocalizedString("choose_other_wifi", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("city", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "city"
        }

        return NSLocalizedString("city", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_district(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_district", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_district"
        }

        return NSLocalizedString("select_district", bundle: bundle, comment: "")
      }

      /// en translation: Classification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ai_filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ai_filter", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ai_filter"
        }

        return NSLocalizedString("ai_filter", bundle: bundle, comment: "")
      }

      /// en translation: Clear Cache
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func clear_cache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clear_cache", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear_cache"
        }

        return NSLocalizedString("clear_cache", bundle: bundle, comment: "")
      }

      /// en translation: Clearing cache does not affect the operation of %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func clear_cache_not_affect_download_media(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("clear_cache_not_affect_download_media", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear_cache_not_affect_download_media"
        }

        let format = NSLocalizedString("clear_cache_not_affect_download_media", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Closed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close"
        }

        return NSLocalizedString("close", bundle: bundle, comment: "")
      }

      /// en translation: Cloud Recording
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cloud_strorage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cloud_strorage", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloud_strorage"
        }

        return NSLocalizedString("cloud_strorage", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm"
        }

        return NSLocalizedString("confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_open"
        }

        return NSLocalizedString("confirm_open", bundle: bundle, comment: "")
      }

      /// en translation: Confirm New Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_new_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_new_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_new_password"
        }

        return NSLocalizedString("confirm_new_password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_password"
        }

        return NSLocalizedString("confirm_password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_reinput_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_reinput_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_reinput_password"
        }

        return NSLocalizedString("please_reinput_password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm that the camera enters the scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_scan_state(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_scan_state", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_scan_state"
        }

        return NSLocalizedString("confirm_scan_state", bundle: bundle, comment: "")
      }

      /// en translation: Confirm that the camera is turned on and in the code scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_notice_title1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_notice_title1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_notice_title1"
        }

        return NSLocalizedString("scan_qr_code_notice_title1", bundle: bundle, comment: "")
      }

      /// en translation: Confirm that the camera makes a sound or sees the indicator light flashes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_guide_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_guide_confirm", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_guide_confirm"
        }

        return NSLocalizedString("bind_device_guide_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the camera is turned on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_camera_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_camera_on", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_camera_on"
        }

        return NSLocalizedString("confirm_camera_on", bundle: bundle, comment: "")
      }

      /// en translation: Confirm whether the camera is emitting a beeping sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_scanning_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_scanning_sound", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_scanning_sound"
        }

        return NSLocalizedString("confirm_scanning_sound", bundle: bundle, comment: "")
      }

      /// en translation: Confirm whether the device is in the scanning state (scanning sound).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func issue_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("issue_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "issue_1"
        }

        return NSLocalizedString("issue_1", bundle: bundle, comment: "")
      }

      /// en translation: Confirm your Wi-Fi signal strength:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_wifi_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_wifi_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_wifi_2"
        }

        return NSLocalizedString("check_wifi_2", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations Please Add a Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func congratulation_add_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("congratulation_add_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "congratulation_add_camera"
        }

        return NSLocalizedString("congratulation_add_camera", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations, you have obtained "%@"%@ months of access. During this period, you can use the following services:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_coupon_sec(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("get_coupon_sec", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_coupon_sec"
        }

        let format = NSLocalizedString("get_coupon_sec", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Connect the camera to Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_to_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_to_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_to_wifi"
        }

        return NSLocalizedString("connect_to_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Connect the supply to turn on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func long_press_the_power_key_b0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("long_press_the_power_key_b0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "long_press_the_power_key_b0"
        }

        return NSLocalizedString("long_press_the_power_key_b0", bundle: bundle, comment: "")
      }

      /// en translation: Connect to Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_wifi"
        }

        return NSLocalizedString("connect_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Connect to Wi-Fi network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verify_network(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_network", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_network"
        }

        return NSLocalizedString("verify_network", bundle: bundle, comment: "")
      }

      /// en translation: Connecting to server...
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_server(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_server", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_server"
        }

        return NSLocalizedString("connect_server", bundle: bundle, comment: "")
      }

      /// en translation: Connecting …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connecting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connecting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connecting"
        }

        return NSLocalizedString("connecting", bundle: bundle, comment: "")
      }

      /// en translation: Connection succeeded
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_success"
        }

        return NSLocalizedString("connect_success", bundle: bundle, comment: "")
      }

      /// en translation: Connection to server timed out
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_sever_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_sever_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_sever_timeout"
        }

        return NSLocalizedString("connect_sever_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Contact
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func questions_contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("questions_contact", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "questions_contact"
        }

        return NSLocalizedString("questions_contact", bundle: bundle, comment: "")
      }

      /// en translation: Contact help service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_scan_failed_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_scan_failed_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_scan_failed_2"
        }

        return NSLocalizedString("bind_device_scan_failed_2", bundle: bundle, comment: "")
      }

      /// en translation: Contact the admin to set the activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func contact_admin_set_az(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact_admin_set_az", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contact_admin_set_az"
        }

        return NSLocalizedString("contact_admin_set_az", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_on", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_on"
        }

        return NSLocalizedString("go_on", bundle: bundle, comment: "")
      }

      /// en translation: Continuous Subscription Service Agreement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func renewal_clause_key_clause(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("renewal_clause_key_clause", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "renewal_clause_key_clause"
        }

        return NSLocalizedString("renewal_clause_key_clause", bundle: bundle, comment: "")
      }

      /// en translation: Copyright © 2021 Photon Sail Tech All rights reserved
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func copyright(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("copyright", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "copyright"
        }

        return NSLocalizedString("copyright", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country"
        }

        return NSLocalizedString("country", bundle: bundle, comment: "")
      }

      /// en translation: Country/Region
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func country_region(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country_region", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country_region"
        }

        return NSLocalizedString("country_region", bundle: bundle, comment: "")
      }

      /// en translation: Country/Region State/Province City
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_address_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_address_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_address_des"
        }

        return NSLocalizedString("location_address_des", bundle: bundle, comment: "")
      }

      /// en translation: Create a new location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func create_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create_location"
        }

        return NSLocalizedString("create_location", bundle: bundle, comment: "")
      }

      /// en translation: Created location successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_create_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_create_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_create_success"
        }

        return NSLocalizedString("location_create_success", bundle: bundle, comment: "")
      }

      /// en translation: Crying
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func crying_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crying_tag", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "crying_tag"
        }

        return NSLocalizedString("crying_tag", bundle: bundle, comment: "")
      }

      /// en translation: Crying detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func crying_detection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crying_detection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "crying_detection"
        }

        return NSLocalizedString("crying_detection", bundle: bundle, comment: "")
      }

      /// en translation: Current Location:%@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func current_location(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("current_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "current_location"
        }

        let format = NSLocalizedString("current_location", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Currently 5GHz Wi-Fi and enterprise Wi-Fi are not supported.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_ap_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_ap_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_ap_3"
        }

        return NSLocalizedString("connect_error_ap_3", bundle: bundle, comment: "")
      }

      /// en translation: Currently 5GHz Wi-Fi and enterprise Wi-Fi are not supported.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_password_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_password_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_password_2"
        }

        return NSLocalizedString("connect_error_password_2", bundle: bundle, comment: "")
      }

      /// en translation: Currently only supports 2.4GHz Wi-Fi. You can proceed to the next step after connecting.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verify_network_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_network_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_network_des"
        }

        return NSLocalizedString("verify_network_des", bundle: bundle, comment: "")
      }

      /// en translation: Custom Activity Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func gif_ad_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gif_ad_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gif_ad_3"
        }

        return NSLocalizedString("gif_ad_3", bundle: bundle, comment: "")
      }

      /// en translation: Data acquisition failed, please restart the APP.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func data_acquisition_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("data_acquisition_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "data_acquisition_failed"
        }

        return NSLocalizedString("data_acquisition_failed", bundle: bundle, comment: "")
      }

      /// en translation: Dec.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_12", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_12"
        }

        return NSLocalizedString("month_12", bundle: bundle, comment: "")
      }

      /// en translation: Default
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func default_common(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("default_common", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "default_common"
        }

        return NSLocalizedString("default_common", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete"
        }

        return NSLocalizedString("delete", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_account", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_account"
        }

        return NSLocalizedString("delete_account", bundle: bundle, comment: "")
      }

      /// en translation: Delete Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_this_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_this_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_this_location"
        }

        return NSLocalizedString("delete_this_location", bundle: bundle, comment: "")
      }

      /// en translation: Delete successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_success"
        }

        return NSLocalizedString("delete_success", bundle: bundle, comment: "")
      }

      /// en translation: Delete successfully. New position can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func position_deleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("position_deleted", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "position_deleted"
        }

        return NSLocalizedString("position_deleted", bundle: bundle, comment: "")
      }

      /// en translation: Delete this network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_delete", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_delete"
        }

        return NSLocalizedString("bind_device_delete", bundle: bundle, comment: "")
      }

      /// en translation: Deselect all
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func deselect_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deselect_all", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deselect_all"
        }

        return NSLocalizedString("deselect_all", bundle: bundle, comment: "")
      }

      /// en translation: Detailed Address
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func detail_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_location"
        }

        return NSLocalizedString("detail_location", bundle: bundle, comment: "")
      }

      /// en translation: Detailed address (optional)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func street_address_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("street_address_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "street_address_2"
        }

        return NSLocalizedString("street_address_2", bundle: bundle, comment: "")
      }

      /// en translation: Detailed address, such as apartment, house number, etc.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func address2_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address2_placeholder", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address2_placeholder"
        }

        return NSLocalizedString("address2_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Detailed address, such as apartment, house number, etc.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func street_address_2_place_holder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("street_address_2_place_holder", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "street_address_2_place_holder"
        }

        return NSLocalizedString("street_address_2_place_holder", bundle: bundle, comment: "")
      }

      /// en translation: Detected an ongoing formatting task, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_card_formatting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_card_formatting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_card_formatting"
        }

        return NSLocalizedString("sd_card_formatting", bundle: bundle, comment: "")
      }

      /// en translation: Detection Sensitivity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func detection_sensitivity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detection_sensitivity", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detection_sensitivity"
        }

        return NSLocalizedString("detection_sensitivity", bundle: bundle, comment: "")
      }

      /// en translation: Deutsche(German)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_ge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_ge", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_ge"
        }

        return NSLocalizedString("device_language_ge", bundle: bundle, comment: "")
      }

      /// en translation: Did you hear"Scan QR code"?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func is_heard_scan_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("is_heard_scan_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "is_heard_scan_qr_code"
        }

        return NSLocalizedString("is_heard_scan_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Did you hear"Scan QR code"?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func is_listen_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("is_listen_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "is_listen_qr_code"
        }

        return NSLocalizedString("is_listen_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Didn't hear a beeping sound?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func did_not_hear_scanning_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("did_not_hear_scanning_sound", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "did_not_hear_scanning_sound"
        }

        return NSLocalizedString("did_not_hear_scanning_sound", bundle: bundle, comment: "")
      }

      /// en translation: Disable
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func disable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disable", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disable"
        }

        return NSLocalizedString("disable", bundle: bundle, comment: "")
      }

      /// en translation: Disagree
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func disagree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disagree", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disagree"
        }

        return NSLocalizedString("disagree", bundle: bundle, comment: "")
      }

      /// en translation: District/County
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func district_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("district_country", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "district_country"
        }

        return NSLocalizedString("district_country", bundle: bundle, comment: "")
      }

      /// en translation: Do not disturb
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func do_not_disturb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do_not_disturb", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do_not_disturb"
        }

        return NSLocalizedString("do_not_disturb", bundle: bundle, comment: "")
      }

      /// en translation: Do not disturb messages is turned on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turned_on_donot_disturb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turned_on_donot_disturb", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turned_on_donot_disturb"
        }

        return NSLocalizedString("turned_on_donot_disturb", bundle: bundle, comment: "")
      }

      /// en translation: Do not disturb within 15 minutes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func do_not_disturb_15min(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do_not_disturb_15min", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do_not_disturb_15min"
        }

        return NSLocalizedString("do_not_disturb_15min", bundle: bundle, comment: "")
      }

      /// en translation: Do not open
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_open_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_open_now", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_open_now"
        }

        return NSLocalizedString("not_open_now", bundle: bundle, comment: "")
      }

      /// en translation: Do not show this again today
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_tip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_tip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_tip"
        }

        return NSLocalizedString("no_tip", bundle: bundle, comment: "")
      }

      /// en translation: Do not update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func do_not_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do_not_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do_not_update"
        }

        return NSLocalizedString("do_not_update", bundle: bundle, comment: "")
      }

      /// en translation: Do not update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("later", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "later"
        }

        return NSLocalizedString("later", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm remove this camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_remove_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_remove_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_remove_device"
        }

        return NSLocalizedString("sure_to_remove_device", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to clear cache?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_clear_cache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_clear_cache", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_clear_cache"
        }

        return NSLocalizedString("sure_to_clear_cache", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to delete %d items from the cloud?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_title_del_multi(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("dialog_title_del_multi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_title_del_multi"
        }

        let format = NSLocalizedString("dialog_title_del_multi", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Do you confirm to delete this account?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_cancel_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_cancel_share", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_cancel_share"
        }

        return NSLocalizedString("sure_to_cancel_share", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to delete this activity zone?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_delete_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_delete_zone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_delete_zone"
        }

        return NSLocalizedString("sure_to_delete_zone", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to delete this address?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_delete_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_delete_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_delete_location"
        }

        return NSLocalizedString("sure_to_delete_location", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to delete this item?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_title_del_one(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_title_del_one", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_title_del_one"
        }

        return NSLocalizedString("dialog_title_del_one", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to sign out?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_log_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_log_out", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_log_out"
        }

        return NSLocalizedString("sure_to_log_out", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to turn off the  motion detection?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_turn_off_detection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_turn_off_detection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_turn_off_detection"
        }

        return NSLocalizedString("sure_to_turn_off_detection", bundle: bundle, comment: "")
      }

      /// en translation: Do you confirm to turn  the alarm on?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sure_to_turn_alarm_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sure_to_turn_alarm_on", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sure_to_turn_alarm_on"
        }

        return NSLocalizedString("sure_to_turn_alarm_on", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to continue using data in a non-WiFi environment?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wlan_enable_play(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wlan_enable_play", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wlan_enable_play"
        }

        return NSLocalizedString("wlan_enable_play", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to save the changes?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_not_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_not_save", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_not_save"
        }

        return NSLocalizedString("change_not_save", bundle: bundle, comment: "")
      }

      /// en translation: Don't show again
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_show_tips_any_more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_show_tips_any_more", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_show_tips_any_more"
        }

        return NSLocalizedString("not_show_tips_any_more", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "done"
        }

        return NSLocalizedString("done", bundle: bundle, comment: "")
      }

      /// en translation: Double click the button and place the QR code on your phone about 6-12inches in front of the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_power_key_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("double_click_power_key_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_power_key_2"
        }

        return NSLocalizedString("double_click_power_key_2", bundle: bundle, comment: "")
      }

      /// en translation: Double click the button to scan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_power_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("double_click_power_key", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_power_key"
        }

        return NSLocalizedString("double_click_power_key", bundle: bundle, comment: "")
      }

      /// en translation: Double click the power button
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_power(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("double_click_power", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_power"
        }

        return NSLocalizedString("double_click_power", bundle: bundle, comment: "")
      }

      /// en translation: Double click the power button after the camera is turned on. Then the camera will enter the scanning state when you hear the scanning sound or see the flashing light,
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_power_directions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("double_click_power_directions", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_power_directions"
        }

        return NSLocalizedString("double_click_power_directions", bundle: bundle, comment: "")
      }

      /// en translation: Double-click the button on the camera to enter internet connection mode. When the LED light is blinking blue, you’re ready.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_net_device_power_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_net_device_power_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_net_device_power_des"
        }

        return NSLocalizedString("change_net_device_power_des", bundle: bundle, comment: "")
      }

      /// en translation: Download
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func download(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("download", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "download"
        }

        return NSLocalizedString("download", bundle: bundle, comment: "")
      }

      /// en translation: Download Error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func download_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("download_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "download_error"
        }

        return NSLocalizedString("download_error", bundle: bundle, comment: "")
      }

      /// en translation: Download now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_download_it(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_download_it", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_download_it"
        }

        return NSLocalizedString("payment_download_it", bundle: bundle, comment: "")
      }

      /// en translation: Downloading …%d%%
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func downloading_progress2(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("downloading_progress2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "downloading_progress2"
        }

        let format = NSLocalizedString("downloading_progress2", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Drop out
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func drop_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drop_out", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drop_out"
        }

        return NSLocalizedString("drop_out", bundle: bundle, comment: "")
      }

      /// en translation: Duration
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_duration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_duration", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_duration"
        }

        return NSLocalizedString("video_duration", bundle: bundle, comment: "")
      }

      /// en translation: During the formatting process, the SD card cannot be used.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func formatting_cannot_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("formatting_cannot_use", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "formatting_cannot_use"
        }

        return NSLocalizedString("formatting_cannot_use", bundle: bundle, comment: "")
      }

      /// en translation: During the upgrade process, the camera may restart several times, please do not cut off the power or turn off the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_restarted_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_restarted_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_restarted_update"
        }

        return NSLocalizedString("device_restarted_update", bundle: bundle, comment: "")
      }

      /// en translation: During this period, you will not receive any motion detection messages, but all events will still be recorded.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func do_not_disturb_describ(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do_not_disturb_describ", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do_not_disturb_describ"
        }

        return NSLocalizedString("do_not_disturb_describ", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit"
        }

        return NSLocalizedString("edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func edit2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit2"
        }

        return NSLocalizedString("edit2", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// en translation: Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_address", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_address"
        }

        return NSLocalizedString("email_address", bundle: bundle, comment: "")
      }

      /// en translation: Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func enter_email_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_email_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_email_name"
        }

        return NSLocalizedString("enter_email_name", bundle: bundle, comment: "")
      }

      /// en translation: Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_email"
        }

        return NSLocalizedString("input_email", bundle: bundle, comment: "")
      }

      /// en translation: Email ID is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_email_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_email_format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_email_format"
        }

        return NSLocalizedString("error_email_format", bundle: bundle, comment: "")
      }

      /// en translation: Enable
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func enabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enabled", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enabled"
        }

        return NSLocalizedString("enabled", bundle: bundle, comment: "")
      }

      /// en translation: End
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func end(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("End", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "End"
        }

        return NSLocalizedString("End", bundle: bundle, comment: "")
      }

      /// en translation: End do not disturb mode?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func end_do_not_disturb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("end_do_not_disturb", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "end_do_not_disturb"
        }

        return NSLocalizedString("end_do_not_disturb", bundle: bundle, comment: "")
      }

      /// en translation: End time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_end_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_end_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_end_time"
        }

        return NSLocalizedString("sleep_end_time", bundle: bundle, comment: "")
      }

      /// en translation: English(English)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_en(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_en", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_en"
        }

        return NSLocalizedString("device_language_en", bundle: bundle, comment: "")
      }

      /// en translation: Enter New Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_phone_number_new(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_phone_number_new", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_phone_number_new"
        }

        return NSLocalizedString("input_phone_number_new", bundle: bundle, comment: "")
      }

      /// en translation: Enter Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_phone_number_simple(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_phone_number_simple", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_phone_number_simple"
        }

        return NSLocalizedString("input_phone_number_simple", bundle: bundle, comment: "")
      }

      /// en translation: Enter a name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func name_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name_required", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name_required"
        }

        return NSLocalizedString("name_required", bundle: bundle, comment: "")
      }

      /// en translation: Error message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message"
        }

        return NSLocalizedString("error_message", bundle: bundle, comment: "")
      }

      /// en translation: Español(Spanish)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_es(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_es", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_es"
        }

        return NSLocalizedString("device_language_es", bundle: bundle, comment: "")
      }

      /// en translation: Expired QR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func expired_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expired_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expired_code"
        }

        return NSLocalizedString("expired_code", bundle: bundle, comment: "")
      }

      /// en translation: Explore
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func explore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("explore", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "explore"
        }

        return NSLocalizedString("explore", bundle: bundle, comment: "")
      }

      /// en translation: Extended to 30 days of cloud recordings(no more than 5GB) to create the most secure video storage, so you never miss any critical moment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_payment_cloud_content(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_payment_cloud_content", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_payment_cloud_content"
        }

        return NSLocalizedString("dialog_payment_cloud_content", bundle: bundle, comment: "")
      }

      /// en translation: Extended up to 60 days and 10GB cloud recording(3 types of awareness plans) to create the most secure video storage, so you will never miss any critical moment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func service_cloud_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("service_cloud_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "service_cloud_desc"
        }

        return NSLocalizedString("service_cloud_desc", bundle: bundle, comment: "")
      }

      /// en translation: Extra Cloud Recording Storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func gif_ad_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gif_ad_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gif_ad_1"
        }

        return NSLocalizedString("gif_ad_1", bundle: bundle, comment: "")
      }

      /// en translation: F
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func friday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("friday", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "friday"
        }

        return NSLocalizedString("friday", bundle: bundle, comment: "")
      }

      /// en translation: FAQ
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func help_center(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help_center", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help_center"
        }

        return NSLocalizedString("help_center", bundle: bundle, comment: "")
      }

      /// en translation: Failed to access the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_2002_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_2002_short", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_2002_short"
        }

        return NSLocalizedString("error_2002_short", bundle: bundle, comment: "")
      }

      /// en translation: Failed to access the camera. Please confirm whether this camera is on your list.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_2002(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_2002", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_2002"
        }

        return NSLocalizedString("error_2002", bundle: bundle, comment: "")
      }

      /// en translation: Failed to change the password, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_password_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_password_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_password_failed"
        }

        return NSLocalizedString("change_password_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to connect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connection_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connection_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connection_failed"
        }

        return NSLocalizedString("connection_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to connect live stream.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_network_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_network_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_network_timeout"
        }

        return NSLocalizedString("live_network_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Failed to delete, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func failed_to_delete_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed_to_delete_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed_to_delete_and_try"
        }

        return NSLocalizedString("failed_to_delete_and_try", bundle: bundle, comment: "")
      }

      /// en translation: Failed to download, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func download_faild_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("download_faild_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "download_faild_and_try"
        }

        return NSLocalizedString("download_faild_and_try", bundle: bundle, comment: "")
      }

      /// en translation: Failed to download, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func download_file_fail_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("download_file_fail_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "download_file_fail_and_try"
        }

        return NSLocalizedString("download_file_fail_and_try", bundle: bundle, comment: "")
      }

      /// en translation: Failed to format, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_card_format_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_card_format_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_card_format_failed"
        }

        return NSLocalizedString("sd_card_format_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get SD card video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func faied_get_sdvideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("faied_get_sdvideo", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "faied_get_sdvideo"
        }

        return NSLocalizedString("faied_get_sdvideo", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get a live stream.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_live_url_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_live_url_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_live_url_error"
        }

        return NSLocalizedString("get_live_url_error", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func failed_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed_information", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed_information"
        }

        return NSLocalizedString("failed_information", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get information.(%d)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func failed_get_infomation(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("failed_get_infomation", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed_get_infomation"
        }

        let format = NSLocalizedString("failed_get_infomation", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Failed to get the location.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_location_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_location_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_location_failed"
        }

        return NSLocalizedString("get_location_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to load
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func loading_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loading_failed"
        }

        return NSLocalizedString("loading_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to load video.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func load_message_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("load_message_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "load_message_error"
        }

        return NSLocalizedString("load_message_error", bundle: bundle, comment: "")
      }

      /// en translation: Failed to mark, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func marked_fail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("marked_fail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "marked_fail"
        }

        return NSLocalizedString("marked_fail", bundle: bundle, comment: "")
      }

      /// en translation: Failed to record, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func record_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record_failed"
        }

        return NSLocalizedString("record_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to restore.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func failed_restore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed_restore", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed_restore"
        }

        return NSLocalizedString("failed_restore", bundle: bundle, comment: "")
      }

      /// en translation: Failed to save, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func save_failed_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save_failed_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save_failed_and_try"
        }

        return NSLocalizedString("save_failed_and_try", bundle: bundle, comment: "")
      }

      /// en translation: Failed to send alarm, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sent_alarm_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sent_alarm_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sent_alarm_failed"
        }

        return NSLocalizedString("sent_alarm_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to set position, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func failed_to_add_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed_to_add_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed_to_add_location"
        }

        return NSLocalizedString("failed_to_add_location", bundle: bundle, comment: "")
      }

      /// en translation: Failed to shot.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shot_fail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shot_fail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shot_fail"
        }

        return NSLocalizedString("shot_fail", bundle: bundle, comment: "")
      }

      /// en translation: Failed to update firmware, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func firmware_update_fail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firmware_update_fail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firmware_update_fail"
        }

        return NSLocalizedString("firmware_update_fail", bundle: bundle, comment: "")
      }

      /// en translation: Failed to update, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func fireware_update_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fireware_update_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fireware_update_failed"
        }

        return NSLocalizedString("fireware_update_failed", bundle: bundle, comment: "")
      }

      /// en translation: Failed to voice, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func voice_talk_failed_and_retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("voice_talk_failed_and_retry", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "voice_talk_failed_and_retry"
        }

        return NSLocalizedString("voice_talk_failed_and_retry", bundle: bundle, comment: "")
      }

      /// en translation: Feb.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_2"
        }

        return NSLocalizedString("month_2", bundle: bundle, comment: "")
      }

      /// en translation: Feedback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedback", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedback"
        }

        return NSLocalizedString("feedback", bundle: bundle, comment: "")
      }

      /// en translation: Feedback is not complete, do you want to abandon submission?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func library_feedback_not_complete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library_feedback_not_complete", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library_feedback_not_complete"
        }

        return NSLocalizedString("library_feedback_not_complete", bundle: bundle, comment: "")
      }

      /// en translation: Feedback successful, thank you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func library_feedback_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library_feedback_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library_feedback_success"
        }

        return NSLocalizedString("library_feedback_success", bundle: bundle, comment: "")
      }

      /// en translation: Feedback successful. Thank you for your participation!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func feedback_submit_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedback_submit_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedback_submit_success"
        }

        return NSLocalizedString("feedback_submit_success", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("filter", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "filter"
        }

        return NSLocalizedString("filter", bundle: bundle, comment: "")
      }

      /// en translation: Filter data to get valid information
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_content_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_content_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_content_3"
        }

        return NSLocalizedString("guide_content_3", bundle: bundle, comment: "")
      }

      /// en translation: Find Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func p_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "p_location"
        }

        return NSLocalizedString("p_location", bundle: bundle, comment: "")
      }

      /// en translation: Find the hole of reboot button, long-press it with the tool for 3 seconds to restart the camera. If it does not restart, you need to long-press the power supply for 3 seconds to turn on until you hear the power-up sound or see the light on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func long_press_reboot_directions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("long_press_reboot_directions", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "long_press_reboot_directions"
        }

        return NSLocalizedString("long_press_reboot_directions", bundle: bundle, comment: "")
      }

      /// en translation: Firmware Info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func firmware_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firmware_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firmware_info"
        }

        return NSLocalizedString("firmware_info", bundle: bundle, comment: "")
      }

      /// en translation: Firmware Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func fireware_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fireware_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fireware_update"
        }

        return NSLocalizedString("fireware_update", bundle: bundle, comment: "")
      }

      /// en translation: Firmware is installing …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_installing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_installing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_installing"
        }

        return NSLocalizedString("device_installing", bundle: bundle, comment: "")
      }

      /// en translation: Firmware is up to date.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_update_scuess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_update_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_update_scuess"
        }

        return NSLocalizedString("device_update_scuess", bundle: bundle, comment: "")
      }

      /// en translation: Firmware is upgrading, please wait.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func fireware_is_updating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fireware_is_updating", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fireware_is_updating"
        }

        return NSLocalizedString("fireware_is_updating", bundle: bundle, comment: "")
      }

      /// en translation: Firmware is upgrading…
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_is_updating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_is_updating", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_is_updating"
        }

        return NSLocalizedString("device_is_updating", bundle: bundle, comment: "")
      }

      /// en translation: Firmware upgraded successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func firmware_upgraded_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firmware_upgraded_successfully", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firmware_upgraded_successfully"
        }

        return NSLocalizedString("firmware_upgraded_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Firmware upgraded timeout, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func firmware_update_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firmware_update_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firmware_update_timeout"
        }

        return NSLocalizedString("firmware_update_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Firmware version (%@) is required to be updated for a better experience!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func fireware_need_update_tips(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("fireware_need_update_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fireware_need_update_tips"
        }

        let format = NSLocalizedString("fireware_need_update_tips", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Firmware version (%@) is required to be updated for a better experience!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func forck_update(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("forck_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forck_update"
        }

        let format = NSLocalizedString("forck_update", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Firmware version (%@) is required to be updated. Please contact this camera's admin.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func forck_update_share(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("forck_update_share", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forck_update_share"
        }

        let format = NSLocalizedString("forck_update_share", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Fix the camera to the desired location. You can directly place the camera on a flat surface or fix the bracket to the wall or ceiling by screws, and then screw the camera to the fixed base.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func install_bracket_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("install_bracket_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "install_bracket_2"
        }

        return NSLocalizedString("install_bracket_2", bundle: bundle, comment: "")
      }

      /// en translation: Flicker Rate
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func flicker_rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("flicker_rate", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "flicker_rate"
        }

        return NSLocalizedString("flicker_rate", bundle: bundle, comment: "")
      }

      /// en translation: Follow the instruction and retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func follow_instruction_retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("follow_instruction_retry", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "follow_instruction_retry"
        }

        return NSLocalizedString("follow_instruction_retry", bundle: bundle, comment: "")
      }

      /// en translation: Follow the steps and retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func follow_step_retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("follow_step_retry", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "follow_step_retry"
        }

        return NSLocalizedString("follow_step_retry", bundle: bundle, comment: "")
      }

      /// en translation: For a better experience, please update to the latest version.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func fireware_need_force_update_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fireware_need_force_update_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fireware_need_force_update_tips"
        }

        return NSLocalizedString("fireware_need_force_update_tips", bundle: bundle, comment: "")
      }

      /// en translation: For battery cameras
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func for_battery_cameras(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("for_battery_cameras", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "for_battery_cameras"
        }

        return NSLocalizedString("for_battery_cameras", bundle: bundle, comment: "")
      }

      /// en translation: For plug-in cameras
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func for_plugin_cameras(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("for_plugin_cameras", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "for_plugin_cameras"
        }

        return NSLocalizedString("for_plugin_cameras", bundle: bundle, comment: "")
      }

      /// en translation: For your safety, the password must contain at least one uppercase letter, one lowercase letter, and have a minimum length of 8 characters.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func password_setting_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_setting_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_setting_tips"
        }

        return NSLocalizedString("password_setting_tips", bundle: bundle, comment: "")
      }

      /// en translation: For your safety, the password must contain at least one uppercase letter, one lowercase letter, one number and has a minimum length of 8 characters.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_password_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_password_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_password_tips"
        }

        return NSLocalizedString("change_password_tips", bundle: bundle, comment: "")
      }

      /// en translation: Forgot password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func forgot_password_btn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgot_password_btn", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgot_password_btn"
        }

        return NSLocalizedString("forgot_password_btn", bundle: bundle, comment: "")
      }

      /// en translation: Forgot password?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func forgot_password_(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgot_password_", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgot_password_"
        }

        return NSLocalizedString("forgot_password_", bundle: bundle, comment: "")
      }

      /// en translation: Format
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "format"
        }

        return NSLocalizedString("format", bundle: bundle, comment: "")
      }

      /// en translation: Format SD card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func common_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_format"
        }

        return NSLocalizedString("common_format", bundle: bundle, comment: "")
      }

      /// en translation: Formatted SD card successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_card_format_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_card_format_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_card_format_success"
        }

        return NSLocalizedString("sd_card_format_success", bundle: bundle, comment: "")
      }

      /// en translation: Français(French)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_fr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_fr", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_fr"
        }

        return NSLocalizedString("device_language_fr", bundle: bundle, comment: "")
      }

      /// en translation: Free 7-day cloud storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func free_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("free_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "free_info"
        }

        return NSLocalizedString("free_info", bundle: bundle, comment: "")
      }

      /// en translation: Free trial for 30 days
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func free_30d(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("free_30d", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "free_30d"
        }

        return NSLocalizedString("free_30d", bundle: bundle, comment: "")
      }

      /// en translation: From
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func from_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("from_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "from_time"
        }

        return NSLocalizedString("from_time", bundle: bundle, comment: "")
      }

      /// en translation: Front door
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func front_door(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("front_door", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "front_door"
        }

        return NSLocalizedString("front_door", bundle: bundle, comment: "")
      }

      /// en translation: Garden
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func garden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden"
        }

        return NSLocalizedString("garden", bundle: bundle, comment: "")
      }

      /// en translation: Get Access to Friend's Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func join_new_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("join_new_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "join_new_device"
        }

        return NSLocalizedString("join_new_device", bundle: bundle, comment: "")
      }

      /// en translation: Get Awareness Service to use this function
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_pay_vip_first_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_pay_vip_first_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_pay_vip_first_2"
        }

        return NSLocalizedString("please_pay_vip_first_2", bundle: bundle, comment: "")
      }

      /// en translation: Get Start!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_started(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_started", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_started"
        }

        return NSLocalizedString("get_started", bundle: bundle, comment: "")
      }

      /// en translation: Get a list of nearby Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func to_get_wifi_list_nearby(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to_get_wifi_list_nearby", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to_get_wifi_list_nearby"
        }

        return NSLocalizedString("to_get_wifi_list_nearby", bundle: bundle, comment: "")
      }

      /// en translation: Get location automatically from your phone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_location_static(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_location_static", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_location_static"
        }

        return NSLocalizedString("get_location_static", bundle: bundle, comment: "")
      }

      /// en translation: Get new pushes as soon as possible
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_new_pushes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_new_pushes", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_new_pushes"
        }

        return NSLocalizedString("get_new_pushes", bundle: bundle, comment: "")
      }

      /// en translation: Get now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_now", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_now"
        }

        return NSLocalizedString("get_now", bundle: bundle, comment: "")
      }

      /// en translation: Get redeem code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_coupon_bottom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_coupon_bottom", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_coupon_bottom"
        }

        return NSLocalizedString("get_coupon_bottom", bundle: bundle, comment: "")
      }

      /// en translation: Get rid of unnecessary distractions
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_content_4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_content_4", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_content_4"
        }

        return NSLocalizedString("guide_content_4", bundle: bundle, comment: "")
      }

      /// en translation: Get the current Wi-Fi of your phone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func to_get_phone_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to_get_phone_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to_get_phone_wifi"
        }

        return NSLocalizedString("to_get_phone_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Get video list error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func videolist_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("videolist_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "videolist_error"
        }

        return NSLocalizedString("videolist_error", bundle: bundle, comment: "")
      }

      /// en translation: Get video list timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func videolist_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("videolist_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "videolist_timeout"
        }

        return NSLocalizedString("videolist_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Go live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_live(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_live", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_live"
        }

        return NSLocalizedString("go_live", bundle: bundle, comment: "")
      }

      /// en translation: Go system settings >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_location_wifi_link(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_location_wifi_link", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_location_wifi_link"
        }

        return NSLocalizedString("open_location_wifi_link", bundle: bundle, comment: "")
      }

      /// en translation: Go to system settings >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_system_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_system_settings", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_system_settings"
        }

        return NSLocalizedString("go_system_settings", bundle: bundle, comment: "")
      }

      /// en translation: Go to the APP homepage and click on the "+" sign in the upper right corner, and select "Add Friends' Camera”.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func how_to_add_friend_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("how_to_add_friend_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "how_to_add_friend_camera"
        }

        return NSLocalizedString("how_to_add_friend_camera", bundle: bundle, comment: "")
      }

      /// en translation: Got failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func receive_fail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receive_fail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receive_fail"
        }

        return NSLocalizedString("receive_fail", bundle: bundle, comment: "")
      }

      /// en translation: Got it
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func got_it(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("got_it", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "got_it"
        }

        return NSLocalizedString("got_it", bundle: bundle, comment: "")
      }

      /// en translation: Got it
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func i_know(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i_know", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "i_know"
        }

        return NSLocalizedString("i_know", bundle: bundle, comment: "")
      }

      /// en translation: Got it, buy now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_to_buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_to_buy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_to_buy"
        }

        return NSLocalizedString("go_to_buy", bundle: bundle, comment: "")
      }

      /// en translation: Got successfully, start using now!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func receive_scuess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receive_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "receive_scuess"
        }

        return NSLocalizedString("receive_scuess", bundle: bundle, comment: "")
      }

      /// en translation: Guest
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guest", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guest"
        }

        return NSLocalizedString("guest", bundle: bundle, comment: "")
      }

      /// en translation: Guest Request
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guest_request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guest_request", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guest_request"
        }

        return NSLocalizedString("guest_request", bundle: bundle, comment: "")
      }

      /// en translation: HD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_hb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_hb", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_hb"
        }

        return NSLocalizedString("video_hb", bundle: bundle, comment: "")
      }

      /// en translation: HD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_resolution_1080p(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_resolution_1080p", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_resolution_1080p"
        }

        return NSLocalizedString("video_resolution_1080p", bundle: bundle, comment: "")
      }

      /// en translation: Having problems?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func have_problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("have_problem", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "have_problem"
        }

        return NSLocalizedString("have_problem", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help"
        }

        return NSLocalizedString("help", bundle: bundle, comment: "")
      }

      /// en translation: Help & Feedback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func help_feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help_feedback", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help_feedback"
        }

        return NSLocalizedString("help_feedback", bundle: bundle, comment: "")
      }

      /// en translation: High
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("high", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "high"
        }

        return NSLocalizedString("high", bundle: bundle, comment: "")
      }

      /// en translation: Hold and speak
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hold_speak(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hold_speak", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hold_speak"
        }

        return NSLocalizedString("hold_speak", bundle: bundle, comment: "")
      }

      /// en translation: Hold the QR Code in front of your camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hold_qr_code_in_front(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hold_qr_code_in_front", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hold_qr_code_in_front"
        }

        return NSLocalizedString("hold_qr_code_in_front", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      /// en translation: Hot
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hot", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hot"
        }

        return NSLocalizedString("hot", bundle: bundle, comment: "")
      }

      /// en translation: Hot Country
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hot_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hot_country", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hot_country"
        }

        return NSLocalizedString("hot_country", bundle: bundle, comment: "")
      }

      /// en translation: How to add shared cameras?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hao_to_invite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hao_to_invite", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hao_to_invite"
        }

        return NSLocalizedString("hao_to_invite", bundle: bundle, comment: "")
      }

      /// en translation: How to find the QR code on the camera body:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func find_qrcode_way(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("find_qrcode_way", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "find_qrcode_way"
        }

        return NSLocalizedString("find_qrcode_way", bundle: bundle, comment: "")
      }

      /// en translation: How to make package detection more accurate?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_guide", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_guide"
        }

        return NSLocalizedString("package_guide", bundle: bundle, comment: "")
      }

      /// en translation: How would you like to name this %@ Camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func like_device_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("like_device_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "like_device_name"
        }

        let format = NSLocalizedString("like_device_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Humanoid Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func human_tracking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("human_tracking", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "human_tracking"
        }

        return NSLocalizedString("human_tracking", bundle: bundle, comment: "")
      }

      /// en translation: I Saw the Blue Light
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func say_green_light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("say_green_light", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "say_green_light"
        }

        return NSLocalizedString("say_green_light", bundle: bundle, comment: "")
      }

      /// en translation: I agree to send feedback issues and the original video (including all personal information) to help %@ perform analysis of the data. Please refer to the Privacy Policy.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_feedback_agree(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("video_feedback_agree", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_feedback_agree"
        }

        let format = NSLocalizedString("video_feedback_agree", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: I did not hear "Scan QR code".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func unheard_scan_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unheard_scan_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unheard_scan_qr_code"
        }

        return NSLocalizedString("unheard_scan_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: I did not hear anything.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_wifi_no_voice_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_wifi_no_voice_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_wifi_no_voice_error"
        }

        return NSLocalizedString("connect_wifi_no_voice_error", bundle: bundle, comment: "")
      }

      /// en translation: I didn't hear "Scan QR code".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_hear_scan_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_hear_scan_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_hear_scan_qr_code"
        }

        return NSLocalizedString("not_hear_scan_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: I didn’t hear "Scan QR code".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_no_qr_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_no_qr_button", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_no_qr_button"
        }

        return NSLocalizedString("scan_no_qr_button", bundle: bundle, comment: "")
      }

      /// en translation: I didn’t saw the blue light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dont_say_green_light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dont_say_green_light", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dont_say_green_light"
        }

        return NSLocalizedString("dont_say_green_light", bundle: bundle, comment: "")
      }

      /// en translation: I filled in Wi-Fi information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_step_wifi_finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_step_wifi_finish", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_step_wifi_finish"
        }

        return NSLocalizedString("bind_step_wifi_finish", bundle: bundle, comment: "")
      }

      /// en translation: I have read and agree with all the above contents.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func i_have_read_above_content(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i_have_read_above_content", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "i_have_read_above_content"
        }

        return NSLocalizedString("i_have_read_above_content", bundle: bundle, comment: "")
      }

      /// en translation: I hear a beeping sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func heard_scaning_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heard_scaning_sound", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heard_scaning_sound"
        }

        return NSLocalizedString("heard_scaning_sound", bundle: bundle, comment: "")
      }

      /// en translation: I hear a sound or see the light on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hear_beep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hear_beep", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hear_beep"
        }

        return NSLocalizedString("hear_beep", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Authentication error"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_other", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_other"
        }

        return NSLocalizedString("connect_error_other", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Cloud service connection fail"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_no_voice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_no_voice", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_no_voice"
        }

        return NSLocalizedString("connect_error_no_voice", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Other error".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_wifi_unkonw_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_wifi_unkonw_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_wifi_unkonw_error"
        }

        return NSLocalizedString("connect_wifi_unkonw_error", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Power Up".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hear_device_power_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hear_device_power_on", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hear_device_power_on"
        }

        return NSLocalizedString("hear_device_power_on", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Retrieving IP timeout"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_ip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_ip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_ip"
        }

        return NSLocalizedString("connect_error_ip", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Scan QR Code"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func heard_scan_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heard_scan_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heard_scan_qr_code"
        }

        return NSLocalizedString("heard_scan_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Scan success"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func heard_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heard_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heard_qr_code"
        }

        return NSLocalizedString("heard_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Scan success"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func heard_scan_finished_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heard_scan_finished_other", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heard_scan_finished_other"
        }

        return NSLocalizedString("heard_scan_finished_other", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Scan success/finished"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func heard_scan_finished(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heard_scan_finished", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heard_scan_finished"
        }

        return NSLocalizedString("heard_scan_finished", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Wi-Fi SSID not found"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_wifi_net(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_wifi_net", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_wifi_net"
        }

        return NSLocalizedString("connect_error_wifi_net", bundle: bundle, comment: "")
      }

      /// en translation: I heard "Wi-Fi password error"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_wifi"
        }

        return NSLocalizedString("connect_error_wifi", bundle: bundle, comment: "")
      }

      /// en translation: I heard a failure message.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_heard_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_heard_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_heard_failed"
        }

        return NSLocalizedString("connect_heard_failed", bundle: bundle, comment: "")
      }

      /// en translation: I heard  the sound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hear_device_voice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hear_device_voice", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hear_device_voice"
        }

        return NSLocalizedString("hear_device_voice", bundle: bundle, comment: "")
      }

      /// en translation: I plugged in the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hear_device_power_on_s0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hear_device_power_on_s0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hear_device_power_on_s0"
        }

        return NSLocalizedString("hear_device_power_on_s0", bundle: bundle, comment: "")
      }

      /// en translation: I pressed the reset button.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func already_long_press(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("already_long_press", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "already_long_press"
        }

        return NSLocalizedString("already_long_press", bundle: bundle, comment: "")
      }

      /// en translation: I understand and agree with
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func understanc_agree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("understanc_agree", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "understanc_agree"
        }

        return NSLocalizedString("understanc_agree", bundle: bundle, comment: "")
      }

      /// en translation: ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("id", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "id"
        }

        return NSLocalizedString("id", bundle: bundle, comment: "")
      }

      /// en translation: If necessary, please contact the admin to wake up the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func admin_wakeup_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("admin_wakeup_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "admin_wakeup_camera"
        }

        return NSLocalizedString("admin_wakeup_camera", bundle: bundle, comment: "")
      }

      /// en translation: If necessary, please renew Awareness Service or download the video.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func renewal_download_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("renewal_download_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "renewal_download_tips"
        }

        return NSLocalizedString("renewal_download_tips", bundle: bundle, comment: "")
      }

      /// en translation: If no classification object is selected, this function will be invalid. Please select at least one item.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_no_item_choose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_no_item_choose", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_no_item_choose"
        }

        return NSLocalizedString("notification_no_item_choose", bundle: bundle, comment: "")
      }

      /// en translation: If not allowed to access, you will not be able to scan the QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission_dialog_message_get_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission_dialog_message_get_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_dialog_message_get_camera"
        }

        return NSLocalizedString("permission_dialog_message_get_camera", bundle: bundle, comment: "")
      }

      /// en translation: If not allowed to access, you will not be able to use VicoHome to make audio calls.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission_dialog_message_get_mircrophone(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("permission_dialog_message_get_mircrophone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_dialog_message_get_mircrophone"
        }

        let format = NSLocalizedString("permission_dialog_message_get_mircrophone", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: If the QR code is not found on the body shell and rubber plug. Please disassemble the movable shell to check whether there is a QR code on the inner body and the movable shell.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func qrcode_way3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrcode_way3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrcode_way3"
        }

        return NSLocalizedString("qrcode_way3", bundle: bundle, comment: "")
      }

      /// en translation: If the QR code is not found on the body shell. Please disassemble the rubber plug of the fuselage and check whether there is a QR code under the rubber plug.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func qrcode_way2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrcode_way2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrcode_way2"
        }

        return NSLocalizedString("qrcode_way2", bundle: bundle, comment: "")
      }

      /// en translation: If the camera is a little far away from the baby (eg 2 or 3 meters), it is recommended to use a medium sensitivity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func crying_detection_mid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crying_detection_mid", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "crying_detection_mid"
        }

        return NSLocalizedString("crying_detection_mid", bundle: bundle, comment: "")
      }

      /// en translation: If the camera is far away from the baby, such as 3 meters or longer, it is recommended to use high sensitivity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func crying_detection_high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crying_detection_high", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "crying_detection_high"
        }

        return NSLocalizedString("crying_detection_high", bundle: bundle, comment: "")
      }

      /// en translation: If the camera is very close to the baby, for example about 1 meter, it is recommended to use a low sensitivity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func crying_detection_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crying_detection_low", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "crying_detection_low"
        }

        return NSLocalizedString("crying_detection_low", bundle: bundle, comment: "")
      }

      /// en translation: If the network condition is unstable, please wait patiently for up to 5 minutes.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason2"
        }

        return NSLocalizedString("cannot_receive_code_reason2", bundle: bundle, comment: "")
      }

      /// en translation: If the verification code email is not found in the trash box, it may be because we cannot send the verification code to your current email address. Please change to <![CDATA[<b>a normal international email address such as Gmail and Yahoo</b>]]> to receive Verification email.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason4", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason4"
        }

        return NSLocalizedString("cannot_receive_code_reason4", bundle: bundle, comment: "")
      }

      /// en translation: If the verification code email is not found in the trash box, it may be because we cannot send the verification code to your current email address. Please change to a normal international email address such as Gmail and Yahoo to receive Verification email.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason6", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason6"
        }

        return NSLocalizedString("cannot_receive_code_reason6", bundle: bundle, comment: "")
      }

      /// en translation: If the video analysis result is wrong, please select the issues you want to report from the following options (multiple choices are available):
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func library_tag_contains(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library_tag_contains", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library_tag_contains"
        }

        return NSLocalizedString("library_tag_contains", bundle: bundle, comment: "")
      }

      /// en translation: If you are the admin of the camera, you will lose the viewing and setting rights of this camera after deletion. If you are the shared person of the camera, you will lose the viewing right of this camera after deletion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_content_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_content_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_content_2"
        }

        return NSLocalizedString("delete_notice_content_2", bundle: bundle, comment: "")
      }

      /// en translation: If you do not continue to purchase after the current %@ Awareness expires, it will automatically change to the next one.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func other_plans_des(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("other_plans_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other_plans_des"
        }

        let format = NSLocalizedString("other_plans_des", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: If you encounter a situation where the live stream cannot be played, please upload the player log to help us find the problem.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func send_log(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send_log", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send_log"
        }

        return NSLocalizedString("send_log", bundle: bundle, comment: "")
      }

      /// en translation: If you need the white light illumination function at night, please go to
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func white_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("white_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "white_tips"
        }

        return NSLocalizedString("white_tips", bundle: bundle, comment: "")
      }

      /// en translation: If you still do not receive the verification code after 5 minutes, <![CDATA[<b>please check it in the trash box of the receiving mailbox.</b>]]>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason3"
        }

        return NSLocalizedString("cannot_receive_code_reason3", bundle: bundle, comment: "")
      }

      /// en translation: If you still do not receive the verification code after 5 minutes, please check it in the trash box of the receiving mailbox.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason5", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason5"
        }

        return NSLocalizedString("cannot_receive_code_reason5", bundle: bundle, comment: "")
      }

      /// en translation: If you want to share the camera, please make sure both the camera admin and shared user are registered in the same country.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func registrationsharing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registrationsharing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registrationsharing"
        }

        return NSLocalizedString("registrationsharing", bundle: bundle, comment: "")
      }

      /// en translation: If not allowed to access, you will not be able to automatically fill in the Wi-Fi connection to your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission_dialog_message_get_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission_dialog_message_get_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_dialog_message_get_location"
        }

        return NSLocalizedString("permission_dialog_message_get_location", bundle: bundle, comment: "")
      }

      /// en translation: Ignore the error.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_3013(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_3013", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_3013"
        }

        return NSLocalizedString("error_3013", bundle: bundle, comment: "")
      }

      /// en translation: Ignored
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func already_ignore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("already_ignore", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "already_ignore"
        }

        return NSLocalizedString("already_ignore", bundle: bundle, comment: "")
      }

      /// en translation: Improper format
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_format_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_format_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_format_error"
        }

        return NSLocalizedString("sd_format_error", bundle: bundle, comment: "")
      }

      /// en translation: In order to cooperate with relevant policies and provide better services to users in China, VicoHome App changed to 全橙看家 App on %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_6_1(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("migration_statement_6_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_6_1"
        }

        let format = NSLocalizedString("migration_statement_6_1", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to 全橙看家 App on %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_2_1(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("migration_statement_2_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_2_1"
        }

        let format = NSLocalizedString("migration_statement_2_1", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: In order to cooperate with relevant policies and provide better services to users in China, VicoHome App will be changed to 全橙看家 App on %@. Please download 全橙看家 and sign up for your account. Thank you very much for your cooperation.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_7(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("migration_statement_7", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_7"
        }

        let format = NSLocalizedString("migration_statement_7", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: In order to ensure that the received pictures, videos and other content can be browsed normally, you need to allow %@ to use the mobile phone storage access.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func if_storage_not_access(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("if_storage_not_access", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "if_storage_not_access"
        }

        let format = NSLocalizedString("if_storage_not_access", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: In order to protect your rights effectively, we have made the following updates in accordance with the latest legal rules and regulatory requirements:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_policy_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_policy_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_policy_desc"
        }

        return NSLocalizedString("get_policy_desc", bundle: bundle, comment: "")
      }

      /// en translation: Indicator light
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func indicator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("indicator", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "indicator"
        }

        return NSLocalizedString("indicator", bundle: bundle, comment: "")
      }

      /// en translation: Infrared illuminates the environment, showing a clearer black and white picture
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func infrared_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("infrared_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "infrared_des"
        }

        return NSLocalizedString("infrared_des", bundle: bundle, comment: "")
      }

      /// en translation: Infrared mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func night_mode_red(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("night_mode_red", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "night_mode_red"
        }

        return NSLocalizedString("night_mode_red", bundle: bundle, comment: "")
      }

      /// en translation: Initialize the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_initialize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_initialize", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_initialize"
        }

        return NSLocalizedString("connect_initialize", bundle: bundle, comment: "")
      }

      /// en translation: Install the bracket
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func install_bracket_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("install_bracket_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "install_bracket_1"
        }

        return NSLocalizedString("install_bracket_1", bundle: bundle, comment: "")
      }

      /// en translation: Install the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func install_the_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("install_the_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "install_the_camera"
        }

        return NSLocalizedString("install_the_camera", bundle: bundle, comment: "")
      }

      /// en translation: Installation Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func installation_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("installation_settings", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "installation_settings"
        }

        return NSLocalizedString("installation_settings", bundle: bundle, comment: "")
      }

      /// en translation: Installation guide
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func installation_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("installation_guide", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "installation_guide"
        }

        return NSLocalizedString("installation_guide", bundle: bundle, comment: "")
      }

      /// en translation: Installation suggestions
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func installation_suggestions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("installation_suggestions", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "installation_suggestions"
        }

        return NSLocalizedString("installation_suggestions", bundle: bundle, comment: "")
      }

      /// en translation: Installing…
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func installing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("installing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "installing"
        }

        return NSLocalizedString("installing", bundle: bundle, comment: "")
      }

      /// en translation: Intelligent Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_payment_ling_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_payment_ling_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_payment_ling_title"
        }

        return NSLocalizedString("dialog_payment_ling_title", bundle: bundle, comment: "")
      }

      /// en translation: Intelligent Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func gif_ad_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gif_ad_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gif_ad_2"
        }

        return NSLocalizedString("gif_ad_2", bundle: bundle, comment: "")
      }

      /// en translation: Intelligent Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_title_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_title_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_title_3"
        }

        return NSLocalizedString("guide_title_3", bundle: bundle, comment: "")
      }

      /// en translation: Intelligent Recognition
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func intelligent_recognition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("intelligent_recognition", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "intelligent_recognition"
        }

        return NSLocalizedString("intelligent_recognition", bundle: bundle, comment: "")
      }

      /// en translation: Invalid QR code, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shared_invalid_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shared_invalid_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shared_invalid_qr_code"
        }

        return NSLocalizedString("shared_invalid_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Invalid QR code, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shared_qr_code_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shared_qr_code_expired", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shared_qr_code_expired"
        }

        return NSLocalizedString("shared_qr_code_expired", bundle: bundle, comment: "")
      }

      /// en translation: Invalid login credentials, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_no_register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_no_register", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_no_register"
        }

        return NSLocalizedString("error_no_register", bundle: bundle, comment: "")
      }

      /// en translation: Invalid request
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_3011(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_3011", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_3011"
        }

        return NSLocalizedString("error_3011", bundle: bundle, comment: "")
      }

      /// en translation: Invalid request
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func invalid_request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_request", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_request"
        }

        return NSLocalizedString("invalid_request", bundle: bundle, comment: "")
      }

      /// en translation: Issue feedback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func question_reply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("question_reply", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "question_reply"
        }

        return NSLocalizedString("question_reply", bundle: bundle, comment: "")
      }

      /// en translation: It Requires Play Store to complete payment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_install_playstore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_install_playstore", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_install_playstore"
        }

        return NSLocalizedString("please_install_playstore", bundle: bundle, comment: "")
      }

      /// en translation: It is recommended to place your camera at a height of about 8 inches and tilt it so that you can clearly see your doorway and the area where the package is located.  At the same time, the distance between the camera and the package should not exceed 10 inches.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_guide_two(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_guide_two", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_guide_two"
        }

        return NSLocalizedString("package_guide_two", bundle: bundle, comment: "")
      }

      /// en translation: It takes effect when the camera is online.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_scuess_offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_scuess_offline", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_scuess_offline"
        }

        return NSLocalizedString("notification_scuess_offline", bundle: bundle, comment: "")
      }

      /// en translation: Italiano(Italian)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_it(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_it", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_it"
        }

        return NSLocalizedString("device_language_it", bundle: bundle, comment: "")
      }

      /// en translation: Jan.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_1"
        }

        return NSLocalizedString("month_1", bundle: bundle, comment: "")
      }

      /// en translation: Jul.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_7", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_7"
        }

        return NSLocalizedString("month_7", bundle: bundle, comment: "")
      }

      /// en translation: Jun.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_6", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_6"
        }

        return NSLocalizedString("month_6", bundle: bundle, comment: "")
      }

      /// en translation: Keep the camera as close as possible to the router.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func issue_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("issue_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "issue_2"
        }

        return NSLocalizedString("issue_2", bundle: bundle, comment: "")
      }

      /// en translation: Keep your router and camera close
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func keep_router(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keep_router", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keep_router"
        }

        return NSLocalizedString("keep_router", bundle: bundle, comment: "")
      }

      /// en translation: Last update %@at %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update_time_string(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("update_time_string", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_time_string"
        }

        let format = NSLocalizedString("update_time_string", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Learn how to use
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func learn_how_use(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("learn_how_use", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "learn_how_use"
        }

        return NSLocalizedString("learn_how_use", bundle: bundle, comment: "")
      }

      /// en translation: Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func learn_more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("learn_more", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "learn_more"
        }

        return NSLocalizedString("learn_more", bundle: bundle, comment: "")
      }

      /// en translation: Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func learn_more_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("learn_more_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "learn_more_2"
        }

        return NSLocalizedString("learn_more_2", bundle: bundle, comment: "")
      }

      /// en translation: Leave a message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func iosZDKRequestsCreateRequestLeaveAMessageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.ZDKRequests.createRequest.leaveAMessage.title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.ZDKRequests.createRequest.leaveAMessage.title"
        }

        return NSLocalizedString("ios.ZDKRequests.createRequest.leaveAMessage.title", bundle: bundle, comment: "")
      }

      /// en translation: Library
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gallery", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gallery"
        }

        return NSLocalizedString("gallery", bundle: bundle, comment: "")
      }

      /// en translation: Library
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func library(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library"
        }

        return NSLocalizedString("library", bundle: bundle, comment: "")
      }

      /// en translation: Light Sensitivity Level
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sensitivity_level(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sensitivity_level", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sensitivity_level"
        }

        return NSLocalizedString("sensitivity_level", bundle: bundle, comment: "")
      }

      /// en translation: Lighting Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func light_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("light_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "light_setting"
        }

        return NSLocalizedString("light_setting", bundle: bundle, comment: "")
      }

      /// en translation: Live
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live"
        }

        return NSLocalizedString("live", bundle: bundle, comment: "")
      }

      /// en translation: Live Stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_title_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_title_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_title_2"
        }

        return NSLocalizedString("guide_title_2", bundle: bundle, comment: "")
      }

      /// en translation: Live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_feed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_feed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_feed"
        }

        return NSLocalizedString("live_feed", bundle: bundle, comment: "")
      }

      /// en translation: Live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_play(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_play", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_play"
        }

        return NSLocalizedString("live_play", bundle: bundle, comment: "")
      }

      /// en translation: Live stream
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func playback_is_living_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("playback_is_living_now", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "playback_is_living_now"
        }

        return NSLocalizedString("playback_is_living_now", bundle: bundle, comment: "")
      }

      /// en translation: Live stream and voice interaction at any time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_content_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_content_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_content_2"
        }

        return NSLocalizedString("guide_content_2", bundle: bundle, comment: "")
      }

      /// en translation: Live stream error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_stream_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_stream_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_stream_error"
        }

        return NSLocalizedString("live_stream_error", bundle: bundle, comment: "")
      }

      /// en translation: Live stream hasn't started yet.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_not_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_not_start", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_not_start"
        }

        return NSLocalizedString("live_not_start", bundle: bundle, comment: "")
      }

      /// en translation: Live stream timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_stream_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_stream_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_stream_timeout"
        }

        return NSLocalizedString("live_stream_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Live stream viewers have reached the limit, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_viewers_limit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_viewers_limit", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_viewers_limit"
        }

        return NSLocalizedString("live_viewers_limit", bundle: bundle, comment: "")
      }

      /// en translation: Live view error/offline issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_issue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_issue", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_issue"
        }

        return NSLocalizedString("live_issue", bundle: bundle, comment: "")
      }

      /// en translation: Living room
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func livingroom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("livingroom", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "livingroom"
        }

        return NSLocalizedString("livingroom", bundle: bundle, comment: "")
      }

      /// en translation: Load more data
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func more_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("more_data", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "more_data"
        }

        return NSLocalizedString("more_data", bundle: bundle, comment: "")
      }

      /// en translation: Loading …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loading"
        }

        return NSLocalizedString("loading", bundle: bundle, comment: "")
      }

      /// en translation: Locating …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func locating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("locating", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "locating"
        }

        return NSLocalizedString("locating", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location"
        }

        return NSLocalizedString("location", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_2"
        }

        return NSLocalizedString("location_2", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_setting"
        }

        return NSLocalizedString("location_setting", bundle: bundle, comment: "")
      }

      /// en translation: Location Management
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_management(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_management", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_management"
        }

        return NSLocalizedString("location_management", bundle: bundle, comment: "")
      }

      /// en translation: Location Name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_name"
        }

        return NSLocalizedString("location_name", bundle: bundle, comment: "")
      }

      /// en translation: Location Selection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_selection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_selection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_selection"
        }

        return NSLocalizedString("location_selection", bundle: bundle, comment: "")
      }

      /// en translation: Location Services
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_service", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_service"
        }

        return NSLocalizedString("location_service", bundle: bundle, comment: "")
      }

      /// en translation: Location info error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_error"
        }

        return NSLocalizedString("location_error", bundle: bundle, comment: "")
      }

      /// en translation: Location name cannot be empty.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_not_(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_not_", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_not_"
        }

        return NSLocalizedString("location_not_", bundle: bundle, comment: "")
      }

      /// en translation: Location name required
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_name_required(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_name_required", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_name_required"
        }

        return NSLocalizedString("location_name_required", bundle: bundle, comment: "")
      }

      /// en translation: Long press the button to turn on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_device_long_press(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_device_long_press", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_device_long_press"
        }

        return NSLocalizedString("add_device_long_press", bundle: bundle, comment: "")
      }

      /// en translation: Long press the power button for 3s until you hear the power-up sound or see the light on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turn_on_camera_directions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_camera_directions", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_camera_directions"
        }

        return NSLocalizedString("turn_on_camera_directions", bundle: bundle, comment: "")
      }

      /// en translation: Long press the reboot button for 3 seconds and restart the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func long_press_reboot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("long_press_reboot", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "long_press_reboot"
        }

        return NSLocalizedString("long_press_reboot", bundle: bundle, comment: "")
      }

      /// en translation: Long press the reset button to scan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_power_key_reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("double_click_power_key_reset", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_power_key_reset"
        }

        return NSLocalizedString("double_click_power_key_reset", bundle: bundle, comment: "")
      }

      /// en translation: Loss of all AI functions (Activity Zone, Intelligent Notification)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func loss_aifunction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loss_aifunction", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loss_aifunction"
        }

        return NSLocalizedString("loss_aifunction", bundle: bundle, comment: "")
      }

      /// en translation: Low
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("low", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "low"
        }

        return NSLocalizedString("low", bundle: bundle, comment: "")
      }

      /// en translation: Low battery, unable to upgrade. Please charge the battery to at least 20% and retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func batter_low_upgrade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("batter_low_upgrade", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "batter_low_upgrade"
        }

        return NSLocalizedString("batter_low_upgrade", bundle: bundle, comment: "")
      }

      /// en translation: Low battery, unable to upgrade. Please charge the battery to at least 20% and retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ota_failed_low_power(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ota_failed_low_power", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ota_failed_low_power"
        }

        return NSLocalizedString("ota_failed_low_power", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("monday", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "monday"
        }

        return NSLocalizedString("monday", bundle: bundle, comment: "")
      }

      /// en translation: M-PESA Pay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mtn_mpesa_payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mtn_mpesa_payment", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mtn_mpesa_payment"
        }

        return NSLocalizedString("mtn_mpesa_payment", bundle: bundle, comment: "")
      }

      /// en translation: MCU Version
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mcu_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mcu_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mcu_version"
        }

        return NSLocalizedString("mcu_version", bundle: bundle, comment: "")
      }

      /// en translation: Mac Address
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mac_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mac_address", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mac_address"
        }

        return NSLocalizedString("mac_address", bundle: bundle, comment: "")
      }

      /// en translation: Manage multiple cameras more easily
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func user_guide_desc_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_guide_desc_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_guide_desc_1"
        }

        return NSLocalizedString("user_guide_desc_1", bundle: bundle, comment: "")
      }

      /// en translation: Manual
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func manual_f(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("manual_f", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "manual_f"
        }

        return NSLocalizedString("manual_f", bundle: bundle, comment: "")
      }

      /// en translation: Manual input
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func manual_input(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("manual_input", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "manual_input"
        }

        return NSLocalizedString("manual_input", bundle: bundle, comment: "")
      }

      /// en translation: Mar.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_3"
        }

        return NSLocalizedString("month_3", bundle: bundle, comment: "")
      }

      /// en translation: Mark
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mark", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mark"
        }

        return NSLocalizedString("mark", bundle: bundle, comment: "")
      }

      /// en translation: Mark
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func marked_f(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("marked_f", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "marked_f"
        }

        return NSLocalizedString("marked_f", bundle: bundle, comment: "")
      }

      /// en translation: Marked successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func marked_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("marked_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "marked_success"
        }

        return NSLocalizedString("marked_success", bundle: bundle, comment: "")
      }

      /// en translation: May
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_5", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_5"
        }

        return NSLocalizedString("month_5", bundle: bundle, comment: "")
      }

      /// en translation: Medium
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func good(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("good", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "good"
        }

        return NSLocalizedString("good", bundle: bundle, comment: "")
      }

      /// en translation: Medium
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("medium", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "medium"
        }

        return NSLocalizedString("medium", bundle: bundle, comment: "")
      }

      /// en translation: Microphone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func microphone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("microphone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "microphone"
        }

        return NSLocalizedString("microphone", bundle: bundle, comment: "")
      }

      /// en translation: Microphone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission_name_microphone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission_name_microphone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_name_microphone"
        }

        return NSLocalizedString("permission_name_microphone", bundle: bundle, comment: "")
      }

      /// en translation: MoMo Pay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func momo_payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("momo_payment", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "momo_payment"
        }

        return NSLocalizedString("momo_payment", bundle: bundle, comment: "")
      }

      /// en translation: Model Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func model_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("model_number", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "model_number"
        }

        return NSLocalizedString("model_number", bundle: bundle, comment: "")
      }

      /// en translation: More
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("more", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "more"
        }

        return NSLocalizedString("more", bundle: bundle, comment: "")
      }

      /// en translation: More info
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func more_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("more_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "more_info"
        }

        return NSLocalizedString("more_info", bundle: bundle, comment: "")
      }

      /// en translation: More options
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func more_selection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("more_selection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "more_selection"
        }

        return NSLocalizedString("more_selection", bundle: bundle, comment: "")
      }

      /// en translation: Motion Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func motion_detection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("motion_detection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "motion_detection"
        }

        return NSLocalizedString("motion_detection", bundle: bundle, comment: "")
      }

      /// en translation: Motion Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func motion_tracking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("motion_tracking", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "motion_tracking"
        }

        return NSLocalizedString("motion_tracking", bundle: bundle, comment: "")
      }

      /// en translation: Motion Tracking
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sport_auto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sport_auto", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sport_auto"
        }

        return NSLocalizedString("sport_auto", bundle: bundle, comment: "")
      }

      /// en translation: Motion detection issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func motion_issue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("motion_issue", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "motion_issue"
        }

        return NSLocalizedString("motion_issue", bundle: bundle, comment: "")
      }

      /// en translation: Move to the following locations
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func can_move_this_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can_move_this_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can_move_this_location"
        }

        return NSLocalizedString("can_move_this_location", bundle: bundle, comment: "")
      }

      /// en translation: My Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func my_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my_device"
        }

        return NSLocalizedString("my_device", bundle: bundle, comment: "")
      }

      /// en translation: My House
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func my_house(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_house", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my_house"
        }

        return NSLocalizedString("my_house", bundle: bundle, comment: "")
      }

      /// en translation: Network Connection Timed Out.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func network_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("network_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "network_timeout"
        }

        return NSLocalizedString("network_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Network Error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func network_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("network_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "network_error"
        }

        return NSLocalizedString("network_error", bundle: bundle, comment: "")
      }

      /// en translation: Network connection is unstable, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func network_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("network_low", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "network_low"
        }

        return NSLocalizedString("network_low", bundle: bundle, comment: "")
      }

      /// en translation: Network searching
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_scanning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_scanning", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_scanning"
        }

        return NSLocalizedString("wifi_scanning", bundle: bundle, comment: "")
      }

      /// en translation: New Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_email_new(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_email_new", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_email_new"
        }

        return NSLocalizedString("input_email_new", bundle: bundle, comment: "")
      }

      /// en translation: New Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_email"
        }

        return NSLocalizedString("new_email", bundle: bundle, comment: "")
      }

      /// en translation: New Feature：
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_feature(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_feature", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_feature"
        }

        return NSLocalizedString("new_feature", bundle: bundle, comment: "")
      }

      /// en translation: New Location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_location"
        }

        return NSLocalizedString("new_location", bundle: bundle, comment: "")
      }

      /// en translation: New Message
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func num_new_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("num_new_message", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "num_new_message"
        }

        return NSLocalizedString("num_new_message", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_password"
        }

        return NSLocalizedString("new_password", bundle: bundle, comment: "")
      }

      /// en translation: New Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_phone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_phone"
        }

        return NSLocalizedString("new_phone", bundle: bundle, comment: "")
      }

      /// en translation: New Version：
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_version"
        }

        return NSLocalizedString("new_version", bundle: bundle, comment: "")
      }

      /// en translation: New camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_device"
        }

        return NSLocalizedString("new_device", bundle: bundle, comment: "")
      }

      /// en translation: New position
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func pre_position_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pre_position_add", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pre_position_add"
        }

        return NSLocalizedString("pre_position_add", bundle: bundle, comment: "")
      }

      /// en translation: Next Step
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: Next day
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nest_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nest_day", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nest_day"
        }

        return NSLocalizedString("nest_day", bundle: bundle, comment: "")
      }

      /// en translation: Night Vision
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func night_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("night_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "night_version"
        }

        return NSLocalizedString("night_version", bundle: bundle, comment: "")
      }

      /// en translation: Night Vision Mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func config_night_mode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("config_night_mode", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "config_night_mode"
        }

        return NSLocalizedString("config_night_mode", bundle: bundle, comment: "")
      }

      /// en translation: Night Vision Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func night_version_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("night_version_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "night_version_setting"
        }

        return NSLocalizedString("night_version_setting", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", bundle: bundle, comment: "")
      }

      /// en translation: No Network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_network(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_network", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_network"
        }

        return NSLocalizedString("no_network", bundle: bundle, comment: "")
      }

      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func common_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_service", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_service"
        }

        return NSLocalizedString("common_service", bundle: bundle, comment: "")
      }

      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_plan", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_plan"
        }

        return NSLocalizedString("no_plan", bundle: bundle, comment: "")
      }

      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func plan_common(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plan_common", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plan_common"
        }

        return NSLocalizedString("plan_common", bundle: bundle, comment: "")
      }

      /// en translation: No Plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func plan_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plan_no", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plan_no"
        }

        return NSLocalizedString("plan_no", bundle: bundle, comment: "")
      }

      /// en translation: No Plan VS %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func smart_common_contrast(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_common_contrast", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_common_contrast"
        }

        let format = NSLocalizedString("smart_common_contrast", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: No Signal
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_wifi_signal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_wifi_signal", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_wifi_signal"
        }

        return NSLocalizedString("no_wifi_signal", bundle: bundle, comment: "")
      }

      /// en translation: No Wi-Fi network available nearby.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_wifi_nearby(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_wifi_nearby", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_wifi_nearby"
        }

        return NSLocalizedString("no_wifi_nearby", bundle: bundle, comment: "")
      }

      /// en translation: No access to this camera, please add it again or apply for permission to use.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_access(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_access", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_access"
        }

        return NSLocalizedString("no_access", bundle: bundle, comment: "")
      }

      /// en translation: No available network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_no_net(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_no_net", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_no_net"
        }

        return NSLocalizedString("error_no_net", bundle: bundle, comment: "")
      }

      /// en translation: No available network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nodata_no_wifi_tip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nodata_no_wifi_tip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nodata_no_wifi_tip"
        }

        return NSLocalizedString("nodata_no_wifi_tip", bundle: bundle, comment: "")
      }

      /// en translation: No available network connection. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func network_unavailable_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("network_unavailable_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "network_unavailable_and_try"
        }

        return NSLocalizedString("network_unavailable_and_try", bundle: bundle, comment: "")
      }

      /// en translation: No camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_camera"
        }

        return NSLocalizedString("no_camera", bundle: bundle, comment: "")
      }

      /// en translation: No camera permission, please retry after setting >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_camera_auth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_camera_auth", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_camera_auth"
        }

        return NSLocalizedString("no_camera_auth", bundle: bundle, comment: "")
      }

      /// en translation: No data
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nodata_tip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nodata_tip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nodata_tip"
        }

        return NSLocalizedString("nodata_tip", bundle: bundle, comment: "")
      }

      /// en translation: No data recorded for this day.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func nodata_libary_tip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nodata_libary_tip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nodata_libary_tip"
        }

        return NSLocalizedString("nodata_libary_tip", bundle: bundle, comment: "")
      }

      /// en translation: No item selected
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_item_selected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_item_selected", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_item_selected"
        }

        return NSLocalizedString("no_item_selected", bundle: bundle, comment: "")
      }

      /// en translation: No location information
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_locations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_locations", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_locations"
        }

        return NSLocalizedString("no_locations", bundle: bundle, comment: "")
      }

      /// en translation: No more video in SD card.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sdcard_no_more_video(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sdcard_no_more_video", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sdcard_no_more_video"
        }

        return NSLocalizedString("sdcard_no_more_video", bundle: bundle, comment: "")
      }

      /// en translation: No network available. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func toast_network_unavailable_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_network_unavailable_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toast_network_unavailable_and_try"
        }

        return NSLocalizedString("toast_network_unavailable_and_try", bundle: bundle, comment: "")
      }

      /// en translation: No permission to operate this camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_auth_limitation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_auth_limitation", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_auth_limitation"
        }

        return NSLocalizedString("device_auth_limitation", bundle: bundle, comment: "")
      }

      /// en translation: No resumable orders
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_resumable_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_resumable_order", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_resumable_order"
        }

        return NSLocalizedString("no_resumable_order", bundle: bundle, comment: "")
      }

      /// en translation: No time zone selected.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_select_timezone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_select_timezone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_select_timezone"
        }

        return NSLocalizedString("no_select_timezone", bundle: bundle, comment: "")
      }

      /// en translation: No video at this time.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_no_data_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_no_data_date", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_no_data_date"
        }

        return NSLocalizedString("sd_no_data_date", bundle: bundle, comment: "")
      }

      /// en translation: No video in SD card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sdcard_has_no_video(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sdcard_has_no_video", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sdcard_has_no_video"
        }

        return NSLocalizedString("sdcard_has_no_video", bundle: bundle, comment: "")
      }

      /// en translation: Not allowed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_allow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_allow", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_allow"
        }

        return NSLocalizedString("not_allow", bundle: bundle, comment: "")
      }

      /// en translation: Not playing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func toast_zone_not_playing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_zone_not_playing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toast_zone_not_playing"
        }

        return NSLocalizedString("toast_zone_not_playing", bundle: bundle, comment: "")
      }

      /// en translation: Not sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_logged_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_logged_in", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_logged_in"
        }

        return NSLocalizedString("not_logged_in", bundle: bundle, comment: "")
      }

      /// en translation: Not sure which camera to choose？
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_other_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_other_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_other_device"
        }

        return NSLocalizedString("device_other_device", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifications"
        }

        return NSLocalizedString("notifications", bundle: bundle, comment: "")
      }

      /// en translation: Notification Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_setting"
        }

        return NSLocalizedString("notification_setting", bundle: bundle, comment: "")
      }

      /// en translation: Nov
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_11", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_11"
        }

        return NSLocalizedString("month_11", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_know_it(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_know_it", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_know_it"
        }

        return NSLocalizedString("payment_know_it", bundle: bundle, comment: "")
      }

      /// en translation: OK. I will find someone who can help with your query.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func iosConversationUiChatWelcome_messageHandover(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.conversation.ui.chat.welcome_message.handover", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.conversation.ui.chat.welcome_message.handover"
        }

        return NSLocalizedString("ios.conversation.ui.chat.welcome_message.handover", bundle: bundle, comment: "")
      }

      /// en translation: Obtain the current Wi-Fi name of the phone automatically through location services (recommended) or manually enter the Wi-Fi name (case sensitive).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_location_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_location_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_location_wifi"
        }

        return NSLocalizedString("open_location_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Oct.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_10", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_10"
        }

        return NSLocalizedString("month_10", bundle: bundle, comment: "")
      }

      /// en translation: Off
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func close_led(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close_led", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close_led"
        }

        return NSLocalizedString("close_led", bundle: bundle, comment: "")
      }

      /// en translation: Off
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_open"
        }

        return NSLocalizedString("not_open", bundle: bundle, comment: "")
      }

      /// en translation: Office
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func office(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("office", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "office"
        }

        return NSLocalizedString("office", bundle: bundle, comment: "")
      }

      /// en translation: Offline
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("offline", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "offline"
        }

        return NSLocalizedString("offline", bundle: bundle, comment: "")
      }

      /// en translation: Old Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func old_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("old_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "old_password"
        }

        return NSLocalizedString("old_password", bundle: bundle, comment: "")
      }

      /// en translation: On
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_led(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_led", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_led"
        }

        return NSLocalizedString("open_led", bundle: bundle, comment: "")
      }

      /// en translation: On
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func opened(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("opened", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "opened"
        }

        return NSLocalizedString("opened", bundle: bundle, comment: "")
      }

      /// en translation: Online
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func online(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("online", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "online"
        }

        return NSLocalizedString("online", bundle: bundle, comment: "")
      }

      /// en translation: Only %d positions can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func more_pre_location(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("more_pre_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "more_pre_location"
        }

        let format = NSLocalizedString("more_pre_location", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Only five positions can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func pre_location_max_5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pre_location_max_5", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pre_location_max_5"
        }

        return NSLocalizedString("pre_location_max_5", bundle: bundle, comment: "")
      }

      /// en translation: Only three activity zones can be added.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func toast_add_zone_total_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_add_zone_total_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toast_add_zone_total_3"
        }

        return NSLocalizedString("toast_add_zone_total_3", bundle: bundle, comment: "")
      }

      /// en translation: Open Location Services
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_location_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_location_service", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_location_service"
        }

        return NSLocalizedString("open_location_service", bundle: bundle, comment: "")
      }

      /// en translation: Open Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_wifi"
        }

        return NSLocalizedString("open_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Open now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_open"
        }

        return NSLocalizedString("go_open", bundle: bundle, comment: "")
      }

      /// en translation: Open the admin's APP Camera Setting / Share / Camera Sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_info_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_info_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_info_des"
        }

        return NSLocalizedString("scan_info_des", bundle: bundle, comment: "")
      }

      /// en translation: Optional, we will contact you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hint_feedback_contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hint_feedback_contact", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hint_feedback_contact"
        }

        return NSLocalizedString("hint_feedback_contact", bundle: bundle, comment: "")
      }

      /// en translation: Options detail
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func service_detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("service_detail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "service_detail"
        }

        return NSLocalizedString("service_detail", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other"
        }

        return NSLocalizedString("other", bundle: bundle, comment: "")
      }

      /// en translation: Other %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func other_plans(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("other_plans", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other_plans"
        }

        let format = NSLocalizedString("other_plans", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Other problems / No sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_other_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_other_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_other_error"
        }

        return NSLocalizedString("add_other_error", bundle: bundle, comment: "")
      }

      /// en translation: Other, click to fill in the error description.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_feedback_cell_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_feedback_cell_other", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_feedback_cell_other"
        }

        return NSLocalizedString("video_feedback_cell_other", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func others(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("others", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "others"
        }

        return NSLocalizedString("others", bundle: bundle, comment: "")
      }

      /// en translation: Package (Beta)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_tag", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_tag"
        }

        return NSLocalizedString("package_tag", bundle: bundle, comment: "")
      }

      /// en translation: Package Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func detection_parcel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detection_parcel", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detection_parcel"
        }

        return NSLocalizedString("detection_parcel", bundle: bundle, comment: "")
      }

      /// en translation: Package delivered
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_down(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_down", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_down"
        }

        return NSLocalizedString("package_down", bundle: bundle, comment: "")
      }

      /// en translation: Package picked up
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_up", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_up"
        }

        return NSLocalizedString("package_up", bundle: bundle, comment: "")
      }

      /// en translation: Package stranded
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_detained(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_detained", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_detained"
        }

        return NSLocalizedString("package_detained", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func enter_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_password"
        }

        return NSLocalizedString("enter_password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// en translation: Password is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_requirements(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_requirements", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_requirements"
        }

        return NSLocalizedString("check_requirements", bundle: bundle, comment: "")
      }

      /// en translation: Password is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_password_input_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_password_input_format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_password_input_format"
        }

        return NSLocalizedString("error_password_input_format", bundle: bundle, comment: "")
      }

      /// en translation: Password is wrong.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func pwd_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pwd_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pwd_error"
        }

        return NSLocalizedString("pwd_error", bundle: bundle, comment: "")
      }

      /// en translation: Password not filled
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_password"
        }

        return NSLocalizedString("no_password", bundle: bundle, comment: "")
      }

      /// en translation: Password or verification code is wrong.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func password_code_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_code_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_code_error"
        }

        return NSLocalizedString("password_code_error", bundle: bundle, comment: "")
      }

      /// en translation: Password:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_password"
        }

        return NSLocalizedString("wifi_password", bundle: bundle, comment: "")
      }

      /// en translation: Pay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_generate_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_generate_order", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_generate_order"
        }

        return NSLocalizedString("payment_generate_order", bundle: bundle, comment: "")
      }

      /// en translation: Pay Order
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_pay", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_pay"
        }

        return NSLocalizedString("payment_pay", bundle: bundle, comment: "")
      }

      /// en translation: Pay now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_to_buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_to_buy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_to_buy"
        }

        return NSLocalizedString("payment_to_buy", bundle: bundle, comment: "")
      }

      /// en translation: Payment canceled
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func apple_cancle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apple_cancle", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apple_cancle"
        }

        return NSLocalizedString("apple_cancle", bundle: bundle, comment: "")
      }

      /// en translation: Payment failed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_pay_failed_totally(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_pay_failed_totally", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_pay_failed_totally"
        }

        return NSLocalizedString("payment_pay_failed_totally", bundle: bundle, comment: "")
      }

      /// en translation: Payment failed, please go to Play Store to check your login status.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_play_store_fail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_play_store_fail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_play_store_fail"
        }

        return NSLocalizedString("payment_play_store_fail", bundle: bundle, comment: "")
      }

      /// en translation: Payment failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_pay_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_pay_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_pay_failed"
        }

        return NSLocalizedString("payment_pay_failed", bundle: bundle, comment: "")
      }

      /// en translation: Payment successful
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_pay_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_pay_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_pay_success"
        }

        return NSLocalizedString("payment_pay_success", bundle: bundle, comment: "")
      }

      /// en translation: Permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission"
        }

        return NSLocalizedString("permission", bundle: bundle, comment: "")
      }

      /// en translation: Person
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_detection_people(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_detection_people", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_detection_people"
        }

        return NSLocalizedString("notification_detection_people", bundle: bundle, comment: "")
      }

      /// en translation: Person
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func person(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("person", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "person"
        }

        return NSLocalizedString("person", bundle: bundle, comment: "")
      }

      /// en translation: Person
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func person_alerts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("person_alerts", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "person_alerts"
        }

        return NSLocalizedString("person_alerts", bundle: bundle, comment: "")
      }

      /// en translation: Person Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func detection_pedestrian(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detection_pedestrian", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detection_pedestrian"
        }

        return NSLocalizedString("detection_pedestrian", bundle: bundle, comment: "")
      }

      /// en translation: Person Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func detection_person(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detection_person", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detection_person"
        }

        return NSLocalizedString("detection_person", bundle: bundle, comment: "")
      }

      /// en translation: Pet
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ai_pet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ai_pet", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ai_pet"
        }

        return NSLocalizedString("ai_pet", bundle: bundle, comment: "")
      }

      /// en translation: Pet
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func pet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pet", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pet"
        }

        return NSLocalizedString("pet", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_number", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_number"
        }

        return NSLocalizedString("phone_number", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number/Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_or_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_or_phone_number", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_or_phone_number"
        }

        return NSLocalizedString("email_or_phone_number", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number/Email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_phone_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_phone_address", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_phone_address"
        }

        return NSLocalizedString("email_phone_address", bundle: bundle, comment: "")
      }

      /// en translation: Phone number/Email ID is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_phone_email_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_phone_email_format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_phone_email_format"
        }

        return NSLocalizedString("error_phone_email_format", bundle: bundle, comment: "")
      }

      /// en translation: Photos
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func photos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photos", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photos"
        }

        return NSLocalizedString("photos", bundle: bundle, comment: "")
      }

      /// en translation: Pictures (optional, upload a screenshot of this problem)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func image_and_screen_shot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("image_and_screen_shot", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "image_and_screen_shot"
        }

        return NSLocalizedString("image_and_screen_shot", bundle: bundle, comment: "")
      }

      /// en translation: Pictures (optional, upload a screenshot of this problem)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func questions_pictures(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("questions_pictures", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "questions_pictures"
        }

        return NSLocalizedString("questions_pictures", bundle: bundle, comment: "")
      }

      /// en translation: Place the QR code on your phone about 6-12 inches in front of the camera to scan, and complete the scan after hearing the sound of successful scanning.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_scan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_scan", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_scan"
        }

        return NSLocalizedString("bind_device_scan", bundle: bundle, comment: "")
      }

      /// en translation: Place the QR code on your phone about 6-12inches in front of the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_des"
        }

        return NSLocalizedString("scan_qr_code_des", bundle: bundle, comment: "")
      }

      /// en translation: Place the camera 6-12inches in front of the QR code. If it has not been scanned for a long time, please move it back and forth. You can refer to the figure on the previous page.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_notice2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_notice2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_notice2"
        }

        return NSLocalizedString("scan_qr_code_notice2", bundle: bundle, comment: "")
      }

      /// en translation: Play SD card video error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sdvideo_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sdvideo_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sdvideo_error"
        }

        return NSLocalizedString("sdvideo_error", bundle: bundle, comment: "")
      }

      /// en translation: Play SD card video timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sdvideo_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sdvideo_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sdvideo_timeout"
        }

        return NSLocalizedString("sdvideo_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Playback video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func playback_video(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("playback_video", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "playback_video"
        }

        return NSLocalizedString("playback_video", bundle: bundle, comment: "")
      }

      /// en translation: Please Select
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_select", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_select"
        }

        return NSLocalizedString("please_select", bundle: bundle, comment: "")
      }

      /// en translation: Please allow location access to help you automatically fill in Wi-Fi info.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_permission_word(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_permission_word", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_permission_word"
        }

        return NSLocalizedString("location_permission_word", bundle: bundle, comment: "")
      }

      /// en translation: Please allow photos access in phone settings.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func allow_libary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow_libary", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow_libary"
        }

        return NSLocalizedString("allow_libary", bundle: bundle, comment: "")
      }

      /// en translation: Please change another email ID.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func same_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("same_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "same_email"
        }

        return NSLocalizedString("same_email", bundle: bundle, comment: "")
      }

      /// en translation: Please change another phone number.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func same_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("same_phone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "same_phone"
        }

        return NSLocalizedString("same_phone", bundle: bundle, comment: "")
      }

      /// en translation: Please check if your router is connected to an available network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_failed_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_failed_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_failed_1"
        }

        return NSLocalizedString("connect_error_failed_1", bundle: bundle, comment: "")
      }

      /// en translation: Please check whether you have selected or entered the correct Wi-Fi name (SSID).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_ap_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_ap_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_ap_1"
        }

        return NSLocalizedString("connect_error_ap_1", bundle: bundle, comment: "")
      }

      /// en translation: Please check your network and try again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_net_config(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_net_config", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_net_config"
        }

        return NSLocalizedString("check_net_config", bundle: bundle, comment: "")
      }

      /// en translation: Please check your network and try again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func join_device_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("join_device_timeout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "join_device_timeout"
        }

        return NSLocalizedString("join_device_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Please choose from the following question types
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func choose_question_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_question_type", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_question_type"
        }

        return NSLocalizedString("choose_question_type", bundle: bundle, comment: "")
      }

      /// en translation: Please choose the item first
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_choose_vip_item_first(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_choose_vip_item_first", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_choose_vip_item_first"
        }

        return NSLocalizedString("payment_choose_vip_item_first", bundle: bundle, comment: "")
      }

      /// en translation: Please describe your issue and tell us your camera model first. (You can find your camera model on the label affixed to the camera. Or you can take off the shell of the camera or open the rubber cover of the camera to find your camera model. The camera model is G0, CGXX(for example CG1), CBXX(for example CB1), JXJ-FA01, etc. )
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func iosAnswer_botTextLabelAsk_a_question(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.answer_bot.text.label.ask_a_question", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.answer_bot.text.label.ask_a_question"
        }

        return NSLocalizedString("ios.answer_bot.text.label.ask_a_question", bundle: bundle, comment: "")
      }

      /// en translation: Please don’t forget to select the package in Notification Settings / Classification.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_guide_five(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_guide_five", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_guide_five"
        }

        return NSLocalizedString("package_guide_five", bundle: bundle, comment: "")
      }

      /// en translation: Please double click the power button to make the camera enter the scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_power_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("double_click_power_button", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_power_button"
        }

        return NSLocalizedString("double_click_power_button", bundle: bundle, comment: "")
      }

      /// en translation: Please double-check the format requirements.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func password_or_code_invalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_or_code_invalid", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_or_code_invalid"
        }

        return NSLocalizedString("password_or_code_invalid", bundle: bundle, comment: "")
      }

      /// en translation: Please download 全橙看家 in time. You can sign in to 全橙看家 directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_2_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("migration_statement_2_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_2_2"
        }

        return NSLocalizedString("migration_statement_2_2", bundle: bundle, comment: "")
      }

      /// en translation: Please enable the microphone in phone settings.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reject_audio(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reject_audio", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reject_audio"
        }

        return NSLocalizedString("reject_audio", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a phone number you want to bind.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func forgot_password_not_login_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgot_password_not_login_account", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgot_password_not_login_account"
        }

        return NSLocalizedString("forgot_password_not_login_account", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a phone number/email ID in the correct format.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_phone_number_invalid_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_phone_number_invalid_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_phone_number_invalid_tips"
        }

        return NSLocalizedString("email_phone_number_invalid_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid Wi-Fi name (SSID).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func tips_ssid_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tips_ssid_empty", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tips_ssid_empty"
        }

        return NSLocalizedString("tips_ssid_empty", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid camera name.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_name_invalid_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_name_invalid_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_name_invalid_tips"
        }

        return NSLocalizedString("device_name_invalid_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid email ID.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_invalid_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_invalid_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_invalid_tips"
        }

        return NSLocalizedString("email_invalid_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid password.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func tips_wifi_password_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tips_wifi_password_empty", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tips_wifi_password_empty"
        }

        return NSLocalizedString("tips_wifi_password_empty", bundle: bundle, comment: "")
      }

      /// en translation: Please enter an email ID you want to bind, We will send the verification code to you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_email_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_email_send", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_email_send"
        }

        return NSLocalizedString("input_email_send", bundle: bundle, comment: "")
      }

      /// en translation: Please enter an email ID you want to bind, We will send the verification code to you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_email_you_bind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_email_you_bind", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_email_you_bind"
        }

        return NSLocalizedString("input_email_you_bind", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the account you want to reset password, and we’ll send a verification code to you.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func forgot_password_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgot_password_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgot_password_tips"
        }

        return NSLocalizedString("forgot_password_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the camera name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func enter_device_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_device_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_device_name"
        }

        return NSLocalizedString("enter_device_name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the network name (SSID) and password to be connected to the camera. Currently 5GHz Wi-Fi and enterprise Wi-Fi are not supported. Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_wifi_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_wifi_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_wifi_tips"
        }

        return NSLocalizedString("connect_wifi_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the new email address you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_new_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_new_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_new_email"
        }

        return NSLocalizedString("input_new_email", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the new phone number you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_new_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_new_phone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_new_phone"
        }

        return NSLocalizedString("input_new_phone", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the phone number in the correct format.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_number_invalid_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_number_invalid_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_number_invalid_tips"
        }

        return NSLocalizedString("phone_number_invalid_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the phone number you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_phone_number_you_bind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_phone_number_you_bind", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_phone_number_you_bind"
        }

        return NSLocalizedString("input_phone_number_you_bind", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the phone number you want to bind, and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_phone_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_phone_send", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_phone_send"
        }

        return NSLocalizedString("input_phone_send", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the redeem code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func enter_coupon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_coupon", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_coupon"
        }

        return NSLocalizedString("enter_coupon", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your email ID and we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sign_up_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_tips"
        }

        return NSLocalizedString("sign_up_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your mobile phone number/email ID, we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mail_phone_register_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mail_phone_register_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mail_phone_register_des"
        }

        return NSLocalizedString("mail_phone_register_des", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your mobile phone number/email ID, we will send a verification code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sign_up_tips_phone_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_tips_phone_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_tips_phone_email"
        }

        return NSLocalizedString("sign_up_tips_phone_email", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in a more than 10 words statement so that we can provide better help.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func hint_feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hint_feedback", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hint_feedback"
        }

        return NSLocalizedString("hint_feedback", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in a more than 10 words statement.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func questions_statement_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("questions_statement_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "questions_statement_error"
        }

        return NSLocalizedString("questions_statement_error", bundle: bundle, comment: "")
      }

      /// en translation: Please go to MoMo to pay for the order. If the payment has been completed, please wait.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mtn_go_momo_or_wait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mtn_go_momo_or_wait", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mtn_go_momo_or_wait"
        }

        return NSLocalizedString("mtn_go_momo_or_wait", bundle: bundle, comment: "")
      }

      /// en translation: Please long press the power button 3s until you hear a sound from the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func battery_camera_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("battery_camera_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "battery_camera_tips"
        }

        return NSLocalizedString("battery_camera_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please long press the reset button for 3s to make the camera enter the scanning state
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func long_press_reset_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("long_press_reset_button", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "long_press_reset_button"
        }

        return NSLocalizedString("long_press_reset_button", bundle: bundle, comment: "")
      }

      /// en translation: Please make sure that the Wifi password you entered is correct and it is case sensitive.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_password_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_password_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_password_1"
        }

        return NSLocalizedString("connect_error_password_1", bundle: bundle, comment: "")
      }

      /// en translation: Please make sure that the package is clearly visible on the camera view and is not obscured by other objects.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_guide_four_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_guide_four_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_guide_four_tips"
        }

        return NSLocalizedString("package_guide_four_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please make sure that your Wi-Fi network is not an enterprise network connection method, and the camera only supports networks with a security level below WPA-2.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_method(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_method", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_method"
        }

        return NSLocalizedString("connect_error_method", bundle: bundle, comment: "")
      }

      /// en translation: Please make sure your phone is connected to a valid network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func to_coninue_please_check_internet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to_coninue_please_check_internet", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to_coninue_please_check_internet"
        }

        return NSLocalizedString("to_coninue_please_check_internet", bundle: bundle, comment: "")
      }

      /// en translation: Please open  Location Services" in your phone system settings."
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_open_location_service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_open_location_service", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_open_location_service"
        }

        return NSLocalizedString("please_open_location_service", bundle: bundle, comment: "")
      }

      /// en translation: Please pay attention to data in a non-WiFi environment.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func pay_attention_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pay_attention_data", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pay_attention_data"
        }

        return NSLocalizedString("pay_attention_data", bundle: bundle, comment: "")
      }

      /// en translation: Please place the camera near the Wi-Fi router and make sure the router is connected to a power source
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_ap_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_ap_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_ap_2"
        }

        return NSLocalizedString("connect_error_ap_2", bundle: bundle, comment: "")
      }

      /// en translation: Please place the camera where you need to install the camera and check the strength of the Wi-Fi signal.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_wifi_0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_wifi_0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_wifi_0"
        }

        return NSLocalizedString("check_wifi_0", bundle: bundle, comment: "")
      }

      /// en translation: Please plug in a power source until you hear a sound from the camera and complete the rotation.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func plugin_camera_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plugin_camera_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plugin_camera_tips"
        }

        return NSLocalizedString("plugin_camera_tips", bundle: bundle, comment: "")
      }

      /// en translation: Please press the power button or connect a power source until you hear a sound or see the light on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func make_sure_cemera_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("make_sure_cemera_on", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "make_sure_cemera_on"
        }

        return NSLocalizedString("make_sure_cemera_on", bundle: bundle, comment: "")
      }

      /// en translation: Please read it carefully and click Agree and Continue" to indicate that you have read and agreed to all the terms."
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_read_policy_and_agree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_read_policy_and_agree", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_read_policy_and_agree"
        }

        return NSLocalizedString("please_read_policy_and_agree", bundle: bundle, comment: "")
      }

      /// en translation: Please reconfirm whether your Wi-Fi name (SSID) and Password are correct (case sensitive).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_confim(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_confim", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_confim"
        }

        return NSLocalizedString("wifi_confim", bundle: bundle, comment: "")
      }

      /// en translation: Please reconnect to the previous Wi-Fi in the phone system settings, and return to this page after the operation is complete to check the camera's binding result.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reconnect_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reconnect_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reconnect_wifi"
        }

        return NSLocalizedString("reconnect_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Please rotate the body to check if there is a QR code on the body shell.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func qrcode_way1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrcode_way1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrcode_way1"
        }

        return NSLocalizedString("qrcode_way1", bundle: bundle, comment: "")
      }

      /// en translation: Please scan the QR code first
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_scan_qr_code_first(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_scan_qr_code_first", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_scan_qr_code_first"
        }

        return NSLocalizedString("please_scan_qr_code_first", bundle: bundle, comment: "")
      }

      /// en translation: Please scan the QR code of the camera admin
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func share_scan_qr_content(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share_scan_qr_content", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "share_scan_qr_content"
        }

        return NSLocalizedString("share_scan_qr_content", bundle: bundle, comment: "")
      }

      /// en translation: Please select the User Agreement and Privacy Policy.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_terms", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_terms"
        }

        return NSLocalizedString("select_terms", bundle: bundle, comment: "")
      }

      /// en translation: Please select the error message you hear
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func choose_error_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_error_msg", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_error_msg"
        }

        return NSLocalizedString("choose_error_msg", bundle: bundle, comment: "")
      }

      /// en translation: Please select the issues you want to report from the following options (multiple choices are available):
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func library_no_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library_no_tag", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library_no_tag"
        }

        return NSLocalizedString("library_no_tag", bundle: bundle, comment: "")
      }

      /// en translation: Please select the relevant terms.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_feedback_check(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_feedback_check", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_feedback_check"
        }

        return NSLocalizedString("video_feedback_check", bundle: bundle, comment: "")
      }

      /// en translation: Please try another Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_failed_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_failed_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_failed_3"
        }

        return NSLocalizedString("connect_error_failed_3", bundle: bundle, comment: "")
      }

      /// en translation: Please try another Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_ip_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_ip_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_ip_3"
        }

        return NSLocalizedString("connect_error_ip_3", bundle: bundle, comment: "")
      }

      /// en translation: Please try to restart the router and reconnect.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_failed_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_failed_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_failed_2"
        }

        return NSLocalizedString("connect_error_failed_2", bundle: bundle, comment: "")
      }

      /// en translation: Please try to restart the router and reconnect.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_ip_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_ip_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_ip_2"
        }

        return NSLocalizedString("connect_error_ip_2", bundle: bundle, comment: "")
      }

      /// en translation: Please turn on Wi-Fi access in phone settings.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_turn_on_wifi_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_turn_on_wifi_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_turn_on_wifi_setting"
        }

        return NSLocalizedString("please_turn_on_wifi_setting", bundle: bundle, comment: "")
      }

      /// en translation: Please turn on the floating window switch.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_open_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_open_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_open_permission"
        }

        return NSLocalizedString("please_open_permission", bundle: bundle, comment: "")
      }

      /// en translation: Please use %@ APP to scan the QR code below to add a camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func use_app_scan(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("use_app_scan", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "use_app_scan"
        }

        let format = NSLocalizedString("use_app_scan", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Plug-in camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func plugin_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plugin_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plugin_camera"
        }

        return NSLocalizedString("plugin_camera", bundle: bundle, comment: "")
      }

      /// en translation: Plugin
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_device_plugin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_device_plugin", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_device_plugin"
        }

        return NSLocalizedString("add_device_plugin", bundle: bundle, comment: "")
      }

      /// en translation: Plus
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func plan_plus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plan_plus", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plan_plus"
        }

        return NSLocalizedString("plan_plus", bundle: bundle, comment: "")
      }

      /// en translation: Position
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func preset_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preset_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "preset_location"
        }

        return NSLocalizedString("preset_location", bundle: bundle, comment: "")
      }

      /// en translation: Position added successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_preset_scuess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_preset_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_preset_scuess"
        }

        return NSLocalizedString("add_preset_scuess", bundle: bundle, comment: "")
      }

      /// en translation: Postal Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func postal_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("postal_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "postal_code"
        }

        return NSLocalizedString("postal_code", bundle: bundle, comment: "")
      }

      /// en translation: Power saving
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep"
        }

        return NSLocalizedString("sleep", bundle: bundle, comment: "")
      }

      /// en translation: Press again to exit %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func double_click_exit(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("double_click_exit", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "double_click_exit"
        }

        let format = NSLocalizedString("double_click_exit", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privacy_policy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "privacy_policy"
        }

        return NSLocalizedString("privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func privacy_policy_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privacy_policy_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "privacy_policy_2"
        }

        return NSLocalizedString("privacy_policy_2", bundle: bundle, comment: "")
      }

      /// en translation: Pro
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func plan_pro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plan_pro", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plan_pro"
        }

        return NSLocalizedString("plan_pro", bundle: bundle, comment: "")
      }

      /// en translation: Processed successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func handler_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("handler_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "handler_success"
        }

        return NSLocalizedString("handler_success", bundle: bundle, comment: "")
      }

      /// en translation: Prompt
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func prompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("prompt", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "prompt"
        }

        return NSLocalizedString("prompt", bundle: bundle, comment: "")
      }

      /// en translation: Push Button
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_device_push_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_device_push_button", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_device_push_button"
        }

        return NSLocalizedString("add_device_push_button", bundle: bundle, comment: "")
      }

      /// en translation: Push Notifications
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_push(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_push", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_push"
        }

        return NSLocalizedString("notification_push", bundle: bundle, comment: "")
      }

      /// en translation: Pусский(Russian)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_ru(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_ru", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_ru"
        }

        return NSLocalizedString("device_language_ru", bundle: bundle, comment: "")
      }

      /// en translation: QR code can be found under the path
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_info_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_info_title"
        }

        return NSLocalizedString("scan_info_title", bundle: bundle, comment: "")
      }

      /// en translation: QR code is wrong
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wrong_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrong_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wrong_code"
        }

        return NSLocalizedString("wrong_code", bundle: bundle, comment: "")
      }

      /// en translation: QR code was not found, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_qr_code"
        }

        return NSLocalizedString("no_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: QR code was not found, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func qr_code_not_found(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qr_code_not_found", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qr_code_not_found"
        }

        return NSLocalizedString("qr_code_not_found", bundle: bundle, comment: "")
      }

      /// en translation: QR code will expire at %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func qr_expire(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("qr_expire", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qr_expire"
        }

        let format = NSLocalizedString("qr_expire", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Question type
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func question_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("question_type", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "question_type"
        }

        return NSLocalizedString("question_type", bundle: bundle, comment: "")
      }

      /// en translation: Questions and Comments
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func problem_and_feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("problem_and_feedback", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "problem_and_feedback"
        }

        return NSLocalizedString("problem_and_feedback", bundle: bundle, comment: "")
      }

      /// en translation: Quick connect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func quick_connect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("quick_connect", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "quick_connect"
        }

        return NSLocalizedString("quick_connect", bundle: bundle, comment: "")
      }

      /// en translation: Recognition people, pet, and vehicle in the video and analyze their actions to get a smarter notification.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_payment_ling_content(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_payment_ling_content", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_payment_ling_content"
        }

        return NSLocalizedString("dialog_payment_ling_content", bundle: bundle, comment: "")
      }

      /// en translation: Recognition people, pet, and vehicle in the video and analyze their actions to get a smarter notification.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func service_ai_notify_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("service_ai_notify_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "service_ai_notify_desc"
        }

        return NSLocalizedString("service_ai_notify_desc", bundle: bundle, comment: "")
      }

      /// en translation: Reconnect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reconnect", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reconnect"
        }

        return NSLocalizedString("reconnect", bundle: bundle, comment: "")
      }

      /// en translation: Reconnect Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reconnect_wifi_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reconnect_wifi_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reconnect_wifi_camera"
        }

        return NSLocalizedString("reconnect_wifi_camera", bundle: bundle, comment: "")
      }

      /// en translation: Reconnect to Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reconnect_wifi_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reconnect_wifi_button", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reconnect_wifi_button"
        }

        return NSLocalizedString("reconnect_wifi_button", bundle: bundle, comment: "")
      }

      /// en translation: Record Video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func record_video(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record_video", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record_video"
        }

        return NSLocalizedString("record_video", bundle: bundle, comment: "")
      }

      /// en translation: Redeem Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func coupon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coupon", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "coupon"
        }

        return NSLocalizedString("coupon", bundle: bundle, comment: "")
      }

      /// en translation: Redeem code has been used.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func coupon_used(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coupon_used", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "coupon_used"
        }

        return NSLocalizedString("coupon_used", bundle: bundle, comment: "")
      }

      /// en translation: Redeem code has expired.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func coupon_expire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coupon_expire", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "coupon_expire"
        }

        return NSLocalizedString("coupon_expire", bundle: bundle, comment: "")
      }

      /// en translation: Reference operation instruction to find the power button
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reference_instruction_power(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reference_instruction_power", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reference_instruction_power"
        }

        return NSLocalizedString("reference_instruction_power", bundle: bundle, comment: "")
      }

      /// en translation: Reference operation instructions to find the reboot buttonhole.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reference_instruction_reboot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reference_instruction_reboot", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reference_instruction_reboot"
        }

        return NSLocalizedString("reference_instruction_reboot", bundle: bundle, comment: "")
      }

      /// en translation: Refresh
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func refresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("refresh", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "refresh"
        }

        return NSLocalizedString("refresh", bundle: bundle, comment: "")
      }

      /// en translation: Register to the cloud service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_register", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_register"
        }

        return NSLocalizedString("connect_register", bundle: bundle, comment: "")
      }

      /// en translation: Reject
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reject", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reject"
        }

        return NSLocalizedString("reject", bundle: bundle, comment: "")
      }

      /// en translation: Release to refresh
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func load_more_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("load_more_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "load_more_title"
        }

        return NSLocalizedString("load_more_title", bundle: bundle, comment: "")
      }

      /// en translation: Release to stop
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func release_stop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("release_stop", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "release_stop"
        }

        return NSLocalizedString("release_stop", bundle: bundle, comment: "")
      }

      /// en translation: Remember Wi-Fi name and password after successful connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_save_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_save_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_save_wifi"
        }

        return NSLocalizedString("bind_device_save_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Remember password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func remember_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remember_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remember_password"
        }

        return NSLocalizedString("remember_password", bundle: bundle, comment: "")
      }

      /// en translation: Remind me next time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func migration_statement_5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("migration_statement_5", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_5"
        }

        return NSLocalizedString("migration_statement_5", bundle: bundle, comment: "")
      }

      /// en translation: Remove Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func remove_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remove_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove_device"
        }

        return NSLocalizedString("remove_device", bundle: bundle, comment: "")
      }

      /// en translation: Removed camera successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func remove_device_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remove_device_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remove_device_success"
        }

        return NSLocalizedString("remove_device_success", bundle: bundle, comment: "")
      }

      /// en translation: Replace Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func replace_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("replace_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "replace_wifi"
        }

        return NSLocalizedString("replace_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Replaced email ID successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_change_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_change_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_change_success"
        }

        return NSLocalizedString("email_change_success", bundle: bundle, comment: "")
      }

      /// en translation: Replaced phone number successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_number_change_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_number_change_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_number_change_success"
        }

        return NSLocalizedString("phone_number_change_success", bundle: bundle, comment: "")
      }

      /// en translation: Replay
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func replay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("replay", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "replay"
        }

        return NSLocalizedString("replay", bundle: bundle, comment: "")
      }

      /// en translation: Request expired, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func request_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_expired", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request_expired"
        }

        return NSLocalizedString("request_expired", bundle: bundle, comment: "")
      }

      /// en translation: Request is expired. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_3012(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_3012", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_3012"
        }

        return NSLocalizedString("error_3012", bundle: bundle, comment: "")
      }

      /// en translation: Request timed out, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func request_timeout_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_timeout_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request_timeout_and_try"
        }

        return NSLocalizedString("request_timeout_and_try", bundle: bundle, comment: "")
      }

      /// en translation: Resend
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func resent_verification_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resent_verification_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resent_verification_code"
        }

        return NSLocalizedString("resent_verification_code", bundle: bundle, comment: "")
      }

      /// en translation: Resend after %@%@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func resend_after_tip_ios(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("resend_after_tip_ios", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resend_after_tip_ios"
        }

        let format = NSLocalizedString("resend_after_tip_ios", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Resend after %ds
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func resend_after_tip(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("resend_after_tip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resend_after_tip"
        }

        let format = NSLocalizedString("resend_after_tip", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Reset
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset"
        }

        return NSLocalizedString("reset", bundle: bundle, comment: "")
      }

      /// en translation: Reset password successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reset_password_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset_password_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset_password_success"
        }

        return NSLocalizedString("reset_password_success", bundle: bundle, comment: "")
      }

      /// en translation: Resolution
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_resolution(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_resolution", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_resolution"
        }

        return NSLocalizedString("video_resolution", bundle: bundle, comment: "")
      }

      /// en translation: Restore purchase order
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func restore_purchase_record(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("restore_purchase_record", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "restore_purchase_record"
        }

        return NSLocalizedString("restore_purchase_record", bundle: bundle, comment: "")
      }

      /// en translation: Restore successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func restore_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("restore_successfully", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "restore_successfully"
        }

        return NSLocalizedString("restore_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Retrieve by email ID
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func find_password_by_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("find_password_by_phone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "find_password_by_phone"
        }

        return NSLocalizedString("find_password_by_phone", bundle: bundle, comment: "")
      }

      /// en translation: Retrieve by phone number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func find_password_by_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("find_password_by_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "find_password_by_email"
        }

        return NSLocalizedString("find_password_by_email", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_retry", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_retry"
        }

        return NSLocalizedString("please_retry", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("retry", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "retry"
        }

        return NSLocalizedString("retry", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func retry2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("retry2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "retry2"
        }

        return NSLocalizedString("retry2", bundle: bundle, comment: "")
      }

      /// en translation: Retry after troubleshooting the following problems or use scan code adding
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func troubleshooting_issue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("troubleshooting_issue", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "troubleshooting_issue"
        }

        return NSLocalizedString("troubleshooting_issue", bundle: bundle, comment: "")
      }

      /// en translation: Retry connecting camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reconnect_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reconnect_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reconnect_camera"
        }

        return NSLocalizedString("reconnect_camera", bundle: bundle, comment: "")
      }

      /// en translation: Retry later
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func try_later(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("try_later", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "try_later"
        }

        return NSLocalizedString("try_later", bundle: bundle, comment: "")
      }

      /// en translation: Rotate Image
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func rotate_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rotate_image", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rotate_image"
        }

        return NSLocalizedString("rotate_image", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func saturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saturday", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saturday"
        }

        return NSLocalizedString("saturday", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sunday", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sunday"
        }

        return NSLocalizedString("sunday", bundle: bundle, comment: "")
      }

      /// en translation: S/N
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func serial_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("serial_number", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "serial_number"
        }

        return NSLocalizedString("serial_number", bundle: bundle, comment: "")
      }

      /// en translation: SD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ratio_720p(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ratio_720p", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ratio_720p"
        }

        return NSLocalizedString("ratio_720p", bundle: bundle, comment: "")
      }

      /// en translation: SD
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_resolution_720p(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_resolution_720p", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_resolution_720p"
        }

        return NSLocalizedString("video_resolution_720p", bundle: bundle, comment: "")
      }

      /// en translation: SD Card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_card", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_card"
        }

        return NSLocalizedString("sd_card", bundle: bundle, comment: "")
      }

      /// en translation: SD Card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_management(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_management", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_management"
        }

        return NSLocalizedString("sd_management", bundle: bundle, comment: "")
      }

      /// en translation: SD Card Video
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sdcard_7_24(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sdcard_7_24", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sdcard_7_24"
        }

        return NSLocalizedString("sdcard_7_24", bundle: bundle, comment: "")
      }

      /// en translation: SD card
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_strorage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_strorage", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_strorage"
        }

        return NSLocalizedString("sd_strorage", bundle: bundle, comment: "")
      }

      /// en translation: SD card format is improper, format it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_error"
        }

        return NSLocalizedString("sd_error", bundle: bundle, comment: "")
      }

      /// en translation: SD card format is incorrect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sdcard_need_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sdcard_need_format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sdcard_need_format"
        }

        return NSLocalizedString("sdcard_need_format", bundle: bundle, comment: "")
      }

      /// en translation: SD card format is incorrect, please contact the admin to format.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sdcard_need_format_shared(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sdcard_need_format_shared", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sdcard_need_format_shared"
        }

        return NSLocalizedString("sdcard_need_format_shared", bundle: bundle, comment: "")
      }

      /// en translation: SD card is formatting …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_card_formating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_card_formating", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_card_formating"
        }

        return NSLocalizedString("sd_card_formating", bundle: bundle, comment: "")
      }

      /// en translation: SD card is formatting, please wait.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_is_formatting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_is_formatting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_is_formatting"
        }

        return NSLocalizedString("sd_is_formatting", bundle: bundle, comment: "")
      }

      /// en translation: SD card not detected
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_card_not_exist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_card_not_exist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_card_not_exist"
        }

        return NSLocalizedString("sd_card_not_exist", bundle: bundle, comment: "")
      }

      /// en translation: SD card not support
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_supper(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_supper", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_supper"
        }

        return NSLocalizedString("sd_supper", bundle: bundle, comment: "")
      }

      /// en translation: SD card video play completed.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func live_play_finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("live_play_finish", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "live_play_finish"
        }

        return NSLocalizedString("live_play_finish", bundle: bundle, comment: "")
      }

      /// en translation: SD card video viewers have reached the limit, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sDcard_video_viewers_limit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SDcard_video_viewers_limit", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SDcard_video_viewers_limit"
        }

        return NSLocalizedString("SDcard_video_viewers_limit", bundle: bundle, comment: "")
      }

      /// en translation: SM
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_smooth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_smooth", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_smooth"
        }

        return NSLocalizedString("video_smooth", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", bundle: bundle, comment: "")
      }

      /// en translation: Save current location information?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_not_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_not_save", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_not_save"
        }

        return NSLocalizedString("location_not_save", bundle: bundle, comment: "")
      }

      /// en translation: Save to phone album
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func save_album(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save_album", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save_album"
        }

        return NSLocalizedString("save_album", bundle: bundle, comment: "")
      }

      /// en translation: Save to phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func record_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record_success"
        }

        return NSLocalizedString("record_success", bundle: bundle, comment: "")
      }

      /// en translation: Save to phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func save_to_evaeye_album(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save_to_evaeye_album", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save_to_evaeye_album"
        }

        return NSLocalizedString("save_to_evaeye_album", bundle: bundle, comment: "")
      }

      /// en translation: Save to phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shot_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shot_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shot_success"
        }

        return NSLocalizedString("shot_success", bundle: bundle, comment: "")
      }

      /// en translation: Saved Wi-Fi
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_saved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_saved", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_saved"
        }

        return NSLocalizedString("bind_device_saved", bundle: bundle, comment: "")
      }

      /// en translation: Saved location successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_save_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_save_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_save_success"
        }

        return NSLocalizedString("location_save_success", bundle: bundle, comment: "")
      }

      /// en translation: Saved successfully
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func saved_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saved_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saved_success"
        }

        return NSLocalizedString("saved_success", bundle: bundle, comment: "")
      }

      /// en translation: Scan QR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_camera_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_camera_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_camera_qr_code"
        }

        return NSLocalizedString("scan_camera_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Scan QR code to connect
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_the_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_the_qr_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_the_qr_code"
        }

        return NSLocalizedString("scan_the_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Scan QR code with the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_title"
        }

        return NSLocalizedString("scan_qr_code_title", bundle: bundle, comment: "")
      }

      /// en translation: Scan the QR code about 6-12inches in front of the camera after hearing the scanning sound or seeing the flashing light, and complete scanning when you hear another sound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_directions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_directions", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_directions"
        }

        return NSLocalizedString("scan_qr_code_directions", bundle: bundle, comment: "")
      }

      /// en translation: Scan the QR code about 6-12inches in front of the camera. Complete scanning when you hear another sound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_QR_code_directions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_QR_code_directions", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_QR_code_directions"
        }

        return NSLocalizedString("scan_QR_code_directions", bundle: bundle, comment: "")
      }

      /// en translation: Scan the QR code on the camera with your mobile phone to confirm the model number
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_model_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_model_number", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_model_number"
        }

        return NSLocalizedString("confirm_model_number", bundle: bundle, comment: "")
      }

      /// en translation: Scan the QR code with the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_QR_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_QR_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_QR_code"
        }

        return NSLocalizedString("scan_QR_code", bundle: bundle, comment: "")
      }

      /// en translation: Scan the QR code with your phone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qrcode_by_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qrcode_by_phone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qrcode_by_phone"
        }

        return NSLocalizedString("scan_qrcode_by_phone", bundle: bundle, comment: "")
      }

      /// en translation: Scanned successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func qr_scurss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qr_scurss", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qr_scurss"
        }

        return NSLocalizedString("qr_scurss", bundle: bundle, comment: "")
      }

      /// en translation: Scene Settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scene(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scene", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scene"
        }

        return NSLocalizedString("scene", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func auto_sleep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto_sleep", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "auto_sleep"
        }

        return NSLocalizedString("auto_sleep", bundle: bundle, comment: "")
      }

      /// en translation: Schedule Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func schedule_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("schedule_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "schedule_time"
        }

        return NSLocalizedString("schedule_time", bundle: bundle, comment: "")
      }

      /// en translation: Screen
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func screenshots(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screenshots", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screenshots"
        }

        return NSLocalizedString("screenshots", bundle: bundle, comment: "")
      }

      /// en translation: Screenshot sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func screenshot_sharing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screenshot_sharing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screenshot_sharing"
        }

        return NSLocalizedString("screenshot_sharing", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", bundle: bundle, comment: "")
      }

      /// en translation: Searching for nearby bluetooth devices
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func search_buletooth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search_buletooth", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search_buletooth"
        }

        return NSLocalizedString("search_buletooth", bundle: bundle, comment: "")
      }

      /// en translation: Select Items
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_items(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_items", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_items"
        }

        return NSLocalizedString("select_items", bundle: bundle, comment: "")
      }

      /// en translation: Select Wi-Fi for the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_wifi_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_wifi_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_wifi_title"
        }

        return NSLocalizedString("select_wifi_title", bundle: bundle, comment: "")
      }

      /// en translation: Select a good spot for your camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_spot_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_spot_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_spot_1"
        }

        return NSLocalizedString("select_spot_1", bundle: bundle, comment: "")
      }

      /// en translation: Select a good spot for your camera, please install the camera in a position where its view is not blocked and ensure that it is within the coverage of the Wi-Fi network.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func selcet_spot_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selcet_spot_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "selcet_spot_2"
        }

        return NSLocalizedString("selcet_spot_2", bundle: bundle, comment: "")
      }

      /// en translation: Select all
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_all", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_all"
        }

        return NSLocalizedString("select_all", bundle: bundle, comment: "")
      }

      /// en translation: Select duration
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_choose_buy_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_choose_buy_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_choose_buy_time"
        }

        return NSLocalizedString("payment_choose_buy_time", bundle: bundle, comment: "")
      }

      /// en translation: Select network
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_network(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_network", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_network"
        }

        return NSLocalizedString("select_network", bundle: bundle, comment: "")
      }

      /// en translation: Select package
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_guide_four(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_guide_four", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_guide_four"
        }

        return NSLocalizedString("package_guide_four", bundle: bundle, comment: "")
      }

      /// en translation: Select the camera to add
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_camera"
        }

        return NSLocalizedString("select_camera", bundle: bundle, comment: "")
      }

      /// en translation: Select the camera to be added
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_camera_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_camera_add", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_camera_add"
        }

        return NSLocalizedString("select_camera_add", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_phone_verify_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_phone_verify_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_phone_verify_code"
        }

        return NSLocalizedString("get_phone_verify_code", bundle: bundle, comment: "")
      }

      /// en translation: Sending verification code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sendingcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendingcode", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sendingcode"
        }

        return NSLocalizedString("sendingcode", bundle: bundle, comment: "")
      }

      /// en translation: Sep.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func month_9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month_9", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month_9"
        }

        return NSLocalizedString("month_9", bundle: bundle, comment: "")
      }

      /// en translation: Server Error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func server_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("server_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "server_error"
        }

        return NSLocalizedString("server_error", bundle: bundle, comment: "")
      }

      /// en translation: Server error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func system_maintenance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("system_maintenance", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "system_maintenance"
        }

        return NSLocalizedString("system_maintenance", bundle: bundle, comment: "")
      }

      /// en translation: Server timeout
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func network_error_our_server(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("network_error_our_server", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "network_error_our_server"
        }

        return NSLocalizedString("network_error_our_server", bundle: bundle, comment: "")
      }

      /// en translation: Service Center
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func service_center(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("service_center", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "service_center"
        }

        return NSLocalizedString("service_center", bundle: bundle, comment: "")
      }

      /// en translation: Set
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func set(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("set", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "set"
        }

        return NSLocalizedString("set", bundle: bundle, comment: "")
      }

      /// en translation: Set New Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func create_new_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create_new_password", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create_new_password"
        }

        return NSLocalizedString("create_new_password", bundle: bundle, comment: "")
      }

      /// en translation: Set Password
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func create_your_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create_your_account", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create_your_account"
        }

        return NSLocalizedString("create_your_account", bundle: bundle, comment: "")
      }

      /// en translation: Set a camera name and location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func new_bind_device_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_bind_device_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_bind_device_name"
        }

        return NSLocalizedString("new_bind_device_name", bundle: bundle, comment: "")
      }

      /// en translation: Set activity zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func set_az(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("set_az", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "set_az"
        }

        return NSLocalizedString("set_az", bundle: bundle, comment: "")
      }

      /// en translation: Set frequently watched positions, you can find frequently watched positions with one key at any time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func position_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("position_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "position_tips"
        }

        return NSLocalizedString("position_tips", bundle: bundle, comment: "")
      }

      /// en translation: Set now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_set(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("go_set", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_set"
        }

        return NSLocalizedString("go_set", bundle: bundle, comment: "")
      }

      /// en translation: Set successfully
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func setup_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setup_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setup_success"
        }

        return NSLocalizedString("setup_success", bundle: bundle, comment: "")
      }

      /// en translation: Set the activity zone, only push the trigger message at the precise location, and filter out the rest of the information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_payment_zone_content(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_payment_zone_content", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_payment_zone_content"
        }

        return NSLocalizedString("dialog_payment_zone_content", bundle: bundle, comment: "")
      }

      /// en translation: Set the activity zone, only push the trigger message at the precise location, and filter out the rest of the information.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func service_area_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("service_area_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "service_area_desc"
        }

        return NSLocalizedString("service_area_desc", bundle: bundle, comment: "")
      }

      /// en translation: Set the time period to make the camera automatically go to sleep
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_period_etting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_period_etting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_period_etting"
        }

        return NSLocalizedString("sleep_period_etting", bundle: bundle, comment: "")
      }

      /// en translation: Set up humanoid tracking >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func tracking_guide_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tracking_guide_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tracking_guide_2"
        }

        return NSLocalizedString("tracking_guide_2", bundle: bundle, comment: "")
      }

      /// en translation: Setting failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_fail_retry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_fail_retry", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_fail_retry"
        }

        return NSLocalizedString("open_fail_retry", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "share"
        }

        return NSLocalizedString("share", bundle: bundle, comment: "")
      }

      /// en translation: Share failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func share_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "share_error"
        }

        return NSLocalizedString("share_error", bundle: bundle, comment: "")
      }

      /// en translation: Shared By
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shared_by(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shared_by", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shared_by"
        }

        return NSLocalizedString("shared_by", bundle: bundle, comment: "")
      }

      /// en translation: Shared by %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shared_by_(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("shared_by_", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shared_by_"
        }

        let format = NSLocalizedString("shared_by_", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Shared cameras
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shared_devices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shared_devices", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shared_devices"
        }

        return NSLocalizedString("shared_devices", bundle: bundle, comment: "")
      }

      /// en translation: Shared to:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func share_to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share_to", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "share_to"
        }

        return NSLocalizedString("share_to", bundle: bundle, comment: "")
      }

      /// en translation: Sharing
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sharing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sharing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sharing"
        }

        return NSLocalizedString("sharing", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func has_account_and_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("has_account_and_login", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "has_account_and_login"
        }

        return NSLocalizedString("has_account_and_login", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func resign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resign_in", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resign_in"
        }

        return NSLocalizedString("resign_in", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in"
        }

        return NSLocalizedString("sign_in", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sign_in_little(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in_little", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in_little"
        }

        return NSLocalizedString("sign_in_little", bundle: bundle, comment: "")
      }

      /// en translation: Sign out
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sign_up_register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_register", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_register"
        }

        return NSLocalizedString("sign_up_register", bundle: bundle, comment: "")
      }

      /// en translation: Sign up for a New Account
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sign_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up"
        }

        return NSLocalizedString("sign_up", bundle: bundle, comment: "")
      }

      /// en translation: Size：
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func size(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("size", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "size"
        }

        return NSLocalizedString("size", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("skip", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "skip"
        }

        return NSLocalizedString("skip", bundle: bundle, comment: "")
      }

      /// en translation: Sleep
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_mode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_mode", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_mode"
        }

        return NSLocalizedString("sleep_mode", bundle: bundle, comment: "")
      }

      /// en translation: Sleep Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_setting"
        }

        return NSLocalizedString("sleep_setting", bundle: bundle, comment: "")
      }

      /// en translation: Sleep period
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_period(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_period", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_period"
        }

        return NSLocalizedString("sleep_period", bundle: bundle, comment: "")
      }

      /// en translation: Sleep plan
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_plan", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_plan"
        }

        return NSLocalizedString("sleep_plan", bundle: bundle, comment: "")
      }

      /// en translation: Sleeping
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleeping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleeping", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleeping"
        }

        return NSLocalizedString("sleeping", bundle: bundle, comment: "")
      }

      /// en translation: Sleeping time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_time"
        }

        return NSLocalizedString("sleep_time", bundle: bundle, comment: "")
      }

      /// en translation: Smart Battery Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_new_device_g(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_new_device_g", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_new_device_g"
        }

        return NSLocalizedString("add_new_device_g", bundle: bundle, comment: "")
      }

      /// en translation: Smart PTZ Camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_new_device_b(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_new_device_b", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_new_device_b"
        }

        return NSLocalizedString("add_new_device_b", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, failed to feedback, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func feedback_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedback_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedback_failed"
        }

        return NSLocalizedString("feedback_failed", bundle: bundle, comment: "")
      }

      /// en translation: Sorry, failed to feedback. Please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func library_feedback_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library_feedback_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library_feedback_failed"
        }

        return NSLocalizedString("library_feedback_failed", bundle: bundle, comment: "")
      }

      /// en translation: Sound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sound", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sound"
        }

        return NSLocalizedString("sound", bundle: bundle, comment: "")
      }

      /// en translation: Sound Setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sound_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sound_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sound_setting"
        }

        return NSLocalizedString("sound_setting", bundle: bundle, comment: "")
      }

      /// en translation: Source
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func source(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("source", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "source"
        }

        return NSLocalizedString("source", bundle: bundle, comment: "")
      }

      /// en translation: Speaker
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func speaker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("speaker", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "speaker"
        }

        return NSLocalizedString("speaker", bundle: bundle, comment: "")
      }

      /// en translation: Speaker volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func speaker_volume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("speaker_volume", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "speaker_volume"
        }

        return NSLocalizedString("speaker_volume", bundle: bundle, comment: "")
      }

      /// en translation: Split Screen
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func split_screen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("split_screen", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "split_screen"
        }

        return NSLocalizedString("split_screen", bundle: bundle, comment: "")
      }

      /// en translation: Start time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_start_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_start_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_start_time"
        }

        return NSLocalizedString("sleep_start_time", bundle: bundle, comment: "")
      }

      /// en translation: State/Province/Region
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func province_region(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("province_region", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "province_region"
        }

        return NSLocalizedString("province_region", bundle: bundle, comment: "")
      }

      /// en translation: Status LED
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func status_led(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("status_led", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "status_led"
        }

        return NSLocalizedString("status_led", bundle: bundle, comment: "")
      }

      /// en translation: Status:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_state_ios(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_state_ios", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_state_ios"
        }

        return NSLocalizedString("device_state_ios", bundle: bundle, comment: "")
      }

      /// en translation: Status: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_state(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_state", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_state"
        }

        let format = NSLocalizedString("device_state", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Stay on this page
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func stay_this_page(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stay_this_page", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "stay_this_page"
        }

        return NSLocalizedString("stay_this_page", bundle: bundle, comment: "")
      }

      /// en translation: Storage
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func storage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("storage", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "storage"
        }

        return NSLocalizedString("storage", bundle: bundle, comment: "")
      }

      /// en translation: Storage access is required to use the app.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func permission_dialog_message_get_storage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission_dialog_message_get_storage", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission_dialog_message_get_storage"
        }

        return NSLocalizedString("permission_dialog_message_get_storage", bundle: bundle, comment: "")
      }

      /// en translation: Street
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func select_street(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_street", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_street"
        }

        return NSLocalizedString("select_street", bundle: bundle, comment: "")
      }

      /// en translation: Street and number, P.O. box, c/o.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func address1_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address1_placeholder", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address1_placeholder"
        }

        return NSLocalizedString("address1_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Street and number, P.O. box, c/o.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func street_address_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("street_address_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "street_address_1"
        }

        return NSLocalizedString("street_address_1", bundle: bundle, comment: "")
      }

      /// en translation: Street and number, P.O. box, c/o.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func street_address_1_place_holder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("street_address_1_place_holder", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "street_address_1_place_holder"
        }

        return NSLocalizedString("street_address_1_place_holder", bundle: bundle, comment: "")
      }

      /// en translation: Strong
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func strong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("strong", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "strong"
        }

        return NSLocalizedString("strong", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("submit", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "submit"
        }

        return NSLocalizedString("submit", bundle: bundle, comment: "")
      }

      /// en translation: Submit Deletion
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func submit_deletion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("submit_deletion", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "submit_deletion"
        }

        return NSLocalizedString("submit_deletion", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func go_buy_plus(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("go_buy_plus", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "go_buy_plus"
        }

        let format = NSLocalizedString("go_buy_plus", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Subscribe now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cloud_service_buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cloud_service_buy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloud_service_buy"
        }

        return NSLocalizedString("cloud_service_buy", bundle: bundle, comment: "")
      }

      /// en translation: Suomi(Finnish)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_fi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_fi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_fi"
        }

        return NSLocalizedString("device_language_fi", bundle: bundle, comment: "")
      }

      /// en translation: System Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func system_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("system_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "system_update"
        }

        return NSLocalizedString("system_update", bundle: bundle, comment: "")
      }

      /// en translation: System Version
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func system_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("system_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "system_version"
        }

        return NSLocalizedString("system_version", bundle: bundle, comment: "")
      }

      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func other_error_with_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other_error_with_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other_error_with_code"
        }

        return NSLocalizedString("other_error_with_code", bundle: bundle, comment: "")
      }

      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func other_errors(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other_errors", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other_errors"
        }

        return NSLocalizedString("other_errors", bundle: bundle, comment: "")
      }

      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func unknown_error_ios(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknown_error_ios", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unknown_error_ios"
        }

        return NSLocalizedString("unknown_error_ios", bundle: bundle, comment: "")
      }

      /// en translation: System error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func unkonw_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unkonw_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unkonw_error"
        }

        return NSLocalizedString("unkonw_error", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func thursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thursday", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thursday"
        }

        return NSLocalizedString("thursday", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func tuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tuesday", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tuesday"
        }

        return NSLocalizedString("tuesday", bundle: bundle, comment: "")
      }

      /// en translation: Tansfer to staff service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func iosConversationUiChatHandoverMessageSelection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.conversation.ui.chat.handover.message.selection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.conversation.ui.chat.handover.message.selection"
        }

        return NSLocalizedString("ios.conversation.ui.chat.handover.message.selection", bundle: bundle, comment: "")
      }

      /// en translation: The Bluetooth of this phone is turned off. Turn on the Bluetooth to add the camera faster.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_bluetooth_help_adding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_bluetooth_help_adding", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_bluetooth_help_adding"
        }

        return NSLocalizedString("open_bluetooth_help_adding", bundle: bundle, comment: "")
      }

      /// en translation: The QR code on the camera is on a paper sticker, often located inside the outer cases or under the rubber plug. This QR code contains the serial number and type number, usually next to a line of text starting with "S/N".
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func where_is_qrcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("where_is_qrcode", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "where_is_qrcode"
        }

        return NSLocalizedString("where_is_qrcode", bundle: bundle, comment: "")
      }

      /// en translation: The SD card was detected to be inserted, but the format is incorrect. You need to format it before you can use it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sd_error_format_sure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sd_error_format_sure", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sd_error_format_sure"
        }

        return NSLocalizedString("sd_error_format_sure", bundle: bundle, comment: "")
      }

      /// en translation: The Wi-Fi strength of the current camera is weak, it is recommended to change the location or change the Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func weak_wifi_notation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weak_wifi_notation", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weak_wifi_notation"
        }

        return NSLocalizedString("weak_wifi_notation", bundle: bundle, comment: "")
      }

      /// en translation: The account is already bound
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func account_had_been_bind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_had_been_bind", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account_had_been_bind"
        }

        return NSLocalizedString("account_had_been_bind", bundle: bundle, comment: "")
      }

      /// en translation: The account of the camera admin and the sharing user must be in the same country and cannot be shared across countries.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func admin_sharing_in_same_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("admin_sharing_in_same_country", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "admin_sharing_in_same_country"
        }

        return NSLocalizedString("admin_sharing_in_same_country", bundle: bundle, comment: "")
      }

      /// en translation: The alarm is ringing.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alarm_playing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm_playing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm_playing"
        }

        return NSLocalizedString("alarm_playing", bundle: bundle, comment: "")
      }

      /// en translation: The alarm volume cannot be set below 10.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alarm_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm_no", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm_no"
        }

        return NSLocalizedString("alarm_no", bundle: bundle, comment: "")
      }

      /// en translation: The cache is temporary data generated during use. Clearing the cache will not affect the normal use of the application.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func clear_cache_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clear_cache_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear_cache_des"
        }

        return NSLocalizedString("clear_cache_des", bundle: bundle, comment: "")
      }

      /// en translation: The camera already moved to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alerdy_move_location(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("alerdy_move_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alerdy_move_location"
        }

        let format = NSLocalizedString("alerdy_move_location", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: The camera has been moved to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_has_move_to(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("device_has_move_to", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_has_move_to"
        }

        let format = NSLocalizedString("device_has_move_to", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: The camera is busy, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_line_busy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_line_busy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_line_busy"
        }

        return NSLocalizedString("camera_line_busy", bundle: bundle, comment: "")
      }

      /// en translation: The camera is connecting, please keep the camera and mobile phone close.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func keep_phone_camera_close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keep_phone_camera_close", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "keep_phone_camera_close"
        }

        return NSLocalizedString("keep_phone_camera_close", bundle: bundle, comment: "")
      }

      /// en translation: The camera is offline and cannot be set for now.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_network_cannot_set(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_network_cannot_set", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_network_cannot_set"
        }

        return NSLocalizedString("no_network_cannot_set", bundle: bundle, comment: "")
      }

      /// en translation: The camera is offline, please check whether the camera is turned on and is connected to Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_poor_network(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_poor_network", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_poor_network"
        }

        return NSLocalizedString("camera_poor_network", bundle: bundle, comment: "")
      }

      /// en translation: The camera is offline.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_poor_network_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_poor_network_short", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_poor_network_short"
        }

        return NSLocalizedString("camera_poor_network_short", bundle: bundle, comment: "")
      }

      /// en translation: The camera is power down at %@ due to low battery, please charge it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_off_low_battery(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("camera_off_low_battery", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_off_low_battery"
        }

        let format = NSLocalizedString("camera_off_low_battery", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: The camera is power down, please turn it on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_off(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_off", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_off"
        }

        return NSLocalizedString("camera_off", bundle: bundle, comment: "")
      }

      /// en translation: The camera is sleeping, need to wake up before setting
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_tips"
        }

        return NSLocalizedString("sleep_tips", bundle: bundle, comment: "")
      }

      /// en translation: The camera is unavailable before the firmware upgrade is complete.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func unavailable_before_upgrade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unavailable_before_upgrade", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unavailable_before_upgrade"
        }

        return NSLocalizedString("unavailable_before_upgrade", bundle: bundle, comment: "")
      }

      /// en translation: The camera will enter the scanning state automatically, and you will hear the scanning sound or see the flashing light. If the camera has not entered the scanning state, you need to double click the power button to make it enter the scanning state.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_scan_state_directions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_scan_state_directions", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_scan_state_directions"
        }

        return NSLocalizedString("confirm_scan_state_directions", bundle: bundle, comment: "")
      }

      /// en translation: The camera will no longer emit sound reminders
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_speaker_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_speaker_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_speaker_2"
        }

        return NSLocalizedString("confirm_speaker_2", bundle: bundle, comment: "")
      }

      /// en translation: The camera will not record, alarm, or push notifications.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_will_not_record(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_will_not_record", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_will_not_record"
        }

        return NSLocalizedString("camera_will_not_record", bundle: bundle, comment: "")
      }

      /// en translation: The camera will send you a notification when it detects any movement. In this mode, notifications will be sent to your phone quickly, but the frequency may be too high.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_warm_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_warm_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_warm_des"
        }

        return NSLocalizedString("notification_warm_des", bundle: bundle, comment: "")
      }

      /// en translation: The camera will send you a notification when the package is detected, and some useless information will be filtered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func detection_parcel_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detection_parcel_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detection_parcel_desc"
        }

        return NSLocalizedString("detection_parcel_desc", bundle: bundle, comment: "")
      }

      /// en translation: The camera will turn on tomorrow at %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_sleep_open(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("camera_sleep_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_sleep_open"
        }

        let format = NSLocalizedString("camera_sleep_open", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: The cloud storage space is reduced to %@ (the total capacity is not greater than %@GB)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cloud_size_change(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("cloud_size_change", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloud_size_change"
        }

        let format = NSLocalizedString("cloud_size_change", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: The current location is not recommended to mount the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_wifi_4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_wifi_4", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_wifi_4"
        }

        return NSLocalizedString("check_wifi_4", bundle: bundle, comment: "")
      }

      /// en translation: The current location is recommended to mount the camera.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_wifi_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_wifi_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_wifi_3"
        }

        return NSLocalizedString("check_wifi_3", bundle: bundle, comment: "")
      }

      /// en translation: The current mobile phone is not connected to Wi-Fi, please connect to Wi-Fi for your phone or manually enter Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func g4_change_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g4_change_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "g4_change_wifi"
        }

        return NSLocalizedString("g4_change_wifi", bundle: bundle, comment: "")
      }

      /// en translation: The current mobile phone is not connected to Wi-Fi, please connect to Wi-Fi for your phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func g4_change_wifi_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g4_change_wifi_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "g4_change_wifi_tips"
        }

        return NSLocalizedString("g4_change_wifi_tips", bundle: bundle, comment: "")
      }

      /// en translation: The device is not bound.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_not_bound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_not_bound", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_not_bound"
        }

        return NSLocalizedString("device_not_bound", bundle: bundle, comment: "")
      }

      /// en translation: The event is not over, please view the full video in library later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notication_no_end(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notication_no_end", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notication_no_end"
        }

        return NSLocalizedString("notication_no_end", bundle: bundle, comment: "")
      }

      /// en translation: The firmware is being installed …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func fireware_is_installing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fireware_is_installing", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fireware_is_installing"
        }

        return NSLocalizedString("fireware_is_installing", bundle: bundle, comment: "")
      }

      /// en translation: The firmware is downloading …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func fireware_is_downloading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fireware_is_downloading", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fireware_is_downloading"
        }

        return NSLocalizedString("fireware_is_downloading", bundle: bundle, comment: "")
      }

      /// en translation: The image has been saved to the phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func image_save_to_ablum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("image_save_to_ablum", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "image_save_to_ablum"
        }

        return NSLocalizedString("image_save_to_ablum", bundle: bundle, comment: "")
      }

      /// en translation: The indicator light should be in the blinking blue light state when scanning the code. If it is in the state of other indicator lights, please double-click the power button after powering on, and the camera will enter the scanning state of the blinking blue light.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_qr_code_notice1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_code_notice1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_code_notice1"
        }

        return NSLocalizedString("scan_qr_code_notice1", bundle: bundle, comment: "")
      }

      /// en translation: The invitee needs to download and install %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func invite_info_des(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("invite_info_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invite_info_des"
        }

        let format = NSLocalizedString("invite_info_des", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: The max number of the live stream has been reached.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func reach_max_live_num(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reach_max_live_num", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reach_max_live_num"
        }

        return NSLocalizedString("reach_max_live_num", bundle: bundle, comment: "")
      }

      /// en translation: The order is verifying, please wait
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verificting_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verificting_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verificting_error"
        }

        return NSLocalizedString("verificting_error", bundle: bundle, comment: "")
      }

      /// en translation: The password is incorrect, please confirm the password.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func password_incorrect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_incorrect", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_incorrect"
        }

        return NSLocalizedString("password_incorrect", bundle: bundle, comment: "")
      }

      /// en translation: The phone network is unavailable, please check phone network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func failed_to_get_information_and_try(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed_to_get_information_and_try", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed_to_get_information_and_try"
        }

        return NSLocalizedString("failed_to_get_information_and_try", bundle: bundle, comment: "")
      }

      /// en translation: The phone network is unavailable, please check the phone network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_weak_network(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_weak_network", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_weak_network"
        }

        return NSLocalizedString("phone_weak_network", bundle: bundle, comment: "")
      }

      /// en translation: The phone network is unavailable.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_weak_network_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_weak_network_short", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_weak_network_short"
        }

        return NSLocalizedString("phone_weak_network_short", bundle: bundle, comment: "")
      }

      /// en translation: The recognition accuracy of the package is not good now, and the function is continuously optimized. It is recommended to be used in a standard scene with an obliquely downward viewing angle from about 2.1m(7 feet) to the ground.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_scenes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_scenes", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_scenes"
        }

        return NSLocalizedString("package_scenes", bundle: bundle, comment: "")
      }

      /// en translation: The stick is unavailable when motion tracking is on.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func motion_sport_auto_is_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("motion_sport_auto_is_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "motion_sport_auto_is_open"
        }

        return NSLocalizedString("motion_sport_auto_is_open", bundle: bundle, comment: "")
      }

      /// en translation: The system is busy, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func system_error_try_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("system_error_try_again", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "system_error_try_again"
        }

        return NSLocalizedString("system_error_try_again", bundle: bundle, comment: "")
      }

      /// en translation: The two passwords you typed do not match.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_two_passwork_match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_two_passwork_match", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_two_passwork_match"
        }

        return NSLocalizedString("error_two_passwork_match", bundle: bundle, comment: "")
      }

      /// en translation: The video has been saved to the phone album.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_saved_to_ablum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_saved_to_ablum", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_saved_to_ablum"
        }

        return NSLocalizedString("video_saved_to_ablum", bundle: bundle, comment: "")
      }

      /// en translation: The video should be within 20M.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_max_below_20m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_max_below_20m", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_max_below_20m"
        }

        return NSLocalizedString("video_max_below_20m", bundle: bundle, comment: "")
      }

      /// en translation: There are %@ events for this day.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func total_event2(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("total_event2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total_event2"
        }

        let format = NSLocalizedString("total_event2", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: There are 1 event for this day.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func total_event1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total_event1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total_event1"
        }

        return NSLocalizedString("total_event1", bundle: bundle, comment: "")
      }

      /// en translation: There are too many cameras connected to the router, so you cannot connect more cameras. Please delete some unused cameras to clear out expired unconnected cameras. You may need to contact the router admin.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func connect_error_ip_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect_error_ip_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect_error_ip_1"
        }

        return NSLocalizedString("connect_error_ip_1", bundle: bundle, comment: "")
      }

      /// en translation: There have been no unusual behaviors such as number theft or remote registration, etc. And the deletion of the account is on yourself operation.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_content_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_content_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_content_1"
        }

        return NSLocalizedString("delete_notice_content_1", bundle: bundle, comment: "")
      }

      /// en translation: There is no Wi-Fi signal at the current location, please move the camera near the wireless router.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_wifi_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_wifi_no", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_wifi_no"
        }

        return NSLocalizedString("check_wifi_no", bundle: bundle, comment: "")
      }

      /// en translation: There is no position, please contact the admin to add.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_position(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_position", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_position"
        }

        return NSLocalizedString("no_position", bundle: bundle, comment: "")
      }

      /// en translation: There may be security risks on a rooted phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func root_warning_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("root_warning_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "root_warning_title"
        }

        return NSLocalizedString("root_warning_title", bundle: bundle, comment: "")
      }

      /// en translation: These items can be deleted by admin only.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func toast_del_all_are_guest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_del_all_are_guest", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toast_del_all_are_guest"
        }

        return NSLocalizedString("toast_del_all_are_guest", bundle: bundle, comment: "")
      }

      /// en translation: These items will be deleted immediately. You can’t undo this action.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_message_del_multi_without_guest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_message_del_multi_without_guest", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_message_del_multi_without_guest"
        }

        return NSLocalizedString("dialog_message_del_multi_without_guest", bundle: bundle, comment: "")
      }

      /// en translation: This account already exists. Please change another email.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_binding_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_binding_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_binding_email"
        }

        return NSLocalizedString("change_binding_email", bundle: bundle, comment: "")
      }

      /// en translation: This account already exists. Please change another phone number.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_binding_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_binding_phone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_binding_phone"
        }

        return NSLocalizedString("change_binding_phone", bundle: bundle, comment: "")
      }

      /// en translation: This account already exists. Try to sign in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_exists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_exists", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_exists"
        }

        return NSLocalizedString("email_exists", bundle: bundle, comment: "")
      }

      /// en translation: This account has been signed in on another mobile phone. If you do not operate it, we recommend that you change your password after sign in again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func login_other_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_other_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_other_device"
        }

        return NSLocalizedString("login_other_device", bundle: bundle, comment: "")
      }

      /// en translation: This account is not registered in your selected country.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func email_unregister_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_unregister_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_unregister_tips"
        }

        return NSLocalizedString("email_unregister_tips", bundle: bundle, comment: "")
      }

      /// en translation: This account is not registered.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func account_no_registered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account_no_registered", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account_no_registered"
        }

        return NSLocalizedString("account_no_registered", bundle: bundle, comment: "")
      }

      /// en translation: This camera has been bound by another account. Please contact the admin for help.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_2111(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_2111", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_2111"
        }

        return NSLocalizedString("error_2111", bundle: bundle, comment: "")
      }

      /// en translation: This camera has been bounded to another account. Please contact the admin for help.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_already_bind_by_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_already_bind_by_other", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_already_bind_by_other"
        }

        return NSLocalizedString("device_already_bind_by_other", bundle: bundle, comment: "")
      }

      /// en translation: This camera has been deleted.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_deleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_deleted", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_deleted"
        }

        return NSLocalizedString("camera_deleted", bundle: bundle, comment: "")
      }

      /// en translation: This camera is already on your list.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func shared_self_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shared_self_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shared_self_error"
        }

        return NSLocalizedString("shared_self_error", bundle: bundle, comment: "")
      }

      /// en translation: This camera is offline.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func udp_awake_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("udp_awake_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "udp_awake_failed"
        }

        return NSLocalizedString("udp_awake_failed", bundle: bundle, comment: "")
      }

      /// en translation: This camera only supports 2.4GHz Wi-Fi. Your current connection is 5GHz.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func supper_net_work(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("supper_net_work", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "supper_net_work"
        }

        return NSLocalizedString("supper_net_work", bundle: bundle, comment: "")
      }

      /// en translation: This camera only supports 2.4GHz Wi-Fi. Your current network is 5GHz.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_support_5g(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_support_5g", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_support_5g"
        }

        return NSLocalizedString("not_support_5g", bundle: bundle, comment: "")
      }

      /// en translation: This email ID already exists. Try to sign in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func already_register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("already_register", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "already_register"
        }

        return NSLocalizedString("already_register", bundle: bundle, comment: "")
      }

      /// en translation: This formatting task will be performed after the current task.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func next_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next_format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next_format"
        }

        return NSLocalizedString("next_format", bundle: bundle, comment: "")
      }

      /// en translation: This is the last position.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func is_last_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("is_last_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "is_last_location"
        }

        return NSLocalizedString("is_last_location", bundle: bundle, comment: "")
      }

      /// en translation: This item can be deleted by admin only.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func toast_del_one_is_guest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_del_one_is_guest", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toast_del_one_is_guest"
        }

        return NSLocalizedString("toast_del_one_is_guest", bundle: bundle, comment: "")
      }

      /// en translation: This item doesn’t exist.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_product_not_exist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_product_not_exist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_product_not_exist"
        }

        return NSLocalizedString("payment_product_not_exist", bundle: bundle, comment: "")
      }

      /// en translation: This item has been removed.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func noProduct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noProduct", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noProduct"
        }

        return NSLocalizedString("noProduct", bundle: bundle, comment: "")
      }

      /// en translation: This item will be deleted immediately. You can’t undo this action.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_one_dialog_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_one_dialog_message", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_one_dialog_message"
        }

        return NSLocalizedString("delete_one_dialog_message", bundle: bundle, comment: "")
      }

      /// en translation: This location name already exists, please edit and try again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_name_exist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_name_exist", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_name_exist"
        }

        return NSLocalizedString("location_name_exist", bundle: bundle, comment: "")
      }

      /// en translation: This page does not exist or has other problems.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func not_found(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_found", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_found"
        }

        return NSLocalizedString("not_found", bundle: bundle, comment: "")
      }

      /// en translation: This page has expired, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func page_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("page_expired", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "page_expired"
        }

        return NSLocalizedString("page_expired", bundle: bundle, comment: "")
      }

      /// en translation: This phone does not support the purchase.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func apple_reject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apple_reject", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apple_reject"
        }

        return NSLocalizedString("apple_reject", bundle: bundle, comment: "")
      }

      /// en translation: This phone number already exists. Try to sign in instead.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_already_register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_already_register", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_already_register"
        }

        return NSLocalizedString("phone_already_register", bundle: bundle, comment: "")
      }

      /// en translation: This video has expired
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_over_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_over_day", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_over_day"
        }

        return NSLocalizedString("video_over_day", bundle: bundle, comment: "")
      }

      /// en translation: Time Zone
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func time_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("time_zone", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "time_zone"
        }

        return NSLocalizedString("time_zone", bundle: bundle, comment: "")
      }

      /// en translation: Tips
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_tips"
        }

        return NSLocalizedString("wifi_tips", bundle: bundle, comment: "")
      }

      /// en translation: To
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func to_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to_time"
        }

        return NSLocalizedString("to_time", bundle: bundle, comment: "")
      }

      /// en translation: To keep your account safe before account cancellation. Please enter the password to verify the user's identity.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func enter_pwd_tips_for_del_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_pwd_tips_for_del_account", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_pwd_tips_for_del_account"
        }

        return NSLocalizedString("enter_pwd_tips_for_del_account", bundle: bundle, comment: "")
      }

      /// en translation: To manage your cameras better, please choose a location.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func choose_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_location"
        }

        return NSLocalizedString("choose_location", bundle: bundle, comment: "")
      }

      /// en translation: To use this function, you need to purchase Awareness Service
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_pay_vip_first(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_pay_vip_first", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_pay_vip_first"
        }

        return NSLocalizedString("please_pay_vip_first", bundle: bundle, comment: "")
      }

      /// en translation: To use this function, you need to turn on Motion Detection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func please_turn_on_motion_detection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_turn_on_motion_detection", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_turn_on_motion_detection"
        }

        return NSLocalizedString("please_turn_on_motion_detection", bundle: bundle, comment: "")
      }

      /// en translation: Too many requests, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func request_frequent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_frequent", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request_frequent"
        }

        return NSLocalizedString("request_frequent", bundle: bundle, comment: "")
      }

      /// en translation: Too many requests, please retry later.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verification_error_max_times(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification_error_max_times", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verification_error_max_times"
        }

        return NSLocalizedString("verification_error_max_times", bundle: bundle, comment: "")
      }

      /// en translation: Tracking mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func tracking_mode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tracking_mode", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tracking_mode"
        }

        return NSLocalizedString("tracking_mode", bundle: bundle, comment: "")
      }

      /// en translation: Try %@ Awareness
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_smart(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("open_smart", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_smart"
        }

        let format = NSLocalizedString("open_smart", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Try again after troubleshooting the following issues
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func troubleshooting_issue2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("troubleshooting_issue2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "troubleshooting_issue2"
        }

        return NSLocalizedString("troubleshooting_issue2", bundle: bundle, comment: "")
      }

      /// en translation: Try rebooting your Wi-Fi router. If that does not help, try to reconnect to Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_offline_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_offline_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_offline_desc"
        }

        return NSLocalizedString("camera_offline_desc", bundle: bundle, comment: "")
      }

      /// en translation: Turn on
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func alarm_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alarm_on", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alarm_on"
        }

        return NSLocalizedString("alarm_on", bundle: bundle, comment: "")
      }

      /// en translation: Turn on "Bluetooth" in the system control center
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bluetooth_system_center(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bluetooth_system_center", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bluetooth_system_center"
        }

        return NSLocalizedString("bluetooth_system_center", bundle: bundle, comment: "")
      }

      /// en translation: Turn on "Location Info" to help you automatically fill in Wi-Fi info.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_location_Info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_location_Info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_location_Info"
        }

        return NSLocalizedString("open_location_Info", bundle: bundle, comment: "")
      }

      /// en translation: Turn on "Location Services" in "Settings-Privacy"
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turn_on_location_services_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_location_services_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_location_services_title"
        }

        return NSLocalizedString("turn_on_location_services_title", bundle: bundle, comment: "")
      }

      /// en translation: Turn on "Location Services" to allow "VicoHome" to use your location
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turn_on_location_services(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_location_services", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_location_services"
        }

        return NSLocalizedString("turn_on_location_services", bundle: bundle, comment: "")
      }

      /// en translation: Turn on "Wi-Fi" to help you search for available networks nearby.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_WiFi_word(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_WiFi_word", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_WiFi_word"
        }

        return NSLocalizedString("open_WiFi_word", bundle: bundle, comment: "")
      }

      /// en translation: Turn on Bluetooth to add the camera faster.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_bluetooth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_bluetooth", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_bluetooth"
        }

        return NSLocalizedString("open_bluetooth", bundle: bundle, comment: "")
      }

      /// en translation: Turn on Bluetooth to allow "%@" to connect, quickly bind the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func open_bluetooth_bonding(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("open_bluetooth_bonding", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_bluetooth_bonding"
        }

        let format = NSLocalizedString("open_bluetooth_bonding", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Turn on location service, automatically get the current Wi-Fi name (SSID) of the phone.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turn_on_location_services_get_wifi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_location_services_get_wifi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_location_services_get_wifi"
        }

        return NSLocalizedString("turn_on_location_services_get_wifi", bundle: bundle, comment: "")
      }

      /// en translation: Turn on the alarm and the camera will ring.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func do_alarm_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do_alarm_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do_alarm_tips"
        }

        return NSLocalizedString("do_alarm_tips", bundle: bundle, comment: "")
      }

      /// en translation: Turn on the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turn_on_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_camera"
        }

        return NSLocalizedString("turn_on_camera", bundle: bundle, comment: "")
      }

      /// en translation: Turn on the camera according to the camera body guide
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_guide", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_guide"
        }

        return NSLocalizedString("bind_device_guide", bundle: bundle, comment: "")
      }

      /// en translation: Turn on the “Rotate Image” function, the sensitivity of motion detection may be affected.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func rotate_image_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rotate_image_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rotate_image_open"
        }

        return NSLocalizedString("rotate_image_open", bundle: bundle, comment: "")
      }

      /// en translation: Turn on your camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_device_power_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_device_power_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_device_power_title"
        }

        return NSLocalizedString("add_device_power_title", bundle: bundle, comment: "")
      }

      /// en translation: Turn on your camera and scan theQR code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func turn_on_camera_scanQR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_camera_scanQR", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_camera_scanQR"
        }

        return NSLocalizedString("turn_on_camera_scanQR", bundle: bundle, comment: "")
      }

      /// en translation: Unable to get the Wi-Fi name (SSID)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func can_not_get_ssid_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can_not_get_ssid_short", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can_not_get_ssid_short"
        }

        return NSLocalizedString("can_not_get_ssid_short", bundle: bundle, comment: "")
      }

      /// en translation: Unable to get the Wi-Fi name (SSID), please change a Wi-Fi for your phone or manually enter a Wi-Fi name (SSID).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func can_not_get_ssid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("can_not_get_ssid", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "can_not_get_ssid"
        }

        return NSLocalizedString("can_not_get_ssid", bundle: bundle, comment: "")
      }

      /// en translation: Unable to load image
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func unable_to_load_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unable_to_load_image", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unable_to_load_image"
        }

        return NSLocalizedString("unable_to_load_image", bundle: bundle, comment: "")
      }

      /// en translation: Unknown camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_not_activated_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_not_activated_short", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_not_activated_short"
        }

        return NSLocalizedString("camera_not_activated_short", bundle: bundle, comment: "")
      }

      /// en translation: Unknown camera, please contact the retailer.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_not_activated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_not_activated", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_not_activated"
        }

        return NSLocalizedString("camera_not_activated", bundle: bundle, comment: "")
      }

      /// en translation: Unknown device, please contact retailer.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_unactivated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_unactivated", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_unactivated"
        }

        return NSLocalizedString("device_unactivated", bundle: bundle, comment: "")
      }

      /// en translation: Unknown request error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_unknown", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_unknown"
        }

        return NSLocalizedString("error_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Unread
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func missed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("missed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "missed"
        }

        return NSLocalizedString("missed", bundle: bundle, comment: "")
      }

      /// en translation: Unsuccessful connection, please click here
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_scan_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_scan_failed", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_scan_failed"
        }

        return NSLocalizedString("bind_device_scan_failed", bundle: bundle, comment: "")
      }

      /// en translation: Until %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func terminated_day(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("terminated_day", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terminated_day"
        }

        let format = NSLocalizedString("terminated_day", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Up to date
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func latest_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("latest_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "latest_version"
        }

        return NSLocalizedString("latest_version", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update"
        }

        return NSLocalizedString("update", bundle: bundle, comment: "")
      }

      /// en translation: Update Now
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_now", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_now"
        }

        return NSLocalizedString("update_now", bundle: bundle, comment: "")
      }

      /// en translation: Update location successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update_location_scuess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_location_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_location_scuess"
        }

        return NSLocalizedString("update_location_scuess", bundle: bundle, comment: "")
      }

      /// en translation: Update to the latest version %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update_the_latest_version(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("update_the_latest_version", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_the_latest_version"
        }

        let format = NSLocalizedString("update_the_latest_version", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Updated camera name successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update_device_name_scuess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_device_name_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_device_name_scuess"
        }

        return NSLocalizedString("update_device_name_scuess", bundle: bundle, comment: "")
      }

      /// en translation: Updated timezone successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update_timezone_scuess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_timezone_scuess", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_timezone_scuess"
        }

        return NSLocalizedString("update_timezone_scuess", bundle: bundle, comment: "")
      }

      /// en translation: Updated user name successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func update_user_name_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_user_name_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_user_name_success"
        }

        return NSLocalizedString("update_user_name_success", bundle: bundle, comment: "")
      }

      /// en translation: Updating …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func updating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("updating", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "updating"
        }

        return NSLocalizedString("updating", bundle: bundle, comment: "")
      }

      /// en translation: Upgrade
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_vip_update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_vip_update", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_vip_update"
        }

        return NSLocalizedString("payment_vip_update", bundle: bundle, comment: "")
      }

      /// en translation: Upload failed, please retry.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func uploaded_fail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploaded_fail", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploaded_fail"
        }

        return NSLocalizedString("uploaded_fail", bundle: bundle, comment: "")
      }

      /// en translation: Uploaded successfully.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func uploaded_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploaded_success", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploaded_success"
        }

        return NSLocalizedString("uploaded_success", bundle: bundle, comment: "")
      }

      /// en translation: Use %@ to scan the code to get permission.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func get_use_permission(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("get_use_permission", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_use_permission"
        }

        let format = NSLocalizedString("get_use_permission", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Use scan code adding
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func scan_camera_way(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_camera_way", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_camera_way"
        }

        return NSLocalizedString("scan_camera_way", bundle: bundle, comment: "")
      }

      /// en translation: Use your mobile phone to scan the QR code of the fuselage to obtain the camera model. The QR code of the fuselage is often found in the casing or under the rubber plug. This QR code contains the serial number and product model information, usually with a string beginning with "S/N" next to it.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func choose_camera_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_camera_type", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_camera_type"
        }

        return NSLocalizedString("choose_camera_type", bundle: bundle, comment: "")
      }

      /// en translation: User
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func mine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mine", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mine"
        }

        return NSLocalizedString("mine", bundle: bundle, comment: "")
      }

      /// en translation: User Agreement
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func user_agreement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_agreement", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_agreement"
        }

        return NSLocalizedString("user_agreement", bundle: bundle, comment: "")
      }

      /// en translation: User Agreement & Privacy Policy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func vicoo_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vicoo_policy", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vicoo_policy"
        }

        return NSLocalizedString("vicoo_policy", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func user_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_name"
        }

        return NSLocalizedString("user_name", bundle: bundle, comment: "")
      }

      /// en translation: User guides
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func user_guide_package(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_guide_package", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_guide_package"
        }

        return NSLocalizedString("user_guide_package", bundle: bundle, comment: "")
      }

      /// en translation: User has to be authenticated to proceed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func unauthorized(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unauthorized", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unauthorized"
        }

        return NSLocalizedString("unauthorized", bundle: bundle, comment: "")
      }

      /// en translation: User is not allowed to proceed
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func forbidden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forbidden", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forbidden"
        }

        return NSLocalizedString("forbidden", bundle: bundle, comment: "")
      }

      /// en translation: User name is already in use.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func username_inuse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Username_inuse", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Username_inuse"
        }

        return NSLocalizedString("Username_inuse", bundle: bundle, comment: "")
      }

      /// en translation: User name is noncompliance.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func username_noncompliance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("username_noncompliance", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "username_noncompliance"
        }

        return NSLocalizedString("username_noncompliance", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func ai_car(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ai_car", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ai_car"
        }

        return NSLocalizedString("ai_car", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func vehicle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vehicle", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vehicle"
        }

        return NSLocalizedString("vehicle", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle approaching
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func vehicle_approaching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vehicle_approaching", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vehicle_approaching"
        }

        return NSLocalizedString("vehicle_approaching", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle leaving
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func vehicle_leaving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vehicle_leaving", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vehicle_leaving"
        }

        return NSLocalizedString("vehicle_leaving", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle parked
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func vehicle_parked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vehicle_parked", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vehicle_parked"
        }

        return NSLocalizedString("vehicle_parked", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_your_inbox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_your_inbox", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_your_inbox"
        }

        return NSLocalizedString("check_your_inbox", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func input_need_verify_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input_need_verify_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "input_need_verify_code"
        }

        return NSLocalizedString("input_need_verify_code", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func login_verify_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_verify_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_verify_code"
        }

        return NSLocalizedString("login_verify_code", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verify_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_code"
        }

        return NSLocalizedString("verify_code", bundle: bundle, comment: "")
      }

      /// en translation: Verification code expired.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verification_code_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification_code_expired", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verification_code_expired"
        }

        return NSLocalizedString("verification_code_expired", bundle: bundle, comment: "")
      }

      /// en translation: Verification code is wrong.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func error_vaild_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_vaild_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_vaild_code"
        }

        return NSLocalizedString("error_vaild_code", bundle: bundle, comment: "")
      }

      /// en translation: Verification code login
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func login_way_verify_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_way_verify_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_way_verify_code"
        }

        return NSLocalizedString("login_way_verify_code", bundle: bundle, comment: "")
      }

      /// en translation: Verification code not correct.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verification_code_not_right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification_code_not_right", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verification_code_not_right"
        }

        return NSLocalizedString("verification_code_not_right", bundle: bundle, comment: "")
      }

      /// en translation: Verify Identity
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verify_user_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_user_info", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_user_info"
        }

        return NSLocalizedString("verify_user_info", bundle: bundle, comment: "")
      }

      /// en translation: VicoHome APP can no longer be usable. Please download 全橙看家 in time. You can sign in to 全橙看家 directly through your VicoHome account. All your camera info and Awareness service status will be retained and you can continue to use it. Learn more >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_6_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("migration_statement_6_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_6_2"
        }

        return NSLocalizedString("migration_statement_6_2", bundle: bundle, comment: "")
      }

      /// en translation: Video Tag
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_tag", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_tag"
        }

        return NSLocalizedString("video_tag", bundle: bundle, comment: "")
      }

      /// en translation: Video is saving …
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func video_saving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("video_saving", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "video_saving"
        }

        return NSLocalizedString("video_saving", bundle: bundle, comment: "")
      }

      /// en translation: View help >>
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func help_guide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help_guide", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help_guide"
        }

        return NSLocalizedString("help_guide", bundle: bundle, comment: "")
      }

      /// en translation: Voice Language
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language"
        }

        return NSLocalizedString("device_language", bundle: bundle, comment: "")
      }

      /// en translation: Voice Volume
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func prompt_volume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("prompt_volume", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "prompt_volume"
        }

        return NSLocalizedString("prompt_volume", bundle: bundle, comment: "")
      }

      /// en translation: W
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wednesday", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wednesday"
        }

        return NSLocalizedString("wednesday", bundle: bundle, comment: "")
      }

      /// en translation: Waiting for Permission
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func request_permission_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_permission_title", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request_permission_title"
        }

        return NSLocalizedString("request_permission_title", bundle: bundle, comment: "")
      }

      /// en translation: Wake up
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_wake_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_wake_up", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_wake_up"
        }

        return NSLocalizedString("camera_wake_up", bundle: bundle, comment: "")
      }

      /// en translation: Wake up the camera
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wakeup_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wakeup_camera", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wakeup_camera"
        }

        return NSLocalizedString("wakeup_camera", bundle: bundle, comment: "")
      }

      /// en translation: Watch the live stream and view the playback
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func pem_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pem_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pem_des"
        }

        return NSLocalizedString("pem_des", bundle: bundle, comment: "")
      }

      /// en translation: We apologize for the inconvenience, 全橙看家 will guard safety for you!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func migration_statement_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("migration_statement_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "migration_statement_3"
        }

        return NSLocalizedString("migration_statement_3", bundle: bundle, comment: "")
      }

      /// en translation: We are glad to tell you that we have released a new app %@, which is an upgraded version of Vicoo. And Vicoo will not be updated any more. Please switch to our new app %@, and we believe it will give you a much better user experience.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_statement_1(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("change_statement_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_statement_1"
        }

        let format = NSLocalizedString("change_statement_1", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: We can't wait to start a new journey with you in the %@ app and you are welcome to tell us any feedbacks!
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_statement_5(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("change_statement_5", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_statement_5"
        }

        let format = NSLocalizedString("change_statement_5", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: We just send a verification code to your email ID %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_inbox_des(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("check_inbox_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_inbox_des"
        }

        let format = NSLocalizedString("check_inbox_des", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: We just send a verification code to your email ID %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verification_code_sent_tips(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verification_code_sent_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verification_code_sent_tips"
        }

        let format = NSLocalizedString("verification_code_sent_tips", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: We just sent a verification code to your  phone number %@.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func verify_send_code(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verify_send_code", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_send_code"
        }

        let format = NSLocalizedString("verify_send_code", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Weak
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func weak(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weak", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weak"
        }

        return NSLocalizedString("weak", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func log_in_tips(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("log_in_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "log_in_tips"
        }

        let format = NSLocalizedString("log_in_tips", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Welcome to Camera Binding Help Center! Online staff service open hours: Singapore time 10AM-10PM (PST 6PM-6AM).
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func iosAnswer_botTextLabelHi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.answer_bot.text.label.hi", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.answer_bot.text.label.hi"
        }

        return NSLocalizedString("ios.answer_bot.text.label.hi", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Camera Binding Help Center! Online staff service open hours: Singapore time 10AM-10PM (PST 6PM-6AM). Please describe your issue and tell us your camera model first. (You can find your camera model on the label affixed to the camera. Or you can take off the shell of the camera or open the rubber cover of the camera to find your camera model. The camera model is G0, CGXX(for example CG1), CBXX(for example CB1), JXJ-FA01, etc. )
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func iosAnswer_botTextLabelDisabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ios.answer_bot.text.label.disabled", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ios.answer_bot.text.label.disabled"
        }

        return NSLocalizedString("ios.answer_bot.text.label.disabled", bundle: bundle, comment: "")
      }

      /// en translation: What you only need to click the "Go to download" button below to jump to the Google Play Store or search and install "%@" directly in the Google Play Store,  then install the new app and sign in it with your Vicoo account. Please rest assured that everything (your cameras, your data, your settings) will keep the same.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_statement_2(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("change_statement_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_statement_2"
        }

        let format = NSLocalizedString("change_statement_2", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: When motion is detected, the camera will automatically sound an alarm.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func motion_alarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("motion_alarm", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "motion_alarm"
        }

        return NSLocalizedString("motion_alarm", bundle: bundle, comment: "")
      }

      /// en translation: When motion is detected, the camera will automatically track the motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func action_tracing_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_tracing_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_tracing_open"
        }

        return NSLocalizedString("action_tracing_open", bundle: bundle, comment: "")
      }

      /// en translation: When someone moves, the camera will track the person's movement.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func human_tracking_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("human_tracking_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "human_tracking_2"
        }

        return NSLocalizedString("human_tracking_2", bundle: bundle, comment: "")
      }

      /// en translation: When the camera detects that the package has been picked up and put down, it will send you a message.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func package_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_tips"
        }

        return NSLocalizedString("package_tips", bundle: bundle, comment: "")
      }

      /// en translation: When the “Crying Detection" function is enabled, you will be notified if crying is detected in your baby's room.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func crying_detection_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crying_detection_on", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "crying_detection_on"
        }

        return NSLocalizedString("crying_detection_on", bundle: bundle, comment: "")
      }

      /// en translation: When you hear "Power up", you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_long_press_power_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_long_press_power_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_long_press_power_tips"
        }

        return NSLocalizedString("guide_long_press_power_tips", bundle: bundle, comment: "")
      }

      /// en translation: When you hear "Scan QR code", you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_device_power_double_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_device_power_double_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_device_power_double_des"
        }

        return NSLocalizedString("add_device_power_double_des", bundle: bundle, comment: "")
      }

      /// en translation: When you hear a power-up sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_g_step0_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_g_step0_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_g_step0_desc"
        }

        return NSLocalizedString("bind_device_g_step0_desc", bundle: bundle, comment: "")
      }

      /// en translation: When you hear a power-up sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_device_k0_step0_desc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_device_k0_step0_desc", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_device_k0_step0_desc"
        }

        return NSLocalizedString("bind_device_k0_step0_desc", bundle: bundle, comment: "")
      }

      /// en translation: When you hear a scanning sound or see the light flashing, you can scan the QR code about  6-12inches in front of the camera. If not, please double-click the power button to enter the scan mode. You will hear a sound when the camera successfully scans the QR code.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func bind_111(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bind_111", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bind_111"
        }

        return NSLocalizedString("bind_111", bundle: bundle, comment: "")
      }

      /// en translation: When you hear the scanning sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_bind_heared_common_voice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_bind_heared_common_voice", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_bind_heared_common_voice"
        }

        return NSLocalizedString("device_bind_heared_common_voice", bundle: bundle, comment: "")
      }

      /// en translation: When you hear the sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_long_press_power_tips_b0(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_long_press_power_tips_b0", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_long_press_power_tips_b0"
        }

        return NSLocalizedString("guide_long_press_power_tips_b0", bundle: bundle, comment: "")
      }

      /// en translation: When you hear the sound, you can proceed to the next step.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func guide_long_press_power_tips_g1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guide_long_press_power_tips_g1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guide_long_press_power_tips_g1"
        }

        return NSLocalizedString("guide_long_press_power_tips_g1", bundle: bundle, comment: "")
      }

      /// en translation: When you turn on "Alarm" or "Flashlight", the camera will automatically warn when it detects motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_alarm_white_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_alarm_white_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_alarm_white_tips"
        }

        return NSLocalizedString("camera_alarm_white_tips", bundle: bundle, comment: "")
      }

      /// en translation: When you turn on "Alarm", the camera will automatically sound an alarm when it detects motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_alarm_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_alarm_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_alarm_tips"
        }

        return NSLocalizedString("camera_alarm_tips", bundle: bundle, comment: "")
      }

      /// en translation: When you turn on Video Record feature, the camera will record video automatically when it detects motion.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func record_video_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record_video_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record_video_tips"
        }

        return NSLocalizedString("record_video_tips", bundle: bundle, comment: "")
      }

      /// en translation: When you turn on the "Speaker" function, the camera will provide sound feedback in time so that you can understand the status of the camera more clearly.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func confirm_speaker_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_speaker_open", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_speaker_open"
        }

        return NSLocalizedString("confirm_speaker_open", bundle: bundle, comment: "")
      }

      /// en translation: Where would you like to put this camera?
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func camera_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_location", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_location"
        }

        return NSLocalizedString("camera_location", bundle: bundle, comment: "")
      }

      /// en translation: While Using
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func while_using(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("while_using", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "while_using"
        }

        return NSLocalizedString("while_using", bundle: bundle, comment: "")
      }

      /// en translation: White light
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func white_light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("white_light", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "white_light"
        }

        return NSLocalizedString("white_light", bundle: bundle, comment: "")
      }

      /// en translation: White light illuminates the environment, try to restore the color picture at night
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func whitelight_des(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whitelight_des", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whitelight_des"
        }

        return NSLocalizedString("whitelight_des", bundle: bundle, comment: "")
      }

      /// en translation: White light mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func night_mode_white(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("night_mode_white", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "night_mode_white"
        }

        return NSLocalizedString("night_mode_white", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi Channel
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_channel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_channel", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_channel"
        }

        return NSLocalizedString("wifi_channel", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi Connection
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_connect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_connect", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_connect"
        }

        return NSLocalizedString("wifi_connect", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi Name:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_name"
        }

        return NSLocalizedString("wifi_name", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi Strength
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func signal_strength(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signal_strength", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signal_strength"
        }

        return NSLocalizedString("signal_strength", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi name (SSID)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func network_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("network_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "network_name"
        }

        return NSLocalizedString("network_name", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi set up issue
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_issue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_issue", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_issue"
        }

        return NSLocalizedString("wifi_issue", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi settings
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_setting", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_setting"
        }

        return NSLocalizedString("wifi_setting", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi strength:
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_state_ios(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wifi_state_ios", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_state_ios"
        }

        return NSLocalizedString("wifi_state_ios", bundle: bundle, comment: "")
      }

      /// en translation: Wi-Fi strength: %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wifi_state(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("wifi_state", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wifi_state"
        }

        let format = NSLocalizedString("wifi_state", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Within 15 minutes, you will not receive any motion detection messages, but all events will still be recorded.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func do_not_disturb_15min_describ(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do_not_disturb_15min_describ", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do_not_disturb_15min_describ"
        }

        return NSLocalizedString("do_not_disturb_15min_describ", bundle: bundle, comment: "")
      }

      /// en translation: Working time
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sleep_work_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_work_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_work_time"
        }

        return NSLocalizedString("sleep_work_time", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yes"
        }

        return NSLocalizedString("yes", bundle: bundle, comment: "")
      }

      /// en translation: You can place the camera on a shelf or other surfaces to use, or you can install it on a wall to use.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func install_on_shelf(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Install_on_shelf", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Install_on_shelf"
        }

        return NSLocalizedString("Install_on_shelf", bundle: bundle, comment: "")
      }

      /// en translation: You can't undo this action. %d item from friends' camera cannot be deleted.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func dialog_message_del_multi_with_guest(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("dialog_message_del_multi_with_guest", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_message_del_multi_with_guest"
        }

        let format = NSLocalizedString("dialog_message_del_multi_with_guest", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You have already purchased a %@ Awareness option, please don't order again.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_product_already_paid(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("payment_product_already_paid", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_product_already_paid"
        }

        let format = NSLocalizedString("payment_product_already_paid", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You have already updated to the latest version.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func app_is_update_to_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_is_update_to_date", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_is_update_to_date"
        }

        return NSLocalizedString("app_is_update_to_date", bundle: bundle, comment: "")
      }

      /// en translation: You only need to click the "Go to download" button below to jump to the app store or search and install "%@" directly in the app store, and then re-register your account to use it. If you have any questions, please contact support@vicoo.tech .
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_statement_2_email(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("change_statement_2_email", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_statement_2_email"
        }

        let format = NSLocalizedString("change_statement_2_email", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You will get the service of %@ on %@. Please download the videos if necessary.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func membership_expire(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("membership_expire", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "membership_expire"
        }

        let format = NSLocalizedString("membership_expire", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: You will receive a “Someone was detected" notification on person events exclusively. Notification is more specific and less frequent but could be slightly delayed.
      ///
      /// Locales: en, zh-Hans, de, fr, ru, it, es, fi-FI
      static func person_alter_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("person_alter_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "person_alter_tips"
        }

        return NSLocalizedString("person_alter_tips", bundle: bundle, comment: "")
      }

      /// en translation: Your Wi-Fi may be 5GHz Wi-Fi that the camera cannot support. Please reconfirm if you are using 2.4GHz Wi-Fi.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func no_supper_5g(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_supper_5g", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_supper_5g"
        }

        return NSLocalizedString("no_supper_5g", bundle: bundle, comment: "")
      }

      /// en translation: Your application was sent to the admin successfully. Please wait for permission.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func wait_for_permission_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wait_for_permission_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wait_for_permission_tips"
        }

        return NSLocalizedString("wait_for_permission_tips", bundle: bundle, comment: "")
      }

      /// en translation: Your camera can let you know when it notices activity. Choose the notifications you'd like to get.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_des_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_des_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_des_tips"
        }

        return NSLocalizedString("notification_des_tips", bundle: bundle, comment: "")
      }

      /// en translation: Your camera will notify you when detecting motion. Choose the notifications you'd like to get.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func notification_setting_tips(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification_setting_tips", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification_setting_tips"
        }

        return NSLocalizedString("notification_setting_tips", bundle: bundle, comment: "")
      }

      /// en translation: Your login has expired, please sign in.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func login_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_expired", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_expired"
        }

        return NSLocalizedString("login_expired", bundle: bundle, comment: "")
      }

      /// en translation: Your phone has no network connection.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func phone_no_net(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_no_net", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_no_net"
        }

        return NSLocalizedString("phone_no_net", bundle: bundle, comment: "")
      }

      /// en translation: Your phone network connection is poor.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_no_replied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_no_replied", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_no_replied"
        }

        return NSLocalizedString("device_no_replied", bundle: bundle, comment: "")
      }

      /// en translation: Zone %@
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func zone_with_args(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("zone_with_args", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "zone_with_args"
        }

        let format = NSLocalizedString("zone_with_args", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Zone 1
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func zone_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zone_1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "zone_1"
        }

        return NSLocalizedString("zone_1", bundle: bundle, comment: "")
      }

      /// en translation: Zone 2
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func zone_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zone_2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "zone_2"
        }

        return NSLocalizedString("zone_2", bundle: bundle, comment: "")
      }

      /// en translation: Zone 3
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func zone_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zone_3", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "zone_3"
        }

        return NSLocalizedString("zone_3", bundle: bundle, comment: "")
      }

      /// en translation: a normal international email address such as Gmail and Yahoo
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason_bold2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason_bold2", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason_bold2"
        }

        return NSLocalizedString("cannot_receive_code_reason_bold2", bundle: bundle, comment: "")
      }

      /// en translation: add
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_sleep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_sleep", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_sleep"
        }

        return NSLocalizedString("add_sleep", bundle: bundle, comment: "")
      }

      /// en translation: alarm duration
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func duration_alarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("duration_alarm", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "duration_alarm"
        }

        return NSLocalizedString("duration_alarm", bundle: bundle, comment: "")
      }

      /// en translation: and
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func and(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("and", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "and"
        }

        return NSLocalizedString("and", bundle: bundle, comment: "")
      }

      /// en translation: camera Offline
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_offline", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_offline"
        }

        return NSLocalizedString("device_offline", bundle: bundle, comment: "")
      }

      /// en translation: cancel automatic renewal
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func delete_notice_content_4_ios_link(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_notice_content_4_ios_link", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_notice_content_4_ios_link"
        }

        return NSLocalizedString("delete_notice_content_4_ios_link", bundle: bundle, comment: "")
      }

      /// en translation: choose a usage mode
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func payment_please_choose_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_please_choose_time", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_please_choose_time"
        }

        return NSLocalizedString("payment_please_choose_time", bundle: bundle, comment: "")
      }

      /// en translation: dd/MM/yyyy
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func terminated_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terminated_format", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terminated_format"
        }

        return NSLocalizedString("terminated_format", bundle: bundle, comment: "")
      }

      /// en translation: double click
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func change_net_device_power_des_key_point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_net_device_power_des_key_point", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_net_device_power_des_key_point"
        }

        return NSLocalizedString("change_net_device_power_des_key_point", bundle: bundle, comment: "")
      }

      /// en translation: download is complete
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func download_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("download_done", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "download_done"
        }

        return NSLocalizedString("download_done", bundle: bundle, comment: "")
      }

      /// en translation: includes
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func options_include(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("options_include", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "options_include"
        }

        return NSLocalizedString("options_include", bundle: bundle, comment: "")
      }

      /// en translation: invited you to view the Camera。
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func invited_join_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invited_join_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invited_join_device"
        }

        return NSLocalizedString("invited_join_device", bundle: bundle, comment: "")
      }

      /// en translation: live video play error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func player_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("player_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "player_error"
        }

        return NSLocalizedString("player_error", bundle: bundle, comment: "")
      }

      /// en translation: location name format error.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func location_name_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location_name_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_name_error"
        }

        return NSLocalizedString("location_name_error", bundle: bundle, comment: "")
      }

      /// en translation: long press
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func add_device_power_des_key_point(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_device_power_des_key_point", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_device_power_des_key_point"
        }

        return NSLocalizedString("add_device_power_des_key_point", bundle: bundle, comment: "")
      }

      /// en translation: open timer unit
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func timer_unit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timer_unit", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "timer_unit"
        }

        return NSLocalizedString("timer_unit", bundle: bundle, comment: "")
      }

      /// en translation: or
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func or(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("or", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "or"
        }

        return NSLocalizedString("or", bundle: bundle, comment: "")
      }

      /// en translation: please check it in the trash box of the receiving mailbox.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func cannot_receive_code_reason_bold1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannot_receive_code_reason_bold1", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cannot_receive_code_reason_bold1"
        }

        return NSLocalizedString("cannot_receive_code_reason_bold1", bundle: bundle, comment: "")
      }

      /// en translation: request error
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func request_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_error", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request_error"
        }

        return NSLocalizedString("request_error", bundle: bundle, comment: "")
      }

      /// en translation: s
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func seconds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seconds", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seconds"
        }

        return NSLocalizedString("seconds", bundle: bundle, comment: "")
      }

      /// en translation: today
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("today", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "today"
        }

        return NSLocalizedString("today", bundle: bundle, comment: "")
      }

      /// en translation: xx@xx.xx
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func check_email_sample(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_email_sample", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_email_sample"
        }

        return NSLocalizedString("check_email_sample", bundle: bundle, comment: "")
      }

      /// en translation: you have not added any camera yet.
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func have_no_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("have_no_device", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "have_no_device"
        }

        return NSLocalizedString("have_no_device", bundle: bundle, comment: "")
      }

      /// en translation: —
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func sepvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sepvalue", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sepvalue"
        }

        return NSLocalizedString("sepvalue", bundle: bundle, comment: "")
      }

      /// en translation: 全橙看家
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es
      static func move_app_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("move_app_name", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "move_app_name"
        }

        return NSLocalizedString("move_app_name", bundle: bundle, comment: "")
      }

      /// en translation: 日本語(Japanese)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_ja(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_ja", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_ja"
        }

        return NSLocalizedString("device_language_ja", bundle: bundle, comment: "")
      }

      /// en translation: 汉语(Chinese)
      ///
      /// Locales: en, zh-Hans, ja, de, fr, ru, it, es, fi-FI
      static func device_language_cn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device_language_cn", bundle: (hostingBundle ?? hostingBundle_defalut), comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device_language_cn"
        }

        return NSLocalizedString("device_language_cn", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle ?? R.hostingBundle_defalut
      let launchScreen = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "LaunchScreen")
      let name = "LaunchScreen"

      func launchScreen(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchScreen)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.launchScreen().launchScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchScreen' could not be loaded from storyboard 'LaunchScreen' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle ?? R.hostingBundle_defalut
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
